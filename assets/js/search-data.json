{
  
    
        "post0": {
            "title": "Hacks for simulations",
            "content": "Notes . What is a simulation? -simpler abstraction of an very complicated natural phenomena -removes details that are too difficult to simulate . Advantages of using a simulation . Safer - avoid safety hazards in real-life experimentation | Less expensive - don&#39;t need to buy real-world equipment, just abstract simulation! | Repeatable - once a simulation is created, it&#39;s easy to repeat it to get different but similar results | Can make predictions - use previous data to predict what will happen in the future | Examples . Rolling a dice must account for air resistance and velocity of the throw --&gt; create a psuedo random number generator that can randomly generate a number from the 6 sides | Airplane transportation must account for weather, air resistance, etc --&gt; run multiple simulations with variety of outside factor conditions | . Techniques to formulate a good simulation . Procedure and iteration | Flowcharts | Conditionals | Removing details; like accidents or weather | . Hacks . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Emma Shen | | . 1 | N/A | . 2 | N/A | . 3 | C - A and B are both true | . 4 | B - other aircraft in situation is important and can make big impact. rain, storm, + other small weather issues are less considered | . 5 | C - both simulations and experiment need to consider logistics of situation and what their purpose is | . 6 | A - to avoid safety issues when testing a new product, a simulation is better | . 7 | A - testing real-life greenhouse gas effect on environment is unsafe and can be better simulated | . 8 | N/A | . 9 | B - in this case there are not many other factors to consider or safety/money issue. If teacher wants to calculate test average should just use actual numbers therefore experiment | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation . Extra Credit . Purpose: Simulate 600 rolls of a 6 sided dice . import random import pandas as pd data = [] #1 empty list data for i in range(600): #2 for-loop roll = random.randint(1, 6) #3 simulate real-world factors (randomization in 6 sided dice) d = { &quot;roll&quot;: roll } #4 accumulate factors in dictionary d data.append(d) #5 append d to list data df = pd.DataFrame(data) #6 create the DataFrame (outside of the for-loop) print(f&quot;Outcome of 600 random rolls of a 6 sided dice n{df}&quot;) . Outcome of 600 random rolls of a 6 sided dice roll 0 2 1 2 2 5 3 3 4 6 .. ... 595 5 596 3 597 1 598 6 599 3 [600 rows x 1 columns] .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/05/10/unit3section16.html",
            "relUrl": "/2023/05/10/unit3section16.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False | . Answer: 1000(B) = 8(D) =! 90(D) --&gt; B. False . 2. 10(D) ≠ 0110(B) . A. True | B. False | . Answer: 0110(B) =! 6(D) --&gt; A. True . 3. 56(D) ≥ 111000(B) . A. True | B. False | . Answer: 111000(B) = 56(D) --&gt; 56(D) &gt;= 56(D) --&gt; A. True . 3. 99(D) &lt; 1110011(B) . A. True | B. False | . Answer: 1110011(B) = 115(D) --&gt; 99(D) &lt; 115(D) --&gt; A. True . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 or 1 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 != 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &lt;= y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z + y) . False True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer explanation: . result = 75 . 75 &lt; 80 --&gt; &quot;Please schedule a retake&quot; . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | Answer: 2 . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | Answer: 2. If-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Answer: 1. If statement . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? --&gt; True print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) elif i == &quot;wildebeest&quot;: print(&quot;Fun Fact: Wildebeests live in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion tiger Fun Fact: Wildebeests live in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . import selenium from selenium import webdriver from selenium.webdriver.common.keys import Keys dict = { &quot;Chicken Alfredo&quot;: [&#39;Chicken&#39;, 60], &quot;Cheese Quesadilla&quot;: [&#39;None&#39;, 10], &quot;Beef Wellington&quot;: [&#39;Beef&#39;, 150] } #for each key, value pair in the dictionary for key, values in dict.items(): count = 0 for value in values: #isinstance checks if value is a string if isinstance(value, (str)) == True: if value == &quot;None&quot;: count += 1 #isinstance checks if value is an integer elif isinstance(value, (int)) == True: if value &lt;= 30: count += 1 if count == 2: print(key) break . Cheese Quesadilla . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . Lesson Takeaways: . For Binary to Decimal conversions and vice versa, I need to remember that each decimal place is to the power of 2 | if statement and if-else statements are different: if statements only preform if statement is met, if-else goes through code no matter is statement is met | I can use dictionaries and nested if statements to create a program that solves real-world problems | Sketching out a flow chart in psuedo code allows me to clear my algorithm logic. | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2023/05/10/u3s5-6lol.html",
            "relUrl": "/csp/2023/05/10/u3s5-6lol.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Sections 9-11 Hacks",
            "content": "(1) Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Input In [2] if (isCold or isRaining) { ^ SyntaxError: invalid syntax . (2) Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . import random random_number = [] i = 1 while i &lt;= 4: random_number.append(random.randint(1,10)) i = i +1 def sort(random_number): for index in range(1,len(random_number)): value = random_number[index] i = index - 1 while i &gt;= 0: if value &lt; random_number[i]: random_number[i+1] = random_number[i] random_number[i] = value i = i - 1 else: break sort(random_number) print(random_number) print(&quot;Max Score:&quot;, random_number[len(random_number)-1]) . [4, 4, 6, 10] Max Score: 10 . (3) Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: If (can_moveForward) Move_Forward Else (can_moveRight) { Rotate_Right Move_Forward } . (4) Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See image in issue . (5) Explain thorughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process goes through until the number 69 is found. . (6) Make a diagram explaining how you found the list (not tree, include equation) . see image in issue . (7) Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . (8) Explain why Binary Search is more efficient than Sequential Search . Binary search is quicker than sequential search because binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . (9) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I would be searching for 36. First, I would select the middle element ((1+5)/2 = 3, and since 16 &lt; 36, I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . See issue for image . SUMMARY . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. | Sequential Search (Inefficient search): compare each number to the number you want to find until you get to the number you want to find | Binary Search (Efficient search): repeats the process of finding a median and evaluating | Boolean Expressions: expression that evaluates to either true or false | Truth Tables: displays the logical operations on input signals in a table format, identifies all possible input combinations and the output for each | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2023/05/10/section9and11.html",
            "relUrl": "/csp/2023/05/10/section9and11.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2023/05/10/section17-18.html",
            "relUrl": "/jupyter/2023/05/10/section17-18.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Hacks for simulations",
            "content": "Answer table . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Name(First+Last) | | . 1 | | . 2 | | . 3 | | . 4 | | . 5 | | . 6 | | . 7 | | . 8 | | . 9 | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/05/10/section16.html",
            "relUrl": "/2023/05/10/section16.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Sections 12-13 Hacks",
            "content": "3.12 Homework Part 1 . (1) This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . (2) Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . (3) Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Homework Part 2 . (1) . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . c = 9 . b = 9 * 9 = 81 . a = b c = 81 9 = 729 . (2) . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . temp = 110 . 110/100 = 1.1 . 173 * 1.1 = $190.30 . (3) . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . 103 - 32 = 71 . 71 x (5/9) = 39.44 degrees Celsius . 3.13 Hacks . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) . 2 Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . 3 Which Is the Correct Way to define the Name of a Procedure? . B. PROCEDURE MyList (because procedure should be in all caps and part of the procedure name should be capitalized) . 4 Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } . Summary . Procedure:a named group of programming instructions that may have parameters and return values | Parameters: input values of a procedure. | Arguments: specify the values of the parameters when a procedure is called. | Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | How to code Procedure: While Coding a procedure you must makes sure it has as name and a clear purpose weather to executre a response or complete an action. One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2023/05/10/section12and13.html",
            "relUrl": "/csp/2023/05/10/section12and13.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;skintypes&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() # metadata for database . Import . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) data = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = data app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() #SQLAlchemy object called here # This belongs in place where it runs once per project db.init_app(app) # app object called here . Database . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from random import randrange from datetime import date import os, base64 import json #from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into Python shell and follow along &#39;&#39;&#39; #Create new class to save information in a table class SkinType(db.Model): __tablename__ = &#39;skintypes&#39; # table name is plural, class name is singular # Define the SkinType schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _skin_type = db.Column(db.String(255), unique=False, nullable=False) _moisturizer = db.Column(db.String(255), unique=False, nullable=False) _face_cleanser = db.Column(db.String(255), unique=False, nullable=False) _serum = db.Column(db.String(255), unique=False, nullable=False) _sunscreen = db.Column(db.String(255), unique=False, nullable=False) # Defines a relationship between SkinType record and Notes table, one-to-many (one SkinType to many notes) #kosts = db.relationship(&quot;Kost&quot;, cascade=&#39;all, delete&#39;, backref=&#39;skintypes&#39;, lazy=True) #Constructor of a SkinType object, initializes the instance variables within object (self) def __init__(self, skin_type, moisturizer, face_cleanser, serum, sunscreen): self._skin_type = skin_type # variables with self prefix become part of the object, self._moisturizer = moisturizer self._face_cleanser = face_cleanser self._serum = serum self._sunscreen = sunscreen # a skin type getter method, extracts skin type from object @property def skin_type(self): return self._skin_type # a setter function, allows skin type to be updated after initial object creation @skin_type.setter def skin_type(self, skin_type): self._skin_type = skin_type # check if skin_type parameter matches _skin_type in object, return boolean def is_skin_type(self, skin_type): return self._skin_type == skin_type # a getter method, extracts moisturizer from object @property def moisturizer(self): return self._moisturizer # a setter function, allows moisturizer to be updated after initial object creation @moisturizer.setter def moisturizer(self, moisturizer): self._moisturizer = moisturizer # a getter method, extracts face cleanser from object @property def face_cleanser(self): return self._face_cleanser # a setter function, allows face_cleanser to be updated after initial object creation @face_cleanser.setter def face_cleanser(self, face_cleanser): self._face_cleanser = face_cleanser # a getter method, extracts serum from object @property def serum(self): return self._serum # a setter function, allows serum to be updated after initial object creation @serum.setter def serum(self, serum): self._serum = serum # a getter method, extracts sunscreen from object @property def sunscreen(self): return self._sunscreen # a setter function, allows sunscreen to be updated after initial object creation @sunscreen.setter def sunscreen(self, sunscreen): self._sunscreen = sunscreen # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from SkinType(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to skin_types table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;skin_type&quot;: self._skin_type, &quot;moisturizer&quot;: self._moisturizer, &quot;face_cleanser&quot;: self._face_cleanser, &quot;serum&quot;: self._serum, &quot;sunscreen&quot;: self._sunscreen, #&quot;kosts&quot;: [kost.read() for kost in self.kosts] } # CRUD update: updates skin_type and matching skin products # returns self def update(self, skin_type=&quot;&quot;, moisturizer=&quot;&quot;, face_cleanser=&quot;&quot;, serum=&quot;&quot;, sunscreen=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(skin_type) &gt; 0: self._skin_type = skin_type if len(moisturizer) &gt; 0: self._moisturizer = moisturizer if len(face_cleanser) &gt; 0: self._face_cleanser = face_cleanser if len(serum) &gt; 0: self._serum = serum if len(sunscreen) &gt; 0: self._sunscreen = sunscreen db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initSkinTypes(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.init_app(app) db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; st1 = SkinType(skin_type=&#39;oily&#39;, moisturizer=&#39;SkinCeuticals Daily Moisture&#39;, face_cleanser=&#39;CeraVe Acne Foaming Cream Cleanser&#39;, serum=&#39;The Ordinary Niacinamide 10% + Zinc 1% Serum&#39;, sunscreen=&#39;Regaliz Truderma Sunscreen Gel SPF 50&#39;) st2 = SkinType(skin_type=&#39;dry&#39;, moisturizer=&#39;Neutrogena Hydro Boost Gel Moisturizer&#39;, face_cleanser=&#39;Paula &#39;s Choice Perfectly Balanced Foaming Cleanser&#39;, serum=&#39;Simple Booster Serum - 3% Hyaluronic Acid&#39;, sunscreen=&#39;Laneige Watery Sun Cream&#39;) st3 = SkinType(skin_type=&#39;sensitive&#39;, moisturizer=&#39;Plum Hello Aloe Caring Day Moisturizer&#39;, face_cleanser=&#39;Bioderma Sensibio Gentle Soothing Micellar Cleansing Foaming Gel&#39;, serum=&#39;Simple Booster Serum - 10% Niacinamide&#39;, sunscreen=&#39;Elta MD Skin Care UV Glow SPF 36&#39;) st4 = SkinType(skin_type=&#39;normal&#39;, moisturizer=&#39;Good Vibes Gel Moisturizer&#39;, face_cleanser=&#39;La Roche-Posay Toleriane Hydrating Gentle Cleanser&#39;, serum=&#39;Jovees Herbal Vitamin C Face Serum&#39;, sunscreen=&#39;Cetaphil Daily Oil Free Facial Moisturizer with SPF 35&#39;) skintypes = [st1, st2, st3, st4] &quot;&quot;&quot;Builds sample skin type/note(s) data&quot;&quot;&quot; for skintype in skintypes: try: &#39;&#39;&#39;add a few 1 to 4 notes per skin type&#39;&#39;&#39; for num in range(randrange(1, 4)): note = &quot;#### &quot; + skintype.skin_type + &quot; note &quot; + str(num) + &quot;. n Generated by test data.&quot; #skintype.kosts.append(Kost(id=skintype.id, note=note, image=&#39;ncs_logo.png&#39;)) #&#39;&#39;&#39;add skin type/kost data to table&#39;&#39;&#39; skintype.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {skintype.skin_type}&quot;) initSkinTypes() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM skintypes&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . OperationalError Traceback (most recent call last) /home/emma/emma_blog-3/_notebooks/database.ipynb Cell 8 in &lt;cell line: 24&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; cursor.close() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; read() /home/emma/emma_blog-3/_notebooks/database.ipynb Cell 8 in read() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; cursor = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; # Execute a SELECT statement to retrieve data from a table &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; results = cursor.execute(&#39;SELECT * FROM skintypes&#39;).fetchall() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # Print the results &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; if len(results) == 0: OperationalError: no such table: skintypes .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/05/10/database.html",
            "relUrl": "/2023/05/10/database.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Individual CPT Submission Plan",
            "content": "OUR TEAM SIZE PROJECT . Problem: 60% of Americans feel uncomfortable about their skin and don’t know how to treat it . Solution: CSP (Customized Skin Products) --&gt; A fast &amp; free website that caters to our user’s specific skin type to recommend quality skin care products &amp; services that range from a face cleanser to a professional dermatologist in their area . Purpose: . Help people of all ages to gain a thorough understanding of their own skin and how to treat it | Develop a skincare routine to ensure long-term maintenance of clear and healthy skin | Uplift inner and outer confidence! Looking good and feeling good to feel comfortable engaging with those around us and showing our personality to our full potential | Audience: Pre-tween kids to young adults dealing with pubescent &amp; stress blemeches. Most vulnerable to future self-esteem issues stemming from skin problems . MY INDIVIDUAL CONTRIBUTION: Based on user-input from skin-type quiz, generate top 3 recommendations for a face cleanser product . HOW I PLAN TO FULFILL THE CB RUBRIC . Row 1: Program Purpose &amp; Function . In the video: I will pretend I am a user and fill out the multiple choice skin-type quiz (input). Once I press generate results, it will show the output which is an in-depth evaluation of my skin type and how to treat it. Then, when I press on the &quot;face cleansers&quot; tab, it will show 3 products personally recommended. All of this together will show program functionality . | In the written response (3A): I will clearly explain the overall purpose AND function. . | Function: CSP (Customized Skin Products) --&gt; A fast &amp; free website that caters to user’s specific skin type to produce in-depth evaluation of how to improve and recommend quality skin care product. . Purpose: Help teenagers to gain a thorough understanding of their own skin and how to treat it. Uplifting inner and outer confidence so that they feel comfortable engaging with those around them and showing their personality to their full potential. . Clarify input and output: input (user-inputted skin-type quiz) &amp; output (skin-type evaluation + face cleanser recommendation) . Row 2: Data Abstraction . In the written response (3B): . Code segment shows how data is being stored in a list --&gt; I plan to create an array with all the quiz questions and loop through them | Code segment shows the data in this same list being used as part of fulfilling the program’s purpose --&gt; in recommendation function, will show that I am looping through questions and if user&#39;s answer matches with a product&#39;s assigned answer, add one point to that recommended product. | Identifies name of variable representing list being used --&gt; quizQs | Describes what the data contained in this list is representing in the program --&gt; data contained in list represents questions that user will be asked to determine what their skin-type is and what face cleanser recommendation they should recieve | Row 3: Managing Complexity . In the written response (3B): . Explains how list manages complexity + why vital to program: If program were to run without the &quot;quizQs&quot; list, it would make everything very inefficient because I would have to make new individual variables to store each question. By using &quot;quizQs&quot;, I can consolidate all that information in one place, making it easier to use and keep track of. | Row 4: Procedural Abstraction . In the written response (3C): . Code segment that shows student-developed procedure with at least one parameter that has an effeect on the functionality of the procedure: I will create a recommendation function called &quot;faceCleanserRec&quot; which will take user&#39;s input to each question and +1 to the corresponding variable. Then whichever variable is the max will be printed as the recommended product. | Code segment where student-developed procedure is being called: I will show place where &quot;faceCleanserRec&quot; will be called | Describes identified procedure does and how contribute to overall functionality of the program: This recommendation function contributes to my project&#39;s key feature which is giving custom product recommendation. Without this backend code, when the user submits their quiz they will recieve no result | Row 5: Algorithm Implementation . In the written response (3C): . Code Segment in student-developed procedure that shows: | sequencing: Code runs in order from line at top to line at bottom (starts with list of questions --&gt; recommendation function to output face cleanser) | iteration: iterates through list of questions | selection: if/else statements to check which variable is the max to output what product to recommend | . Explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it --&gt; will walk through entire algorithm line by line | Row 6: Testing . In the written response (3D): . 1st call: question asks &quot;Would you describe your skin as oily, dry, or a combination of both?&quot; &amp; user chooses answer choice &quot;oily&quot; 2nd call: question asks &quot;What is your age?&quot; &amp; user chooses age group 14 - 17 years old . 1st condition: if user chooses oily, 1 point is added to variable called &quot;CetaPhil&quot; which is a face cleansing brand that is good for oily skin 2nd call: if user chooses answer option 14-17 years old, 1 point is added to variable called &quot;humanAcne&quot; which is a face washer good for teenage acne . 1st result: One of top 3 face cleanser recommendations will be one from CetaPhil 2nd call: one of top 3 face cleanser recommendations will be for teenage acne .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2023/05/10/cptindividual.html",
            "relUrl": "/jupyter/2023/05/10/cptindividual.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Bash Tool Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/emma/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/emma/.local/share/jupyter/kernels/bash javascript /home/emma/.local/share/jupyter/kernels/javascript python3 /home/emma/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/emma/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week1/2023/05/10/bash-notebook.html",
            "relUrl": "/jupyter/week1/2023/05/10/bash-notebook.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;10&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d2f7c75442mshde016465b174ed9p10a7b5jsn1acedf7fc107&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Cars&quot;) cars = response.json() for x in cars: for key, value in x.items(): if (key == &quot;id&quot;): print(&quot;id:&quot;, value) if (key == &quot;year&quot;): print(&quot; year:&quot;, value) if (key == &quot;make&quot;): print(&quot; make:&quot;, value) if (key == &quot;model&quot;): print(&quot; model:&quot;, value) if (key == &quot;type&quot;): print(&quot; type:&quot;, value) . Cars id: 9582 year: 2008 make: Buick model: Enclave type: SUV id: 9583 year: 2006 make: MINI model: Convertible type: Convertible id: 9584 year: 2019 make: Volvo model: XC90 type: SUV id: 9585 year: 1999 make: Ford model: Taurus type: Sedan, Wagon id: 9586 year: 2020 make: Volvo model: XC60 type: SUV id: 9587 year: 2006 make: HUMMER model: H2 type: SUV, Pickup id: 9588 year: 2016 make: GMC model: Sierra 1500 Crew Cab type: Pickup id: 9589 year: 2008 make: GMC model: Canyon Crew Cab type: Pickup id: 9590 year: 2016 make: Subaru model: Outback type: SUV id: 9591 year: 2010 make: Mitsubishi model: Outlander type: SUV .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "def main(): # User input as list of strings user_symptoms_string = [(x) for x in input(&quot; nFeeling under the weather? Enter your symptoms here: &quot;).split(&#39;, &#39;)] # Diseases database diagnosis_database = { &quot;acute bronchitis&quot;: [&#39;Cough&#39;, &#39;Mucus&#39;], &quot;allergy&quot;: [&#39;Runny nose&#39;, &#39;Sneezing&#39;, &#39;Itchy Eyes&#39;, &#39;Watery Eyes&#39;], &quot;amebiasis&quot;: [&#39;Fever&#39;, &#39;Nausea&#39;, &#39;Diarrhea&#39;], &quot;anxiety&quot;: [&#39;Increased heart rate&#39;, &#39;Hyperventilation&#39;, &#39;Sweating&#39;, &#39;Trembling&#39;], &quot;brain cancer&quot;: [&#39;Headache&#39;, &#39;Blurred vision&#39;], &quot;chlamydia&quot;: [&#39;Bleeding&#39;, &#39;Discharge&#39;], &quot;Colorado Tick Fever(CTF)&quot;: [&#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Vomiting&#39;, &#39;Rash&#39;], &quot;COVID-19&quot;: [&#39;Fever&#39;, &#39;Sore throat&#39;, &#39;Runny nose&#39;], &quot;depression&quot;: [&#39;Fatigue&#39;, &#39;Imsomnia&#39;, &#39;Agitation&#39;], &quot;diarrhea&quot;: [&#39;Fever&#39;, &#39;Cramps&#39;, &#39;Bloating&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;ear infection&quot;: [&#39;Fever&#39;, &#39;Ear Pain&#39;], &quot;endometriosis&quot;: [&#39;Stomache ache&#39;, &#39;Bleeding&#39;], &quot;fibromyalgia&quot;: [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;], &quot;flu&quot;: [&#39;Fever&#39;, &#39;Cough&#39;, &#39;Runny nose&#39;], &quot;lupus&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;], &quot;lyme disease&quot;: [&#39;Fever&#39;, &#39;Fatigue&#39;, &#39;Headache&#39;], &quot;mononucleosis&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Headache&#39;], &quot;pink eye&quot;: [&#39;Runny nose&#39;, &#39;Blurred vision&#39;], &quot;pneumonia&quot;: [&#39;Cough&#39;, &#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;schizophrenia&quot;: [&#39;Anxiety&#39;, &#39;Paranoia&#39;, &#39;Hallucination&#39;], } # Dictionary that includes treatment advice treatment_database = { &quot;acute bronchitis&quot;: &quot;get plenty of rest! Drink fluids but avoid caffeine and alcohol. Bring a humidifier into your house. If the symptoms are too painful pain relievers and fever reducers, such as acetaminophen (Tylenol).&quot;, &quot;allergy&quot;: &quot;go to the doctor, try saline nasal irrigation, use an air filter indoors&quot;, &quot;amebiasis&quot;: &quot;take a definitive diagnosis of ambiasis by stool examination to identify the parasite. The standard treatment for ambiasis includes a course of antibiotics such as metronidazole or tinidazole, which are used to kill the parasite. It is important to consult a healthcare professional for diagnosis and treatment as the infection can lead to serious complications if left untreated. n nAmebiasis can also cause dehydration and malnutrition due to diarrhea and vomiting. It is important to maintain hydration and provide adequate nutrition to help the body fight the infection! n nOf course, don&#39;t forget to get lots of rest! Stay safe and we wish you good health! n&quot;, &quot;anxiety&quot;: &quot;try arranging a meeting with a therapist, visit the doctor for Anti-anxiety medications, listen to calming music, take leisurely walks outside&quot;, &quot;brain cancer&quot;: &quot;visit the doctor right away&quot;, &quot;chlamydia&quot;: &quot;visit the doctor to see what medication you need&quot;, &quot;Colorado Tick Fever(CTF)&quot;: &quot;take over-the-counter pain relievers like acetaminophen and ibuprofen to help reduce fever, headache, and muscle pain. n nAvoid taking aspirin or aspirin-contained products as they can increase the risk of bleeding in viral infections like CTF n nRemember to stay hydrated to avoid fever dehydration and get enough rest! n nIn the end of the day, there is no specific treatment for CTF, your best bet is to learn how to prevent future encounters. Avoid walking in high-risk areas, wear protective clothing, and use insect repellents containing DEET n nStay safe and we wish you good health! n&quot;, &quot;COVID-19&quot;: &quot;go to bed early, drink lots of warm water, Take advil in moderation if you have muscle pain&quot;, &quot;depression&quot;: &quot;visit a doctor for medication, Try arranging a meeting with a therapist, listen to music, take walks outside&quot;, &quot;diarrhea&quot;: &quot;drink plenty of liquids, including water, broths and juices. Avoid caffeine and alcohol. Add semisolid and low-fiber foods gradually as your bowel movements return to normal. Try soda crackers, toast, eggs, rice or chicken.&quot;, &quot;ear infection&quot;: &quot;take antibiotics so that the infection doesn&#39;t spread to other parts of the body&quot;, &quot;endometriosis&quot;: &quot;effective treatments such as hormones and excision surgery can help, staying hydrated and putting a heating pad in the uterus area&quot;, &quot;fibromyalgia&quot;: &quot;try out some of these improving quality of life treatments! n n1. Medications can help manage the pain such as pain relievers, antidepressants, and anticonvulsants. n n2. Get involved with physical therapy to improve muscle strength, flexibility, range of motion, and reduce pain and stiffness n n3. Exercise! Yoga, walking, swimming, and cycling are all great options! n n4. Be mindful of your sleep schedule. Good sleep hygiene practices like avoiding caffeine and electronics before bed would be helpful n nIt is important to work with a healthcare providers to dvelop an individualized health plan for fibromyalgia. n&quot;, &quot;flu&quot;: &quot;get plenty of rest, drink lots of water, and if you feel pain, take pain relievers&quot;, &quot;lupus&quot;: &quot;take care of your skin by wearing plenty of sun block and keeping skin safe by wearing sun protective clothes&quot;, &quot;lyme disease&quot;: &quot;take oral and Intravenous antibiotics&quot;, &quot;mononucleosis&quot;: &quot;get plenty of rest and take antiflammatory drugs&quot;, &quot;pink eye&quot;:&quot;use artificial tears, clean your eyelids with a wet cloth, and apply cold or warm compresses several times daily. &quot;, &quot;pneumonia&quot;: &quot;mild pneumonia can usually be treated at home with rest, antibiotics (if it&#39;s likely be caused by a bacterial infection) and by drinking plenty of fluids. More severe cases may need hospital treatment.&quot;, &quot;schizophrenia&quot;: &quot;treatment with medications and psychosocial therapy can help manage the condition. In some cases, hospitalization may be needed. A psychiatrist experienced in treating schizophrenia usually guides treatment.&quot;, } # Pass user symptoms as a parameter def get_diagnosis(user_symptoms_string): # Initialize match score array match_result_array = [0] * len(diagnosis_database) # Initialize variables match_disease_index = 0 max_match_result = 0 max_match_result_disease = &quot;&quot; max_match_result_treatment = &quot;&quot; max_match_result_report = &quot;&quot; # Nested for loop to match user&#39;s symptoms to symptoms in database that correspond to a certain sickness for key, values in diagnosis_database.items(): for symptom in user_symptoms_string: for value in values: # If they do match, +1 to array keeping track of how many matches for each sickness if value == symptom: match_result_array[match_disease_index] = match_result_array[match_disease_index] + 1 break # Finding sickness with max number of matches with user symptoms if match_result_array[match_disease_index] &gt; max_match_result: max_match_result = match_result_array[match_disease_index] max_match_result_disease = key match_disease_index = match_disease_index + 1 # Match sickness with treatment advice for key, value in treatment_database.items(): if key == max_match_result_disease: max_match_result_treatment = value break # Combine printed information into one variable max_match_result_report = &quot; nBased on your current symptoms, your mostly likely sickness is &quot; + max_match_result_disease + &quot;. n nWe advise you to &quot; + max_match_result_treatment return max_match_result_report report = get_diagnosis(user_symptoms_string) # Print diagnosis and treatment advice print(report) # Ask user if want to run program again restart = input(&quot;Run again? (y/n) &quot;) if restart == &quot;y&quot;: main() elif restart == &quot;n&quot;: print(&quot; nGoodbye and stay safe!&quot;) else: print(&quot; nPlease type either y for yes or n for no&quot;) main() . Based on your current symptoms, your mostly likely sickness is amebiasis. We advise you to take a definitive diagnosis of ambiasis by stool examination to identify the parasite. The standard treatment for ambiasis includes a course of antibiotics such as metronidazole or tinidazole, which are used to kill the parasite. It is important to consult a healthcare professional for diagnosis and treatment as the infection can lead to serious complications if left untreated. Amebiasis can also cause dehydration and malnutrition due to diarrhea and vomiting. It is important to maintain hydration and provide adequate nutrition to help the body fight the infection! Of course, don&#39;t forget to get lots of rest! Stay safe and we wish you good health! .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/05/10/CPT.html",
            "relUrl": "/2023/05/10/CPT.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Error Testing",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the menu to the user print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? --&gt; type of variable #prompt the user multiple times, total price question = &quot;yes&quot; while question == &quot;yes&quot;: question = input(&quot;If would like to order an item type &#39;yes&#39;, if not type &#39;no&quot;).lower() if question == &quot;no&quot;: break else: item = input(&quot;Please select an item from the menu&quot;).lower() if item == &quot;burger&quot;: total +=3.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;fries&quot;: total +=1.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;drink&quot;: total +=0.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) else: print(f&quot;You inputted {item}, this is not an item on our menu. Please select again!&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 You ordered a burger, your total is now $ 3.99 You ordered a drink, your total is now $ 4.98 You ordered a fries, your total is now $ 6.97 You inputted apple, this is not an item on our menu. Please select again .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week7/2023/05/10/.burger.html",
            "relUrl": "/jupyter/week7/2023/05/10/.burger.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/05/10/.14-3.15.html",
            "relUrl": "/2023/05/10/.14-3.15.html",
            "date": " • May 10, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio Processor AMD Ryzen 5 5625U with Radeon Graphics, 2301 Mhz, 6 Core(s), 12 Logical Processor(s) . Processor GHz: 3.3 GHz(Clock speed of a computer’s CPU) | Memory in GB: 16 GB | Storage in GB: 246 GB | OS: Microsoft Windows 11 Home | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: Hardware components that allow users to interact with a computer by providing it with data or instructions. Ex. Mouse, Touchscreen, Microphone, Webcam | Output devices: Hardware components that display data processed by a computer to the user. Ex. Monitor, Printer, Projector | File: Collection of data/info that is stored in a specific location in a computer. Can contain text, images, audio, video, etc. | Program Code: Written set of instructions that tells your computer how to perform a specific task. It is written in a programming language and compiled into a program file. | Processes: Individual programs or tasks that are running on your computer’s operating system. | Ports: Communication endpoints that allow data to be exchanged between devices or applications in a computer network. | Data File: File that contains data or information that can be used by a program. Examples include text files, images, and spreadsheets. | Inspect Running : The process of examining the code that is currently executing on your computer to troubleshoot or debug issues. | Inspect Variables: Process of examining the variables, or named storage locations, in a program’s code to understand how they are being used and how they are affecting the program’s behavior. | . . The Internet . 4.1.1 Notes . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. A Path: Sequence of directly connected computing devices that begins at sender and ends at receiver | E Route: Process of finding a path from sender to receiver | B Computer System: A group of computing devices working together for a joint purpose | C Computer Device: Physical artifact that can run a program. Ex. Computers, tablets, servers, routers, etc. | D Bandwidth: Max amount of data that can be sent in a fixed amount of time on a computer network | F Computer Network: Type of computing system. A group of interconnected computers that can send and recieve data to each other | Extra to know: Computers talk through packet Switching: The message (file) is broken up into packets and send in any order. The packets are reassembled by the recipient’s device. A packet is a small amount of data sent through network, contains source and destination info | . | . 4.1.2 Notes . Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | . Extra Notes . . Network Access: Hardware (ex. Internet cable, wifi cable) | Internet: Packers, Sender and receiver IP, metadata for routing information | Transport: TCP (error checking and error recovery very slow, 3-way handshake to verify delivery) &amp; UDP (error checking, discards erroneous packets) | Application: web services, domain name service, http/https(http w/ security) | World-Wide Web: linked data pages, NOT Internet . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas . | Complete True of False Questions T | F | F | T | F | F | T | | Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . NOT fault tolerant: Doesn’t use many resources, Failure in one network = fatal | Fault tolerant: Redundant and uses more resources. But even if one path goes down, a device can communicate with all other devices. Makes network stronger! | . Complete the network activity, summarize your understanding of fault tolerance. Fault tolerance is a network’s ability to withstand disconnections. Networks use many interconnected nodes to guarantee that no one or two interrupted connections can take down a system. You can tell if a network is fault tolerant by checking that even if one path goes down, every device can communicate with all other devices. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . Notes . Computer tasks: balance tasks so all CPUs used evenly and fully System tasks: scheduling what to do next, managing hardware, working with network | User tasks: executing programs that the user has selected | . | Sequential Computing: Tasks are done one after another | Parallel Computing: program broke into multiple smaller sequential computing programs, some at the same time! Normally on same computer | Hardware driven, faster operations, data driven, | . | Compare efficiency by execution time | Speed up time: time to complete task sequentially / time to complete task in parallel | Distributed Computing: sending of tasks from one computer to another, mix of sequential and parallel Solve problems that can’t be done with one computer bc of processing time/storage Ex. google web search | Needs a network | . | What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/04/30/Unit4Hacks.html",
            "relUrl": "/2023/04/30/Unit4Hacks.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Title",
            "content": "def main(): # User input as list of strings user_symptoms_string = [(x) for x in input(&quot; nFeeling under the weather? Enter your symptoms here: &quot;).split(&#39;, &#39;)] # Diseases database diagnosis_database = { &quot;acute bronchitis&quot;: [&#39;Cough&#39;, &#39;Mucus&#39;], &quot;allergy&quot;: [&#39;Runny nose&#39;, &#39;Sneezing&#39;, &#39;Itchy Eyes&#39;, &#39;Watery Eyes&#39;], &quot;amebiasis&quot;: [&#39;Fever&#39;, &#39;Nausea&#39;, &#39;Diarrhea&#39;], &quot;anxiety&quot;: [&#39;Increased heart rate&#39;, &#39;Hyperventilation&#39;, &#39;Sweating&#39;, &#39;Trembling&#39;], &quot;brain cancer&quot;: [&#39;Headache&#39;, &#39;Blurred vision&#39;], &quot;chlamydia&quot;: [&#39;Bleeding&#39;, &#39;Discharge&#39;], &quot;Colorado Tick Fever(CTF)&quot;: [&#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Vomiting&#39;, &#39;Rash&#39;], &quot;COVID-19&quot;: [&#39;Fever&#39;, &#39;Sore throat&#39;, &#39;Runny nose&#39;], &quot;depression&quot;: [&#39;Fatigue&#39;, &#39;Imsomnia&#39;, &#39;Agitation&#39;], &quot;diarrhea&quot;: [&#39;Fever&#39;, &#39;Cramps&#39;, &#39;Bloating&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;ear infection&quot;: [&#39;Fever&#39;, &#39;Ear Pain&#39;], &quot;endometriosis&quot;: [&#39;Stomache ache&#39;, &#39;Bleeding&#39;], &quot;fibromyalgia&quot;: [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;], &quot;flu&quot;: [&#39;Fever&#39;, &#39;Cough&#39;, &#39;Runny nose&#39;], &quot;lupus&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;], &quot;lyme disease&quot;: [&#39;Fever&#39;, &#39;Fatigue&#39;, &#39;Headache&#39;], &quot;mononucleosis&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Headache&#39;], &quot;pink eye&quot;: [&#39;Runny nose&#39;, &#39;Blurred vision&#39;], &quot;pneumonia&quot;: [&#39;Cough&#39;, &#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;schizophrenia&quot;: [&#39;Anxiety&#39;, &#39;Paranoia&#39;, &#39;Hallucination&#39;], } # Dictionary that includes treatment advice treatment_database = { &quot;acute bronchitis&quot;: &quot;get plenty of rest! Drink fluids but avoid caffeine and alcohol. Bring a humidifier into your house. If the symptoms are too painful pain relievers and fever reducers, such as acetaminophen (Tylenol).&quot;, &quot;allergy&quot;: &quot;go to the doctor, try saline nasal irrigation, use an air filter indoors&quot;, &quot;amebiasis&quot;: &quot;take a definitive diagnosis of ambiasis by stool examination to identify the parasite. The standard treatment for ambiasis includes a course of antibiotics such as metronidazole or tinidazole, which are used to kill the parasite. It is important to consult a healthcare professional for diagnosis and treatment as the infection can lead to serious complications if left untreated. n nAmebiasis can also cause dehydration and malnutrition due to diarrhea and vomiting. It is important to maintain hydration and provide adequate nutrition to help the body fight the infection! n nOf course, don&#39;t forget to get lots of rest! Stay safe and we wish you good health! n&quot;, &quot;anxiety&quot;: &quot;try arranging a meeting with a therapist, visit the doctor for Anti-anxiety medications, listen to calming music, take leisurely walks outside&quot;, &quot;brain cancer&quot;: &quot;visit the doctor right away&quot;, &quot;chlamydia&quot;: &quot;visit the doctor to see what medication you need&quot;, &quot;Colorado Tick Fever(CTF)&quot;: &quot;take over-the-counter pain relievers like acetaminophen and ibuprofen to help reduce fever, headache, and muscle pain. n nAvoid taking aspirin or aspirin-contained products as they can increase the risk of bleeding in viral infections like CTF n nRemember to stay hydrated to avoid fever dehydration and get enough rest! n nIn the end of the day, there is no specific treatment for CTF, your best bet is to learn how to prevent future encounters. Avoid walking in high-risk areas, wear protective clothing, and use insect repellents containing DEET n nStay safe and we wish you good health! n&quot;, &quot;COVID-19&quot;: &quot;go to bed early, drink lots of warm water, Take advil in moderation if you have muscle pain&quot;, &quot;depression&quot;: &quot;visit a doctor for medication, Try arranging a meeting with a therapist, listen to music, take walks outside&quot;, &quot;diarrhea&quot;: &quot;drink plenty of liquids, including water, broths and juices. Avoid caffeine and alcohol. Add semisolid and low-fiber foods gradually as your bowel movements return to normal. Try soda crackers, toast, eggs, rice or chicken.&quot;, &quot;ear infection&quot;: &quot;take antibiotics so that the infection doesn&#39;t spread to other parts of the body&quot;, &quot;endometriosis&quot;: &quot;effective treatments such as hormones and excision surgery can help, staying hydrated and putting a heating pad in the uterus area&quot;, &quot;fibromyalgia&quot;: &quot;try out some of these improving quality of life treatments! n n1. Medications can help manage the pain such as pain relievers, antidepressants, and anticonvulsants. n n2. Get involved with physical therapy to improve muscle strength, flexibility, range of motion, and reduce pain and stiffness n n3. Exercise! Yoga, walking, swimming, and cycling are all great options! n n4. Be mindful of your sleep schedule. Good sleep hygiene practices like avoiding caffeine and electronics before bed would be helpful n nIt is important to work with a healthcare providers to dvelop an individualized health plan for fibromyalgia. n&quot;, &quot;flu&quot;: &quot;get plenty of rest, drink lots of water, and if you feel pain, take pain relievers&quot;, &quot;lupus&quot;: &quot;take care of your skin by wearing plenty of sun block and keeping skin safe by wearing sun protective clothes&quot;, &quot;lyme disease&quot;: &quot;take oral and Intravenous antibiotics&quot;, &quot;mononucleosis&quot;: &quot;get plenty of rest and take antiflammatory drugs&quot;, &quot;pink eye&quot;:&quot;use artificial tears, clean your eyelids with a wet cloth, and apply cold or warm compresses several times daily. &quot;, &quot;pneumonia&quot;: &quot;mild pneumonia can usually be treated at home with rest, antibiotics (if it&#39;s likely be caused by a bacterial infection) and by drinking plenty of fluids. More severe cases may need hospital treatment.&quot;, &quot;schizophrenia&quot;: &quot;treatment with medications and psychosocial therapy can help manage the condition. In some cases, hospitalization may be needed. A psychiatrist experienced in treating schizophrenia usually guides treatment.&quot;, } # Pass user symptoms as a parameter def get_diagnosis(user_symptoms_string): # Initialize match score array match_result_array = [0] * len(diagnosis_database) # Initialize variables match_disease_index = 0 max_match_result = 0 max_match_result_disease = &quot;&quot; max_match_result_treatment = &quot;&quot; max_match_result_report = &quot;&quot; # Nested for loop to match user&#39;s symptoms to symptoms in database that correspond to a certain sickness for key, values in diagnosis_database.items(): for symptom in user_symptoms_string: for value in values: # If they do match, +1 to array keeping track of how many matches for each sickness if value == symptom: match_result_array[match_disease_index] = match_result_array[match_disease_index] + 1 break # Finding sickness with max number of matches with user symptoms if match_result_array[match_disease_index] &gt; max_match_result: max_match_result = match_result_array[match_disease_index] max_match_result_disease = key match_disease_index = match_disease_index + 1 # Match sickness with treatment advice for key, value in treatment_database.items(): if key == max_match_result_disease: max_match_result_treatment = value break # Combine printed information into one variable max_match_result_report = &quot; nBased on your current symptoms, your mostly likely sickness is &quot; + max_match_result_disease + &quot;. n nWe advise you to &quot; + max_match_result_treatment return max_match_result_report report = get_diagnosis(user_symptoms_string) # Print diagnosis and treatment advice print(report) # Ask user if want to run program again restart = input(&quot;Run again? (y/n) &quot;) if restart == &quot;y&quot;: main() elif restart == &quot;n&quot;: print(&quot; nGoodbye and stay safe!&quot;) else: print(&quot; nPlease type either y for yes or n for no&quot;) main() . Based on your current symptoms, your mostly likely sickness is amebiasis. We advise you to take a definitive diagnosis of ambiasis by stool examination to identify the parasite. The standard treatment for ambiasis includes a course of antibiotics such as metronidazole or tinidazole, which are used to kill the parasite. It is important to consult a healthcare professional for diagnosis and treatment as the infection can lead to serious complications if left untreated. Amebiasis can also cause dehydration and malnutrition due to diarrhea and vomiting. It is important to maintain hydration and provide adequate nutrition to help the body fight the infection! Of course, don&#39;t forget to get lots of rest! Stay safe and we wish you good health! .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/04/29/CPT.html",
            "relUrl": "/2023/04/29/CPT.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Binary Lesson Runtimeterror",
            "content": "{ “cells”: [ { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# P4-M 4/28 Binary Lesson HACKS n”, “&gt; Learn the basics of binary including truth tables, boolean expressions, binary conversions, and binary searches. n”, “- toc: true n”, “- permalink: /binary/lesson n”, “- comments: true n”, “- categories: [week 31, binary, lesson]” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Lesson Note Taker n”, “&gt; Fill in the blanks below during the binary presentation. You can visit our website here! n”, “^ Due to last minute deployment issues, may need to run a local server n”, “ n”, “1. git clone https://github.com/TheoH32/Runtime_Terror.git n”, “2. run: n”, “- bundle install n”, “- bundle exec jekyll serve” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Binary n”, “1. Binary is a base 2 number system n”, “2. 0 represents off and 1 represents on n”, “3. A bit is the minimum unit of binary information stored in a computer system n”, “ n”, “## Boolean Expressions n”, “ n”, “A boolean statement is a logical statement that is either TRUE or FALSE and compares data. n”, “ n”, “## Truth Tables n”, “ n”, “The logical operations shown in truth tables are AND, OR, NOT, NOR” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “True” ] }, “execution_count”: 1, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Run this code!! See how boolean expressions work and show the outputs of truth tables. n”, “ n”, “# AND n”, “5 &gt; 3 and 5 == 3 + 2” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “False” ] }, “execution_count”: 2, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “ n”, “5 &lt; 3 and 5 == 5” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “True” ] }, “execution_count”: 3, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# OR n”, “5 == 5 or 5 != 5” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “False” ] }, “execution_count”: 4, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “5 &lt; 3 or 5 != 5” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Real Life Example using Boolean Expressions n”, “ n”, “Try changing the conditions and/or the logical operation below! Run the code to see if you are eligible to vote.” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “You are eligible to vote. n” ] } ], “source”: [ “# Real life example n”, “age = 18 n”, “citizen = True n”, “ n”, “if age &gt;= 18 and citizen: n”, “ print(&quot;You are eligible to vote.&quot;) n”, “else: n”, “ print(&quot;You are not eligible to vote.&quot;)” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Binary Conversions n”, “ n”, “### Binary to Decimal n”, “ n”, “1. We can count in binary by using powers of 2. n”, “2. In binary, we read from right to left. n”, “3. 0111 has a value of 7. n”, “ n”, “ n”, “### Binary Search n”, “ n”, “1. For a binary search, the list must be sorted. n”, “2. In a binary search, computers start at the middle (front,middle,end). n”, “3. The number of steps required in a binary search follows the equation: log2(n). n”, “4. Binary searches also work with a list of strings. We can sort them alphabetically. n”, “5. Binary searches can be represented in flow diagrams.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Hacks n”, “&gt; You will NOT be awarded any points for sections that are INCOMPLETE n”, “ n”, “### Note Taker ✅ n”, “ n”, “1. Fill in all of the blanks above.” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Binary Conversions Practice ✅ n”, “ n”, “1. Convert the decimal number &quot;17&quot; into binary –&gt; 10001 n”, “2. Convert the binary number 1010 into decimal –&gt; 10 n”, “3. Convert the decimal number &quot;122&quot; into hexadecimal –&gt; A7 n”, “4. Convert the hexadecimal number &quot;09&quot; into binary –&gt; 1001” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Binary Search Questions ✅ n”, “ n”, “1. Make a binary search tree of different the list [1,2,4,15,25,30,31] n”, “ n”, “&lt;pre&gt; 15 n&quot;, &quot; / n&quot;, &quot; 2 30 n&quot;, &quot; / n&quot;, &quot;1 31 n&quot;, &quot; / n&quot;, &quot; 25 n&quot;, &quot;&lt;/pre&gt; n”, “ n”, “2. Put this list of strings in a order that can be used for binary search [&quot;Donut”,&quot;Cake”,&quot;Soda”,&quot;Banana”,&quot;Fruit”] n”, “[&quot;Banana&quot;, &quot;Cake&quot;, &quot;Donut&quot;, &quot;Fruit&quot;, &quot;Soda&quot;] n”, “3. Explain why Binary Search is more efficient than Sequential Search n”, “ n”, “Sequential Search takes a long time because no matter the list given it searches through each element one by one. However, a binary search is much more efficient because it keeps splitting the data in half and thus eliminating half depending on whether number is higher or lower until it finds the number n” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Extra Credit: ✅ n”, “ n”, “- Translate the binary number, 1001010, into octal (base 8). SHOW YOUR WORK AND EXPLAIN YOUR THINKING. n”, “ n”, “3 sections: n”, “ n”, “1 001 010 n”, “ n”, “001 –&gt; 1 n”, “ n”, “001 –&gt; 1 n”, “ n”, “010 –&gt; 2 n”, “ n”, “1001010 –&gt; 112 (octal) n”, “ n”, “ n”, “OR n”, “- write the best rap line (determined during the lesson by group) n” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Hacks Scoring n”, “ n”, “| Hack | Comments | Grade | n”, “|—|—|—| n”, “| Note Taker | fill in the blanks above | 0.1 | n”, “| Lesson Quiz | under 100% = 0.1 only | 0.2 | n”, “| Binary Game | must score at least 10 points | 0.2 | n”, “| Binary Conversions Practice | if incorrect= 0.2 awarded | 0.2 | n”, “| Binary Search Questions | if incorrect= 0.2 awarded | 0.2 | n”, “| Extra Credit | MUST SHOW WORK | 0.1 | n”, “| Total | expected= 0.9/1 | 1/1 |” ] } ], “metadata”: { “kernelspec”: { “display_name”: “base”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.9.12” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/04/28/Binary-Lesson-Runtimeterror.ipynb",
            "relUrl": "/2023/04/28/Binary-Lesson-Runtimeterror.ipynb",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Data Structures Guide",
            "content": "Objectives: . Students will be able to... . Understand the concept of data structures, including lists, dictionaries, and 2D arrays | Learn how to iterate through data structures using loops | Able to visualize data structures and iteration processes | Able to apply their knowledge to build simulations/interactions using lists and iteration | Learn how to store list and dictionary content in databases | . Lesson 1: Lists and Iteration . Lists (Ethan) . Lists are a type of data structure that can store multiple items in a single variable | Lists are defined using square brackets [ ] | Each item in a list is separated by a comma | Lists are indexed, starting at 0 | . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;grape&quot;] print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;] . Accessing Lists . To access individual items in a list, we use the index of the item. | Python uses zero-based indexing, which means the first item in the list has an index of 0, the second item has an index of 1, and so on. | . print(fruits[0]) print(fruits[2]) . apple orange . Slicing Lists . We can also extract a specific portion of a list using slicing. | We use the colon : operator to specify a range of indices to include. | . print(fruits[0:2]) . [&#39;apple&#39;, &#39;banana&#39;] . Modifying List Items . Lists are mutable, meaning that we can change the value of an item in a list. | To change the value of an item in a list, we can use the indexing operator (square brackets) to access the item and then assign a new value to it. | . fruits[2] = &quot;pear&quot; print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;] . Adding and Removing List Items . Adding . Use the append() method to add an item to the end of a list. | . fruits.append(&quot;kiwi&quot;) # Adds &#39;kiwi&#39; to the end of the list print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the insert() method to add an item to a specific index in a list. | . fruits.insert(1, &quot;peach&quot;) # Inserts &quot;peach&quot; at index 1 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Removing . Use the remove() method to remove the first occurrence of an item from a list. | . fruits.remove(&#39;pear&#39;) # Removes the first occurrence of &#39;pear&#39; print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the pop() method to remove the item at a specific index from a list. | . fruits.pop(2) # Removes the item at index 2 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the clear() method to remove all items from a list. | . fruits.clear() # Removes all items from the list print(fruits) . [] . Function Explanation . InsertToList . This function is designed to insert a new item into a list at a specific index. | It first retrieves the new item to be added and the index at which to add it from the HTML document. | It checks if the retrieved values are both valid integers and if the index is within the range of the list. | If the values are valid, the function uses the splice() method to insert the new item into the list at the specified index. | In JavaScript, the splice() method modifies an array by removing, replacing, or adding elements. | The splice() method takes three arguments:the index at which to start changing the list, the number of elements to remove, and the new item to add. - The item is inserted without removing any elements, so we pass 0 as the second argument. | Finally, the function calls the visualizeList() function to display the updated list on the web page. | . // Get the value of the new item and the index where it should be inserted function insertToList() { let newItem = parseInt(document.getElementById(&quot;newItem&quot;).value); let index = parseInt(document.getElementById(&quot;index&quot;).value); if (!isNaN(newItem) &amp;&amp; !isNaN(index) &amp;&amp; index &gt;= 0 &amp;&amp; index &lt;= myList.length) { // splice() method to insert the new item into the list myList.splice(index - 1, 0, newItem); // Call the visualizeList() function to update the display of the list visualizeList(); } } . SortList . In JavaScript, sort() is a built-in method used to sort the elements of an array in place. The default sort order is ascending, but you can also specify a descending sort order. | In this case, the function sorts myList in ascending order based on their numerical value. | . // Sort myList array in ascending order function sortList() { // The function a - b is used, which subtracts the second element b from the first element a. // If the result is negative, a is sorted before b. If the result is positive, b is sorted before a. If the result is zero, the order of the elements is unchanged. myList.sort((a, b) =&gt; a - b); visualizeList(); } . Applications of Lists . Data processing: Lists are commonly used to store and process large amounts of data. In data analysis and machine learning, lists are often used to store datasets. . | Gaming: Lists are used extensively in game development to store game objects, player statistics, and game maps. . | Finance: Lists are used in finance to store and process financial data, such as stock prices and market trends. The data from these lists can also be used to calculate financial metrics and to create financial models. . | . Iteration (Alex) . What is iteration? . In programming, iteration refers to the process of repeating a set of instructions until a specific condition is met. This can be achieved using loop structures like for loops and while loops. | . For Loops . A for loop is used to iterate over a sequence (e.g. a list, tuple, string, etc.) and execute a set of statements for each item in the sequence. Here&#39;s the basic syntax of a for loop in Python: | . sequence = [1,2,3,4,5,6,7] for variable in sequence: print(variable) . 1 2 3 4 5 6 7 . my_string = &quot;Hello, World!&quot; for character in my_string: print(character) . H e l l o , W o r l d ! . While Loops A while loop is used to repeat a set of statements as long as a condition is true. Here&#39;s the basic syntax of a while loop in Python: . num = 0 while num &lt; 5: print(num) num += 1 . 0 1 2 3 4 . Applications of Iteration . Iteration is a fundamental concept in computer programming and is used in a variety of real-life applications. Here are some examples:Data Processing . Data processing often involves iterating over large datasets to perform specific operations on each element. For example, in a data analysis task, you might iterate over a list of numbers to compute the average, or iterate over a list of strings to find the longest string. | . User Interfaces . User interfaces often involve iteration to display and handle data from various sources. For example, in a web application, you might iterate over a list of users to display their information in a table. Similarly, in a desktop application, you might iterate over a list of files to display them in a file explorer. | . Machine Learning . Machine learning algorithms often involve iterative processes to train models and improve their accuracy. For example, in a gradient descent algorithm, you might iterate over a set of training data to update the model&#39;s parameters and minimize the loss function. | . Popcorn hack (0.3) . Make a list related to your CPT project ✅ | Make a for loop that will print each term in the list ✅ | Make a while loop that will print each term in the list ✅ | Explain mechanics behind the loop works ✅ | . Explanation for code below: . I first created a list called fibromyalgia_symps that stores the sicknesses fibromyalgia&#39;s symptoms | The for loop iterates through each item in that list and prints it until all the symptoms have been looped through | . fibromyalgia_symps = [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;] #For loop for symptom in fibromyalgia_symps: print(symptom) . Fatigue Depression Anxiety Insomnia Headache . Explanation for code below: . Using the same list from above | Initialize index to 0 | While loop keeps iterating through each term in the list while the index is less than the total length of the list | Then it prints the term at that index, which is the symptom, and adds 1 to the index to iterate to the next item in the list | . fibromyalgia_symps = [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;] #While loop i = 0 while i &lt; len(fibromyalgia_symps): print(fibromyalgia_symps[i]) i = i + 1 . Fatigue Depression Anxiety Insomnia Headache . Simulation mechanics . In Python, pop() is a method that is used to remove and return an element from a list. The syntax for using pop() is as follows: | . my_list = [1, 2, 3, 4, 5] print(my_list) my_list.pop() print(my_list) my_list.pop(1) print(my_list) . [1, 2, 3, 4, 5] [1, 2, 3, 4] [1, 3, 4] . In Python, append() is a built-in method that is used to add an element to the end of a list. The syntax for using append() is as follows: . my_list = [] my_list.append(1) my_list.append(2) my_list.append(3) print(my_list) . [1, 2, 3] . Dictionary Lesson / 2D Arrays . Lesson 2: Dictionary&#39;s and 2 Dimensional Arrays . Advay Shindikar and Amay Advani . Objective: . Understand the concept of dictionaries and how they can be applied | Learn how to add, modify, and delete entries in a dictionary using the assignment operator and the del keyword | Understand the concept of 2D arrays and how they can be used to store data in rows and columns | Learn how to create a 2D array in Python using a nested list | Understand how to access values in a 2D array using row and column indices | Learn how to use indexing and slicing to access a subset of a 2D array | . . student = {&#39;name&#39;: &#39;Advay&#39;, &#39;age&#39;: 16, &#39;Sophomore&#39;} . students = [&#39;advay&#39;, &#39;amay&#39;, &#39;rohin&#39;, &#39;alex&#39;, &#39;ethan&#39;] . . Check In: &#9989; . Of the above code segments, which is a list and which is a dictionary? | . The first code segment is a dictionary, the 2nd is a list . What is a dictionary and how is it used? | . A dictionary is a type of 2D array that matches key-value pairs. It allows us to associate a value to a unique key, and then to quickly access this value. . What is a 2D Array? | . Arrays where the data element&#39;s position is referred to by two indices. The name specifies two dimensions, like row and column, i and j . How are 2D Arrays different from 1D Arrays or Lists and what can they be used for? | . 1D arrays are just one row of values, while 2D arrays contain a grid of values that has several rows/columns. @d are especially useful when the data is naturally organized in rows and columns like in a spreadsheet, bingo, battleship, theater seats, classroom seats, or a picture . Manipulating Dictionaries . grocery_dict = {} # ask the user to enter grocery items and their prices while True: item = input(&quot;Enter an item for your grocery list (or &#39;done&#39; to exit): &quot;) if item == &quot;done&quot;: break else: price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price # print the grocery list and total cost total_cost = 0 while True: print(&quot;Your grocery list:&quot;) for item, price in grocery_dict.items(): total_cost = total_cost + price print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) # ask the user to choose an action action = input(&quot;What would you like to do? (add/remove/done) &quot;) # add a new item to the grocery list if action == &quot;add&quot;: item = input(&quot;Enter the name of the item you would like to add: &quot;) price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price total_cost += price # remove an item from the j item = input(&quot;Enter the name of the item you would like to remove: &quot;) if item in grocery_dict: total_cost -= grocery_dict[item] del grocery_dict[item] else: print(&quot;Item not found in grocery list!&quot;) # exit the loop and print the final grocery list and total cost elif action == &quot;done&quot;: break print(&quot;Final grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) . Your grocery list: - Apple: $1.0 - Orange: $1.0 - Chocolate: $1.0 - M&amp;M: $1.0 Total cost: $4.0 Your grocery list: - Apple: $1.0 - Orange: $1.0 - Chocolate: $1.0 - M&amp;M: $1.0 Total cost: $8.0 Final grocery list: - Apple: $1.0 - Orange: $1.0 - Chocolate: $1.0 - M&amp;M: $1.0 Total cost: $8.0 . Lists Hacks (0.3) &#9989; . Make your own list and manipulate it via accessing specific elements, adding or removing elements, etc. | Extra: Make an interactable visualization that can manipulate elements in a list such as the one demonstrated in our flask repository | . total = 0 test_scores = [98, 33, 100, 78, 99, 78, 90, 98] for i in test_scores: total = total + i average = total / len(test_scores) #Print average print(f&quot;The average test score was {average}&quot;) #Access print(f&quot;The first test score is {test_scores[0]}&quot;) #Add item to front of list test_scores.append(0) print(f&quot;The new list with score of 0 is {test_scores}&quot;) #Insert item into a specific position in the list test_scores.insert(1, 73) print(f&quot;The new list inserting the score of 73 at index 1 is {test_scores}&quot;) #Remove test_scores.remove(0) # Removes the first occurrence of 0 print(f&quot;The list now that the score 0 is removed {test_scores}&quot;) #Remove item at specific position test_scores.pop(5) print(f&quot;The list removing the score at index 5 is now {test_scores}&quot;) #Clear all items test_scores.clear() # Removes all items from the list print(f&quot;This is the list after clearing all scores {test_scores}&quot;) . The average test score was 84.25 The first test score is 98 The new list with score of 0 is [98, 33, 100, 78, 99, 78, 90, 98, 0] The new list inserting the score of 73 at index 1 is [98, 73, 33, 100, 78, 99, 78, 90, 98, 0] The list now that the score 0 is removed [98, 73, 33, 100, 78, 99, 78, 90, 98] The list removing the score at index 5 is now [98, 73, 33, 100, 78, 78, 90, 98] This is the list after clearing all scores [] . Dictionaries Hack(0.3) &#9989; . Remake the dictionaries simulation in a python terminal, look at the JavaScript code for reference | . diagnosis_database = { &quot;acute bronchitis&quot;: [&#39;Cough&#39;, &#39;Mucus&#39;], &quot;allergy&quot;: [&#39;Runny nose&#39;, &#39;Sneezing&#39;, &#39;Itchy Eyes&#39;, &#39;Watery Eyes&#39;], &quot;amebiasis&quot;: [&#39;Fever&#39;, &#39;Nausea&#39;, &#39;Diarrhea&#39;], &quot;anxiety&quot;: [&#39;Increased heart rate&#39;, &#39;Hyperventilation&#39;, &#39;Sweating&#39;, &#39;Trembling&#39;], &quot;brain cancer&quot;: [&#39;Headache&#39;, &#39;Blurred vision&#39;], &quot;chlamydia&quot;: [&#39;Bleeding&#39;, &#39;Discharge&#39;], &quot;Colorado Tick Fever(CTF)&quot;: [&#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Vomiting&#39;, &#39;Rash&#39;], &quot;COVID-19&quot;: [&#39;Fever&#39;, &#39;Sore throat&#39;, &#39;Runny nose&#39;], &quot;depression&quot;: [&#39;Fatigue&#39;, &#39;Imsomnia&#39;, &#39;Agitation&#39;], &quot;diarrhea&quot;: [&#39;Fever&#39;, &#39;Cramps&#39;, &#39;Bloating&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;ear infection&quot;: [&#39;Fever&#39;, &#39;Ear Pain&#39;], &quot;endometriosis&quot;: [&#39;Stomache ache&#39;, &#39;Bleeding&#39;], &quot;fibromyalgia&quot;: [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;], &quot;flu&quot;: [&#39;Fever&#39;, &#39;Cough&#39;, &#39;Runny nose&#39;], &quot;lupus&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;], &quot;lyme disease&quot;: [&#39;Fever&#39;, &#39;Fatigue&#39;, &#39;Headache&#39;], &quot;mononucleosis&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Headache&#39;], &quot;pink eye&quot;: [&#39;Runny nose&#39;, &#39;Blurred vision&#39;], &quot;pneumonia&quot;: [&#39;Cough&#39;, &#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;schizophrenia&quot;: [&#39;Anxiety&#39;, &#39;Paranoia&#39;, &#39;Hallucination&#39;], } # User inputs new key-value pair or changes the values of an existing key in the dictionary while True: key = input(&quot;Enter the sickness (or type &#39;done&#39; to finish): &quot;) if key == &#39;done&#39;: break else: print(f&quot;You entered the sickness: {key}&quot;) value = input(&quot;Enter the symptoms attributed to that sickness: &quot;) print(f&quot;You ented the symptoms: {value}&quot;) diagnosis_database[key] = value # display database print(diagnosis_database) . You entered the sickness: Stone Man&#39;s Disease You ented the symptoms: Low-grade fever, inflammation, join paint {&#39;acute bronchitis&#39;: [&#39;Cough&#39;, &#39;Mucus&#39;], &#39;allergy&#39;: [&#39;Runny nose&#39;, &#39;Sneezing&#39;, &#39;Itchy Eyes&#39;, &#39;Watery Eyes&#39;], &#39;amebiasis&#39;: [&#39;Fever&#39;, &#39;Nausea&#39;, &#39;Diarrhea&#39;], &#39;anxiety&#39;: [&#39;Increased heart rate&#39;, &#39;Hyperventilation&#39;, &#39;Sweating&#39;, &#39;Trembling&#39;], &#39;brain cancer&#39;: [&#39;Headache&#39;, &#39;Blurred vision&#39;], &#39;chlamydia&#39;: [&#39;Bleeding&#39;, &#39;Discharge&#39;], &#39;Colorado Tick Fever(CTF)&#39;: [&#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Vomiting&#39;, &#39;Rash&#39;], &#39;COVID-19&#39;: [&#39;Fever&#39;, &#39;Sore throat&#39;, &#39;Runny nose&#39;], &#39;depression&#39;: [&#39;Fatigue&#39;, &#39;Imsomnia&#39;, &#39;Agitation&#39;], &#39;diarrhea&#39;: [&#39;Fever&#39;, &#39;Cramps&#39;, &#39;Bloating&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &#39;ear infection&#39;: [&#39;Fever&#39;, &#39;Ear Pain&#39;], &#39;endometriosis&#39;: [&#39;Stomache ache&#39;, &#39;Bleeding&#39;], &#39;fibromyalgia&#39;: [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;], &#39;flu&#39;: [&#39;Fever&#39;, &#39;Cough&#39;, &#39;Runny nose&#39;], &#39;lupus&#39;: [&#39;Fatigue&#39;, &#39;Fever&#39;], &#39;lyme disease&#39;: [&#39;Fever&#39;, &#39;Fatigue&#39;, &#39;Headache&#39;], &#39;mononucleosis&#39;: [&#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Headache&#39;], &#39;pink eye&#39;: [&#39;Runny nose&#39;, &#39;Blurred vision&#39;], &#39;pneumonia&#39;: [&#39;Cough&#39;, &#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &#39;schizophrenia&#39;: [&#39;Anxiety&#39;, &#39;Paranoia&#39;, &#39;Hallucination&#39;], &#34;Stone Man&#39;s Disease&#34;: &#39;Low-grade fever, inflammation, join paint&#39;} . 2D Arrays Hack (0.3): &#9989; . Remake the 2D Arrays simulation in a python terminal, look at the JavaScript code for reference | Use PIL to visualize it further | . num_rows = int(input(&quot;Enter the number of rows: &quot;)) print(f&quot;Number of rows: {num_rows}&quot;) num_cols = int(input(&quot;Enter the number of columns: &quot;)) print(f&quot;Number of columns: {num_cols}&quot;) # Generate grod grid = [] for i in range(num_rows): row = [] for j in range(num_cols): row.append(&#39;[ ]&#39;) grid.append(row) # Print grid for row in grid: print(&#39; &#39;.join(row)) . Number of rows: 13 Number of columns
            "url": "https://e-shen2022.github.io/emma_blog/2023/04/27/P4M-DataStructures-TeamEAAR.html",
            "relUrl": "/2023/04/27/P4M-DataStructures-TeamEAAR.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "DevOps Lesson",
            "content": "import socket # Change the following host and see what IP it prints! host = &quot;google.com&quot; ip = socket.gethostbyname(host) print(ip) . 142.250.72.174 . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) print(&quot;Successfully connected!&quot;) . Successfully connected! . Check-In &#9989; . 1. What is an IP address? . A unique set of numbers that identifies a device (computer/phone) on the internet/network and allows the device to send and recieve information to another device on the same internet/network. | . 2. What is a TCP port? . It&#39;s like a numbered gateway that allows data to flow in and out of a device over a network. Each port is identified with a unique # between 0 and 65535, and specific applications/services are associated with specific port #s. Ex. web traffic sent over port 80 or 443, email traffic uses port 25 or 587 | An easy way to think about it is that it is like a road that allows your car know where to go. | Purpose: By using different port numbers, multiple services/applications can run at the same time on the same device without interfering with each other&#39;s network traffic. | . Slide Hacks . 1. What does DNS stand for? . Domain Name Service . 2. What is the purpose of DNS? . Its purpose is to assign an IP address to each domain name. Its purpose is to act like a phonebook for the internet, allowing users to access websites and other online resources by their familiar names rather than obscure numerical IP addresses. . 3. How does DNS work? . When you type a domain name like www.googledocs.com into your web browser, your computer sends a request to a DNS server, asking for the IP address associated with that domain name. The DNS server then looks up the IP address associated with the domain name in its database, and sends it back to your computer. Your computer then uses that IP address to connect to the server hosting the website you requested. . 4. What is a DNS resolver? . It is a computer program or service that helps your device find the IP address associated with a domain name you want to access on the internet. When you type in a domain name in your web browser, the DNS resolver translates that name into a corresponding IP address so that your device can connect to the appropriate server and display the website or other online resource you requested. . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) # Send a GET request to &quot;/&quot; s.sendall(b&quot;GET / HTTP/1.1 r n r n&quot;) # Recieve &amp; print 2048 bytes of data data = s.recv(2048) print(data.decode()) . HTTP/1.1 200 OK Date: Fri, 28 Apr 2023 03:35:28 GMT Expires: -1 Cache-Control: private, max-age=0 Content-Type: text/html; charset=ISO-8859-1 Content-Security-Policy-Report-Only: object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-Thh8XXEi_0dtzJiTWv-obA&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp P3P: CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34; Server: gws X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN Set-Cookie: 1P_JAR=2023-04-28-03; expires=Sun, 28-May-2023 03:35:28 GMT; path=/; domain=.google.com; Secure Set-Cookie: AEC=AUEFqZcKRBPWib4KyVA5gUM7f_jMHvzlV7nK4XxRF_m6r0hpbqVuPZRVKNo; expires=Wed, 25-Oct-2023 03:35:28 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax Set-Cookie: NID=511=V6b-Onn2abuWFtZjuDnanbaabwKWVX_JrNGeIDYTa6xIqpJyIqmslAJQInfh8vfekdGCo_TZOGPWK-81cJEKvvxtLOUAoWA1C-eDC_5oAqwo6gbUdFFkQGZR_rOIl7hrzHbwZslnCbI-snNHMdzeX7gfnE-v34xw4PJr3ntrywc; expires=Sat, 28-Oct-2023 03:35:28 GMT; path=/; domain=.google.com; HttpOnly Accept-Ranges: none Vary: Accept-Encoding Transfer-Encoding: chunked 5ca3 &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content=&#34;Search the world&#39;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&#39;re looking for.&#34; name=&#34;description&#34;&gt;&lt;meta content=&#34;noodp&#34; name=&#34;robots&#34;&gt;&lt;meta content=&#34;text/html; charset=UTF-8&#34; http-equiv=&#34;Content-Type&#34;&gt;&lt;meta content=&#34;/images/branding/googleg/1x/googleg_standard_color_128dp.png&#34; itemprop=&#34;image&#34;&gt;&lt;title&gt;Google&lt;/title&gt;&lt;script nonce=&#34;Thh8XXEi_0dtzJiTWv-obA&#34;&gt;(function(){window.google={kEI:&#39;AD9LZJ_INZ_KkPIPs-u2yAY&#39;,kEXPI:&#39;0,1359409,1709,4349,207,2414,2390,2316,383,246,5,1129120,1197661,45,695,380089,16115,28684,22430,1362,12319,2816,14764,4998,13228,3847,41316,2891,3926,213,7615,606,76014,432,3,346,1244,1,16916,2652,4,1528,2304,29062,13065,11442,2216,2980,1457,16786,5770,2587,4094,7596,1,11943,30211,2,1 . import requests # Change the URL to whatever you&#39;d like response = requests.get(&quot;https://academicsandathleticsforall.org/&quot;) print(&quot;Status code:&quot;, response.status_code) print(&quot;Headers:&quot;, response.headers) print(&quot;Response text:&quot;, response.text[:100]) # Add a line to print the &quot;Content-Type&quot; header of the response # Try an image URL! . Status code: 200 Headers: {&#39;Link&#39;: &#39;&lt;//img1.wsimg.com/ceph-p3-01/website-builder-data-prod/static/widgets/UX.4.30.1.js&gt;; rel=preload; as=script; crossorigin,&lt;https://img1.wsimg.com/gfonts/s/karla/v23/qkBIXvYC6trAT55ZBi1ueQVIjQTD-JqaE0lM.woff&gt;; rel=preload; as=font; crossorigin,&lt;https://img1.wsimg.com/gfonts/s/karla/v23/qkBIXvYC6trAT55ZBi1ueQVIjQTDH52aE0lM.woff&gt;; rel=preload; as=font; crossorigin,&lt;https://img1.wsimg.com/gfonts/s/oldstandardtt/v18/MwQsbh3o1vLImiwAVvYawgcf2eVer2q6bHU.woff&gt;; rel=preload; as=font; crossorigin,&lt;https://img1.wsimg.com/gfonts/s/oldstandardtt/v18/MwQubh3o1vLImiwAVvYawgcf2eVeqlq-.woff&gt;; rel=preload; as=font; crossorigin,&lt;https://img1.wsimg.com/gfonts/s/oldstandardtt/v18/MwQrbh3o1vLImiwAVvYawgcf2eVWEX-tS1ZZ.woff&gt;; rel=preload; as=font; crossorigin,&lt;https://fonts.googleapis.com&gt;; rel=preconnect; crossorigin,&lt;https://fonts.gstatic.com&gt;; rel=preconnect; crossorigin,&lt;https://img1.wsimg.com&gt;; rel=preconnect; crossorigin,&lt;https://isteam.wsimg.com&gt;; rel=preconnect; crossorigin&#39;, &#39;Cache-Control&#39;: &#39;max-age=30&#39;, &#39;Content-Security-Policy&#39;: &#34;frame-ancestors &#39;self&#39; godaddy.com *.godaddy.com&#34;, &#39;Content-Type&#39;: &#39;text/html;charset=utf-8&#39;, &#39;Vary&#39;: &#39;Accept-Encoding&#39;, &#39;Server&#39;: &#39;DPS/2.0.0-beta+sha-7828e72&#39;, &#39;X-Version&#39;: &#39;7828e72&#39;, &#39;X-SiteId&#39;: &#39;us-west-2&#39;, &#39;Set-Cookie&#39;: &#39;dps_site_id=us-west-2; path=/; secure&#39;, &#39;ETag&#39;: &#39;af178185285a6a4e0ff255d0d7964520&#39;, &#39;Content-Encoding&#39;: &#39;br&#39;, &#39;Date&#39;: &#39;Fri, 28 Apr 2023 03:35:32 GMT&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;} Response text: &lt;!DOCTYPE html&gt;&lt;html lang=&#34;en-US&#34;&gt;&lt;head&gt;&lt;link rel=&#34;icon&#34; href=&#34;//img1.wsimg.com/isteam/ip/8ede07fa-6 . NGINX . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws) print(response.text) . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Cool site&lt;/title&gt; &lt;meta name=&#34;description&#34; content=&#34;cool site for apcsp&#34;&gt; &lt;/head&gt; &lt;body&gt; Hello, this is my cool site. Check out my products: &lt;a href=&#34;/products&#34;&gt;Products!!&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; . Configuration . server { // Listen on virtual &quot;port 80&quot; listen 80; listen [::]:80; server_name 3.130.255.192; location / { // Inform server about original client proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; // Forward all requests transparently to the server running on our computer proxy_pass http://localhost:9099; } } . Load Balancing . upstream example.com { server server1.example.com; server server1.example.com; } . HTTP Headers . server { add_header X-Cool-Header &quot;I love APCSP!&quot;; location /pages { add_header X-Cooler-Header &quot;This is my secret header!&quot;; } } . Check In &#9989; . 1. Research 1 HTTP header and describe, in detail, its purpose. . HTTP (Hypertext Transfer Protocol) is a protocol used for transmitting data over the internet. When a client sends a request to a server, it includes an HTTP header, which contains additional info ab request/client. . &quot;Content-Type&quot; header - The purpose of this header is to provide information to the server about the type of data that is being sent in the body of the HTTP request or response. . Ex. if a client sends a POST request to a server with a JSON payload in the body, the Content-Type header would be set to &quot;application/json&quot;. This tells the server that the body of the request contains JSON data and helps the server understand how to parse and process the data. Similarly, when a server sends a response back to the client, it includes a Content-Type header that specifies the type of data being sent. This is important because the client needs to know how to interpret the data. . 2. Write a line in a sample NGINX configuration that will add that specific header to the `/information` location . &quot;add_header Date $date_gmt;&quot; . 3. Explain the purpose of the load balancing performed by NGINX . The purpose of load balancing performed by NGINX is to distribute incoming traffic across multiple servers or instances. This helps make websites faster and more reliable by dividing incoming traffic across multiple servers or computers, preventing one server from getting too much traffic and slowing down the website. . 4. Modify the following code block to obtain the value of the secret header on `/products` of the AWS site ✅ . import requests aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws + &quot;/products&quot;) secret_header = response.headers.get(&#39;X-Cooler-Header&#39;) print(&quot;The secret header is:&quot;, secret_header) . The secret header is: This is my secret header! . Hacks . Complete the above check-in questions and change the hosts ✅ | Complete the above code-segment to retrieve the secret header ✅ | . Bonus (0.05) . Create a diagram showing the layers of abstraction that allow us to use HTTP (IP, TCP, etc.) . CORS Hacks &#9989; . 1. Explain what CORS is and what it stands for . CORS = Cross-Origin Resource Sharing. It&#39;s a security feature used by web browsers that prevents web pages from making requests to a different domain than the one that served the original page. If a website wants to make a request to a different domain, the domain that is being accessed must explicitly allow it by sending special headers in the response. CORS allows for controlled access to web resources that would otherwise be restricted. . 2. Describe how you would be able to implement CORS into your own websites To implement CORS in your website, you need to configure your server to include specific headers in the response that indicate which origins are allowed to access your resources. The most important header is the Access-Control-Allow-Origin header, which specifies the domain(s) that are allowed to make requests to your server. You can also use other headers to allow specific HTTP methods or headers. . 3. Describe why you would want to implement CORS into your own websites . You would want to implement CORS in your own website if you need to make requests to a different domain to access resources like APIs or to embed content from other websites. . 4. How could use CORS to benefit yourself in the future? . If you plan on developing websites that need to interact with resources on other domains (such as APIs or embedded content), implementing CORS can help you avoid security issues and access those resources safely. It can also help you provide a better user experience by allowing your website to communicate with other websites and services seamlessly. . KASM Hacks &#9989; . 1. What is the purpose of &quot;sudo&quot; when running commands in terminal? . The &quot;sudo&quot; command stands for &quot;superuser do&quot; and it allows users to run commands with administrative privileges in the terminal. When a command is run with sudo, it temporarily grants the user administrative access, giving them the ability to perform tasks that require special permissions, such as installing software or modifying system files. . 2. What are some commands which allow us to look at how the storage of a machine is set up as? . Some commands to look at how a machine&#39;s storage is set up include &quot;df&quot; to see the amount of disk space avaliable on the file system, &quot;du&quot; to estimate file space usage, and &quot;mount&quot; to see what file systems are currently being used. . 3. What do you think are some alternatives to running &quot;curl -O&quot; to get the zip file for KASM? . A web browser, a download manager app, or a different command-line tool like &quot;wget&quot;. . 4. What kind of commands do you think the &quot;install.sh&quot; command has and why is it necessary to call it? . &quot;install.sh&quot; is a command that installs and configures the KASM software on your computer. It is necessary because it contains the necessary commands to install software or packages and automates the installation process, making it easier and more efficient for users. . 5. Explain in at least 3-4 sentences how deploying KASM is related to/requires other topics talked about in the lesson and/or potential ways to add things mentioned in the lesson to this guide. . To deploy KASM, a container-based streaming service, various elements such as headers, NGINX, load balancing, configuration, DNS, and CORS are essential. Headers are significant to configure security settings and enable CORS for KASM, while NGINX functions as a reverse proxy to manage incoming web traffic. Load balancing is necessary to distribute traffic equally among several server instances running KASM. Configuration is required to configure the KASM service and determine the specific environment settings. Finally, DNS is used to map the KASM domain name to its IP address, so users can access the service through a web browser. .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/04/26/devops-lesson.html",
            "relUrl": "/2023/04/26/devops-lesson.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Siroh . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . This is a normal array: [&#39;Hello&#39;, &#39;Hi&#39;, &#39;Whats up&#39;] This is a 2D array [&#39;Name&#39;, &#39;ID&#39;, &#39;Age&#39;] [&#39;Kush&#39;, &#39;1&#39;, &#39;16&#39;] [&#39;Finn&#39;, &#39;2&#39;, &#39;16&#39;] . How I used 2D Arrays (game example) . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 0 1 2 0 1 2 0 1 2 0 1 X 2 0 1 2 0 1 X O 2 That space is already taken. Try again. 0 1 2 0 1 X O 2 0 1 2 0 1 X O 2 X 0 1 2 0 1 X O 2 X O 0 1 2 0 1 X X O 2 X O . ValueError Traceback (most recent call last) /home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb Cell 6 in &lt;cell line: 72&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=68&#39;&gt;69&lt;/a&gt; print(&#34;That space is already taken. Try again.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=70&#39;&gt;71&lt;/a&gt; # Start the game &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=71&#39;&gt;72&lt;/a&gt; play_game() /home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb Cell 6 in play_game() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=48&#39;&gt;49&lt;/a&gt; # Get the player’s move &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=49&#39;&gt;50&lt;/a&gt; row = int(input(f&#34;{player}&#39;s turn. Enter row (0-2): &#34;)) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=50&#39;&gt;51&lt;/a&gt; col = int(input(f&#34;{player}&#39;s turn. Enter column (0-2): &#34;)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=51&#39;&gt;52&lt;/a&gt; # Check if the move is valid &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=52&#39;&gt;53&lt;/a&gt; if board[row][col] == &#39; &#39;: ValueError: invalid literal for int() with base 10: &#39;&#39; . 2: Iteration . Robot Game:Finn Carpenter . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . hi hi hi hi hi hello hello hello hello hello hello 1 2 3 4 5 . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | . How I used iteration (game example) . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . Input In [4] function run() { ^ SyntaxError: invalid syntax . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # print(List[0]) print(Dict[1]) . 1 Hi . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Unscramble the following Computer Science Word: aterntoii Sorry, that&#39;s not the word. Try again! Sorry, that&#39;s not the word. Try again! Hint 1: The first letter of the word is &#39;i&#39; Sorry, that&#39;s not the word. Try again! Hint 2: The second letter of the word is &#39;t&#39; Sorry, that&#39;s not the word. Try again! All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was iteration . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages ✅ | Answer all questions in a new markdown block (so we can grade faster) ✅ SEE BELOW | . New markdown file for answered questions✅ . What are some examples of 2d Arrays: tic tac toe where there is a x and y axis . | What is a modern day game that could be classified as a 2D array: 2048 . | Describe a 2D array in your own words: arrays where the element is referred to by 2 indeces, like having a row and a column . | What is the definition of iteration in your own words: looping through the same piece of code until a specific index of until a condition is met(usually using for or while loop) . | . Iteration Robot Game . Explain how the game relates to iteration: iterates through the same direction block, such as up, down, left, right . | What parts of the code use iteration: Using the same direction block multiple times. For example for Level 2 it iterated through the down block 4 times and then the right block 4 times to reach the goal . | . Scrabble Game . Explain which parts of the code use lists: list called word_list to save the possible words that could be scrambled and guessed by the user . | Explain what list manipulation is happening in that part: manipulate the string through the random function and iterating through that list to generate new scrambled words for the user to decipher . | . Iteration 0.2 (can get up to 0.23) . Get to level 5: Take ScreenShots of your name inside the box an put them in your ticket✅ . Level 1 | Level 2 | Level 3 | Level 4 | Level 5 | Create a code segment with iteration that does something cool✅ . def encrypt_text(plaintext,n): ans = &quot;&quot; # iterate over the given text for i in range(len(plaintext)): ch = plaintext[i] # check if space is there then simply add space if ch==&quot; &quot;: ans+=&quot; &quot; # check if a character is uppercase then encrypt it accordingly elif (ch.isupper()): ans += chr((ord(ch) + n-65) % 26 + 65) # check if a character is lowercase then encrypt it accordingly else: ans += chr((ord(ch) + n-97) % 26 + 97) return ans plaintext = &quot;This is cool code&quot; n = 1 print(&quot;Plain Text is : &quot; + plaintext) print(&quot;Shift pattern is : &quot; + str(n)) print(&quot;Cipher Text is : &quot; + encrypt_text(plaintext,n)) . Plain Text is : This is cool code Shift pattern is : 1 Cipher Text is : Uijt jt dppm dpef . 2D array 0.2 (can get up to 0.23)&#9989; . Explain how the tic tac toe game works (2D array): THe game board is a 3x3 grid and each cell is either empty, an &quot;x&quot; or &quot;o&quot; mark. We can create a 2D array with 3 rows and 3 columns to map out where an &quot;x&quot; or &quot;o&quot; could be on the game board. | Give 3 Examples of games that can be made from 2D arrays: 2048, Crossword, Sudoku | . List and Dictionaries 0.2 (can get up to 0.23)&#9989; . Explain the differences between Lists and Dictionaries: Lists is a collection of items that can indexed in 1 dimensional. You can put in categorical or numerical data such as strings or integers. Dictionaries also save information but in a structure of key value pairs. There can only be one key but multiple values can be attributed to that key through a list. | Make a code block that manipulates either a list or a dictionary | . list = [1, 2, 3] sum = 0 for i in list: sum = sum + i print(sum) . 6 . EXTRA: Example of using iteration in CPT✅ | . diagnosis_database is a dictionary that holds information about 21 different sicknesses. The key is the sickness, and the values are the symptoms associated with it. . My dictionary manages complexity because it effectively saves the data in a way that directly matches a sickness to its list of symptoms. In this way, my program is able to iterate through each key&#39;s values (symptoms) and match them with the user&#39;s symptoms to find the key(sickness) that the user most likely is experiencing. If I did not use a dictionary, I would have to spend an unreasonable about of time creating variables for each sickness which would not be favorable if I wanted to expand my database to hold information about the million other types of diseases possible. . def main(): # User input as list of strings user_symptoms_string = [(x) for x in input(&quot; nFeeling under the weather? Enter your symptoms here: &quot;).split(&#39;, &#39;)] # Diseases database diagnosis_database = { &quot;acute bronchitis&quot;: [&#39;Cough&#39;, &#39;Mucus&#39;], &quot;allergy&quot;: [&#39;Runny nose&#39;, &#39;Sneezing&#39;, &#39;Itchy Eyes&#39;, &#39;Watery Eyes&#39;], &quot;amebiasis&quot;: [&#39;Fever&#39;, &#39;Nausea&#39;, &#39;Diarrhea&#39;], &quot;anthrax&quot;: [&#39;Fever&#39;, &#39;Cough&#39;, &#39;Nausea&#39;, &#39;Headache&#39;, &#39;Sweating&#39;], &quot;anxiety&quot;: [&#39;Increased heart rate&#39;, &#39;Hyperventilation&#39;, &#39;Sweating&#39;, &#39;Trembling&#39;], &quot;brain cancer&quot;: [&#39;Headache&#39;, &#39;Blurred vision&#39;], &quot;chlamydia&quot;: [&#39;Bleeding&#39;, &#39;Discharge&#39;], &quot;Colorado Tick Fever(CTF)&quot;: [&#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Vomiting&#39;, &#39;Rash&#39;], &quot;COVID-19&quot;: [&#39;Fever&#39;, &#39;Sore throat&#39;, &#39;Runny nose&#39;], &quot;depression&quot;: [&#39;Fatigue&#39;, &#39;Imsomnia&#39;, &#39;Agitation&#39;], &quot;diarrhea&quot;: [&#39;Fever&#39;, &#39;Cramps&#39;, &#39;Bloating&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;ear infection&quot;: [&#39;Fever&#39;, &#39;Ear Pain&#39;], &quot;endometriosis&quot;: [&#39;Stomache ache&#39;, &#39;Bleeding&#39;], &quot;fibromyalgia&quot;: [&#39;Fatigue&#39;, &#39;Depression&#39;, &#39;Anxiety&#39;, &#39;Insomnia&#39;, &#39;Headache&#39;], &quot;flu&quot;: [&#39;Fever&#39;, &#39;Cough&#39;, &#39;Runny nose&#39;], &quot;lupus&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;], &quot;lyme disease&quot;: [&#39;Fever&#39;, &#39;Fatigue&#39;, &#39;Headache&#39;], &quot;mononucleosis&quot;: [&#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Sore Throat&#39;, &#39;Headache&#39;], &quot;pink eye&quot;: [&#39;Runny nose&#39;, &#39;Blurred vision&#39;], &quot;pneumonia&quot;: [&#39;Cough&#39;, &#39;Fatigue&#39;, &#39;Fever&#39;, &#39;Nausea&#39;, &#39;Vomiting&#39;], &quot;schizophrenia&quot;: [&#39;Anxiety&#39;, &#39;Paranoia&#39;, &#39;Hallucination&#39;], } # Dictionary that includes treatment advice treatment_database = { &quot;acute bronchitis&quot;: &quot;get plenty of rest! Drink fluids but avoid caffeine and alcohol. Bring a humidifier into your house. If the symptoms are too painful pain relievers and fever reducers, such as acetaminophen (Tylenol).&quot;, &quot;allergy&quot;: &quot;go to the doctor, try saline nasal irrigation, use an air filter indoors&quot;, &quot;amebiasis&quot;: &quot;take a definitive diagnosis of ambiasis by stool examination to identify the parasite. The standard treatment for ambiasis includes a course of antibiotics such as metronidazole or tinidazole, which are used to kill the parasite. It is important to consult a healthcare professional for diagnosis and treatment as the infection can lead to serious complications if left untreated. n nAmebiasis can also cause dehydration and malnutrition due to diarrhea and vomiting. It is important to maintain hydration and provide adequate nutrition to help the body fight the infection! n nOf course, don&#39;t forget to get lots of rest! Stay safe and we wish you good health! n&quot;, &quot;anxiety&quot;: &quot;try arranging a meeting with a therapist, visit the doctor for Anti-anxiety medications, listen to calming music, take leisurely walks outside&quot;, &quot;brain cancer&quot;: &quot;visit the doctor right away&quot;, &quot;chlamydia&quot;: &quot;visit the doctor to see what medication you need&quot;, &quot;Colorado Tick Fever(CTF)&quot;: &quot;take over-the-counter pain relievers like acetaminophen and ibuprofen to help reduce fever, headache, and muscle pain. n nAvoid taking aspirin or aspirin-contained products as they can increase the risk of bleeding in viral infections like CTF n nRemember to stay hydrated to avoid fever dehydration and get enough rest! n nIn the end of the day, there is no specific treatment for CTF, your best bet is to learn how to prevent future encounters. Avoid walking in high-risk areas, wear protective clothing, and use insect repellents containing DEET n nStay safe and we wish you good health! n&quot;, &quot;COVID-19&quot;: &quot;go to bed early, drink lots of warm water, Take advil in moderation if you have muscle pain&quot;, &quot;depression&quot;: &quot;visit a doctor for medication, Try arranging a meeting with a therapist, listen to music, take walks outside&quot;, &quot;diarrhea&quot;: &quot;drink plenty of liquids, including water, broths and juices. Avoid caffeine and alcohol. Add semisolid and low-fiber foods gradually as your bowel movements return to normal. Try soda crackers, toast, eggs, rice or chicken.&quot;, &quot;ear infection&quot;: &quot;take antibiotics so that the infection doesn&#39;t spread to other parts of the body&quot;, &quot;endometriosis&quot;: &quot;effective treatments such as hormones and excision surgery can help, staying hydrated and putting a heating pad in the uterus area&quot;, &quot;fibromyalgia&quot;: &quot;try out some of these improving quality of life treatments! n n1. Medications can help manage the pain such as pain relievers, antidepressants, and anticonvulsants. n n2. Get involved with physical therapy to improve muscle strength, flexibility, range of motion, and reduce pain and stiffness n n3. Exercise! Yoga, walking, swimming, and cycling are all great options! n n4. Be mindful of your sleep schedule. Good sleep hygiene practices like avoiding caffeine and electronics before bed would be helpful n nIt is important to work with a healthcare providers to dvelop an individualized health plan for fibromyalgia. n&quot;, &quot;flu&quot;: &quot;get plenty of rest, drink lots of water, and if you feel pain, take pain relievers&quot;, &quot;lupus&quot;: &quot;take care of your skin by wearing plenty of sun block and keeping skin safe by wearing sun protective clothes&quot;, &quot;lyme disease&quot;: &quot;take oral and Intravenous antibiotics&quot;, &quot;mononucleosis&quot;: &quot;get plenty of rest and take antiflammatory drugs&quot;, &quot;pink eye&quot;:&quot;use artificial tears, clean your eyelids with a wet cloth, and apply cold or warm compresses several times daily. &quot;, &quot;pneumonia&quot;: &quot;mild pneumonia can usually be treated at home with rest, antibiotics (if it&#39;s likely be caused by a bacterial infection) and by drinking plenty of fluids. More severe cases may need hospital treatment.&quot;, &quot;schizophrenia&quot;: &quot;treatment with medications and psychosocial therapy can help manage the condition. In some cases, hospitalization may be needed. A psychiatrist experienced in treating schizophrenia usually guides treatment.&quot;, } # Pass user symptoms as a parameter def get_diagnosis(user_symptoms_string): # Initialize match score array match_result_array = [0] * len(diagnosis_database) # Initialize variables match_disease_index = 0 max_match_result = 0 max_match_result_disease = &quot;&quot; max_match_result_treatment = &quot;&quot; max_match_result_report = &quot;&quot; # Nested for loop to match user&#39;s symptoms to symptoms in database that correspond to a certain sickness for key, values in diagnosis_database.items(): for symptom in user_symptoms_string: for value in values: # If they do match, +1 to array keeping track of how many matches for each sickness if value == symptom: match_result_array[match_disease_index] = match_result_array[match_disease_index] + 1 break # Finding sickness with max number of matches with user symptoms if match_result_array[match_disease_index] &gt; max_match_result: max_match_result = match_result_array[match_disease_index] max_match_result_disease = key match_disease_index = match_disease_index + 1 # Match sickness with treatment advice for key, value in treatment_database.items(): if key == max_match_result_disease: max_match_result_treatment = value break # Combine printed information into one variable max_match_result_report = &quot; nBased on your current symptoms, your mostly likely sickness is &quot; + max_match_result_disease + &quot;. n nWe advise you to &quot; + max_match_result_treatment return max_match_result_report report = get_diagnosis(user_symptoms_string) # Print diagnosis and treatment advice print(report) # Ask user if want to run program again restart = input(&quot;Run again? (y/n) &quot;) if restart == &quot;y&quot;: main() elif restart == &quot;n&quot;: print(&quot; nGoodbye and stay safe!&quot;) else: print(&quot; nPlease type either y for yes or n for no&quot;) main() . Based on your current symptoms, your mostly likely sickness is acute bronchitis. We advise you to get plenty of rest! Drink fluids but avoid caffeine and alcohol. Bring a humidifier into your house. If the symptoms are too painful pain relievers and fever reducers, such as acetaminophen (Tylenol). Goodbye and stay safe! .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/04/21/EOYPLAYGROUND.html",
            "relUrl": "/2023/04/21/EOYPLAYGROUND.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Tri-3-Lesson",
            "content": "What you should have to start . Should have wget this file (tri3-lesson.ipynb) | wget this file: https://raw.githubusercontent.com/JoshuaW03628/Repository-1/master/nba_player_statistics.csv | Copy Path from nba_player_statistics.csv and replace prior path for it. | . Lesson Portion 1: ReIntroduction to Data Analysis, NunPy, and Pandas, Why is it important? . Data Analysis. . Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances. | . What is NunPy and Pandas . Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions. | Imagine you have a lot of toys, but they are all mixed up in a big box. NumPy helps you to put all the same types of toys together, like all the cars in one pile and all the dolls in another. Pandas is like a helper that helps you to remember where each toy is located. So, if you want to find a specific toy, like a red car, you can ask Pandas to find it for you. | Just like how it&#39;s easier to find a toy when they are sorted and organized, it&#39;s easier for grown-ups to understand and analyze big sets of numbers when they use NumPy and Pandas. | . Lesson Portion 2 More into NunPy . What we are covering; . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Examining NumPy arrays | Creating NumPy arrays and performing intermediate array operations | Popcorn Hacks, Make your own percentile NunPy array | . What is NunPy&#39;s use in data analysis/ how to import NunPy. . NumPy is a tool in Python that helps with doing math and data analysis. It&#39;s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It&#39;s used a lot by scientists and people who work with data because it makes their work easier and faster. . import numpy as np . List of NunPy Functions, what they do, and examples. . Link; https://www.educba.com/numpy-functions/ | . Example of Using NunPy in Our Project . This code calculates the total plate appearances for a baseball player using NumPy&#39;s sum() function, similar to the original example. It then uses NumPy to calculate the total number of bases (hits plus walks) for the player, and divides that by the total number of plate appearances to get the on-base percentage. The results are then printed to the console. . import numpy as np # Example data player_hits = np.array([3, 1, 2, 0, 1, 2, 1, 2]) # Player&#39;s hits in each game player_walks = np.array([1, 0, 0, 1, 2, 1, 1, 0]) # Player&#39;s walks in each game player_strikeouts = np.array([2, 1, 0, 2, 1, 1, 0, 1]) # Player&#39;s strikeouts in each game # array to store plate appearances (PA) for the player total_pa = np.sum(player_hits != 0) + np.sum(player_walks) + np.sum(player_strikeouts) # array to store on-base percentage (OBP) for the player total_bases = np.sum(player_hits) + np.sum(player_walks) obp = total_bases / total_pa # Print the total plate appearances and on-base percentage for the player print(f&quot;Total plate appearances: {total_pa}&quot;) print(f&quot;On-base percentage: {obp:.3f}&quot;) . Total plate appearances: 21 On-base percentage: 0.857 . Activity 1; PopCorn Hacks; Creating a NunPy Array and Analyzing the Data using Array Operations . import numpy as np #Create a NumPy array of the heights of players in a basketball team heights = np.array([192, 195, 193, 200, 211, 199, 201, 198, 184, 190, 196, 203, 208, 182, 207]) # Calculate the percentile rank of each player&#39;s height percentiles = np.percentile(heights, [25, 50, 75]) # Print the results print(&quot;The 25th percentile height is&quot;, percentiles[0], &quot;cm.&quot;) print(&quot;The 50th percentile height is&quot;, percentiles[1], &quot;cm.&quot;) print(&quot;The 75th percentile height is&quot;, percentiles[2], &quot;cm.&quot;) # Determine the number of players who are in the top 10% tallest top_10_percent = np.percentile(heights, 90) tallest_players = heights[heights &gt;= top_10_percent] print(&quot;There are&quot;, len(tallest_players), &quot;players in the top 10% tallest.&quot;) . The 25th percentile height is 192.5 cm. The 50th percentile height is 198.0 cm. The 75th percentile height is 202.0 cm. There are 2 players in the top 10% tallest. . import numpy as np #Create a NumPy array of the x test_scores = np.array([67, 44, 67, 88, 90, 100, 22, 33, 44, 55, 78]) # Calculate the percentile rank of x percentiles = np.percentile(test_scores, [99, 98, 97]) # Print the results print(&quot;The top 1 percentile test scores is&quot;, percentiles[0], &quot;%&quot;) print(&quot;The top 2 percentile test scores is&quot;, percentiles[1], &quot;%&quot;) print(&quot;The top 3 percentile test scores is&quot;, percentiles[2], &quot;%&quot;) # Determine the number of players who are in the top 10% x top_10_percent = np.percentile(test_scores, 90) smartest_students = test_scores[test_scores &gt;= top_10_percent] print(&quot;There are&quot;, len(smartest_students), &quot;students in the top 10 percent of test scores.&quot;) . The top 1 percentile test scores is 99.0 % The top 2 percentile test scores is 98.0 % The top 3 percentile test scores is 97.0 % There are 2 students in the top 10 percent of test scores. . Lesson Portion 3 More into Pandas . What we are Covering . Explanation of Pandas and its uses in data analysis | Importing Pandas library | Loading data into Pandas DataFrames from CSV files | Manipulating and exploring data in Pandas DataFrames | Example of using Pandas for data analysis tasks such as filtering and sorting | . What are pandas and what is its purpose? . Pandas is a software library that is used in Python | Pandas are used for data analysis and data manipulation | Pandas offer data structures and operations for manipulating numerical tables and time series. | Pandas is free | . Things you can do using pandas . Data Cleansing; Identifying and correcting errors, inconsistencies, and inaccuracies in datasets. | Data fill; Filling in missing values in datasets. | Statistical Analysis; Analyzing datasets using statistical techniques to draw conclusions and make predictions. | Data Visualization; Representing datasets visually using graphs, charts, and other visual aids. | Data inspection; Examining datasets to identify potential issues or patterns, such as missing data, outliers, or trends. | . Pandas and Data analysis . The 2 most important data structures in Pandas are: . Series ; A Series is a one-dimensional labeled array that can hold data of any type (integer, float, string, etc.). It is similar to a column in a spreadsheet or a SQL table. Each element in a Series has a label, known as an index. A Series can be created from a list, a NumPy array, a dictionary, or another Pandas Series. | DataFrame ;A DataFrame is a two-dimensional labeled data structure that can hold data of different types (integer, float, string, etc.). It is similar to a spreadsheet or a SQL table. Each column in a DataFrame is a Series, and each row is indexed by a label, known as an index. A DataFrame can be created from a dictionary of Series or NumPy arrays, a list of dictionaries, or other Pandas DataFrame. | . Dataframes . import pandas as pd . pd.__version__ . &#39;1.4.2&#39; . Importing CSV Data . imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Specifies a player&#39;s name &#39;Jimmy Butler&#39; to filter the DataFrame for that player&#39;s stats. It creates a new DataFrame called &#39;player_stats&#39; which only contains rows where the &#39;NAME&#39; column matches &#39;Jimmy Butler&#39;. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), and assists per game (APG) using the print() function and string formatting. | The code uses the double square brackets [[PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]] to select only the columns corresponding to the player&#39;s points per game, rebounds per game, and assists per game from the player_stats DataFrame. | In summary, the code loads NBA player statistics data from a CSV file, filters it for a specific player, and displays the stats for that player&#39;s PPG, RPG, and APG using a Pandas DataFrame. | . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/home/emma/emma_blog-3/_notebooks/files/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . Stats for Jimmy Butler: PPG RPG APG 0 35.0 5.0 11.0 . In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. . The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose. . Imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Asks the user to input a player name using the input() function and assigns it to the variable player_name. | Filters the DataFrame for the specified player name using the df[df[&#39;NAME&#39;] == player_name] syntax, and assigns the resulting DataFrame to the variable player_stats. | Checks if the player_stats DataFrame is empty using the empty attribute. If it is empty, prints &quot;No stats found for that player.&quot; Otherwise, it proceeds to step 6. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), assists per game (APG), and total points + rebounds + assists (P+R+A) using the print() function and string formatting. | In summary, this code loads NBA player statistics data from a CSV file, asks the user to input a player name, filters the DataFrame for that player&#39;s stats, and displays the player&#39;s stats for PPG, RPG, APG, and P+R+A. If the player is not found in the DataFrame, it prints a message indicating that no stats were found. | . import pandas as pd df = pd.read_csv(&#39;/home/emma/emma_blog-3/_notebooks/files/nba_player_statistics.csv&#39;) # Load CSV file into a Pandas DataFrame player_name = input(&quot;Enter player name: &quot;) # Get player name input from user player_stats = df[df[&#39;NAME&#39;] == player_name] # Filter the DataFrame to only include stats for the specified player if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Display the stats for the player inputted. . Stats for Stephen Curry: PPG RPG APG P+R+A 6 29.0 4.5 4.0 37.5 . Lesson Portion 4 . What we will be covering . Example of analyzing data using both NumPy and Pandas libraries | Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library | . Example of analyzing data using both NumPy and Pandas libraries . import numpy as np import pandas as pd # Load CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/home/emma/emma_blog-3/_notebooks/files/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for the specified player player_name = input(&quot;Enter player name: &quot;) player_stats = df[df[&#39;NAME&#39;] == player_name] if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Convert the player stats to a NumPy array player_stats_np = np.array(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Calculate the average of each statistic for the player player_stats_avg = np.mean(player_stats_np, axis=0) # Print out the average statistics for the player print(f&quot; nAverage stats for {player_name}:&quot;) print(f&quot;PPG: {player_stats_avg[0]:.2f}&quot;) print(f&quot;RPG: {player_stats_avg[1]:.2f}&quot;) print(f&quot;APG: {player_stats_avg[2]:.2f}&quot;) print(f&quot;P+R+A: {player_stats_avg[3]:.2f}&quot;) . Average stats for Stephen Curry: PPG: 29.00 RPG: 4.50 APG: 4.00 P+R+A: 37.50 . NumPy impacts the given code because it performs operations on arrays efficiently. Specifically, it converts a Pandas DataFrame object to a NumPy array object, and then calculates the average statistics for a the player you guys inputted. Without NumPy, it would be more difficult and less efficient to perform these calculations on large data sets. It does the math for us. . Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library . Matplotlib is used essentially to create visuals of data. charts,diagrams,etc. . import numpy as np import pandas as pd import matplotlib.pyplot as plt # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/home/emma/emma_blog-3/_notebooks/files/nba_player_statistics.csv&#39;) # Print the first 5 rows of the DataFrame print(df.head()) # Calculate the mean, median, and standard deviation of the &#39;Points&#39; column mean_minutes = df[&#39;MPG&#39;].mean() median_minutes = df[&#39;MPG&#39;].median() stddev_minutes = df[&#39;MPG&#39;].std() # Print the results print(&#39;Mean Minutes: &#39;, mean_minutes) print(&#39;Median Minutes: &#39;, median_minutes) print(&#39;Standard Deviation Minutes: &#39;, stddev_minutes) # Create a histogram of the &#39;Points&#39; column using Matplotlib plt.hist(df[&#39;MPG&#39;], bins=20) plt.title(&#39;MPG Histogram&#39;) plt.xlabel(&#39;MPG&#39;) plt.ylabel(&#39;Frequency&#39;) plt.show() . RANK NAME TEAM POS AGE GP MPG USG% TO% FTA ... APG 0 1 Jimmy Butler Mia F 33.6 1 42.9 34.3 9.9 8 ... 11.0 1 2 Kawhi Leonard Lac F 31.8 2 40.2 30.0 11.9 17 ... 6.0 2 3 Khris Middleton Mil F 31.7 1 33.1 37.5 19.8 10 ... 4.0 3 4 Devin Booker Pho G 26.5 2 44.1 28.8 16.2 14 ... 6.0 4 5 De&#39;Aaron Fox Sac G 25.3 2 38.2 31.6 9.0 14 ... 7.0 SPG BPG TPG P+R P+A P+R+A VI ORtg DRtg 0 3.0 0.0 3.0 40.0 46.0 51.0 11.6 117.2 103.8 1 2.0 0.5 3.0 41.0 40.5 47.0 11.0 129.5 110.4 2 0.0 0.0 5.0 42.0 37.0 46.0 12.8 115.5 111.9 3 2.5 1.5 4.0 33.0 38.0 39.0 5.2 121.9 111.0 4 3.5 0.5 2.5 34.0 38.0 41.0 9.1 112.6 108.8 [5 rows x 29 columns] Mean Minutes: 20.985483870967748 Median Minutes: 23.0 Standard Deviation Minutes: 12.844102823170283 . In this example code, we first import the necessary libraries, including NumPy, Pandas, and Matplotlib. We then load the CSV file into a Pandas DataFrame using the pd.read_csv() function. We print the first 5 rows of the DataFrame using the df.head() function. Next, we calculate the mean, median, and standard deviation of the &#39;MPG&#39; column using the appropriate Pandas methods, and print the results. And, we create a histogram of the &#39;MPG&#39; column using Matplotlib by calling the plt.hist() function and setting appropriate axis labels and a title. We then call the plt.show() method to display the plot. Even though NumPy is not directly used in this code, it is an important underlying component of the pandas and Matplotlib libraries, which are used to load, manipulate and visualize data. It allows them to work more efficiently . Lesson Portion 5; Summary . Summary/Goals of Lesson: . One of our goals was to make you understand data analysis and how it can be important in optimizing business performance. We also wanted to make sure you understood the use of Pandas and NumPy libraries in data analysis, with a focus on NumPy. As someone who works with data, we find Pandas incredibly useful for manipulating, analyzing, and visualizing data in Python. The way we use pandas is to calculate individual player and team statistics. We are a group that works with numerical data, so NumPy is one of our favorite tools for working with arrays and applying mathematical functions to them. It is very fast at computing and manipulating arrays making it a very valuable tool for tracking statistics which is important to our group. For example, if you have an array of the points scored by each player in a game, you can use NumPy to calculate the total points scored, average points per player, or the highest and lowest scoring players. . Lesson Portion 6 Hacks . Printing a CSV File (0.5) &#9989; . Use this link https://github.com/ali-ce/datasets to select csv file of a topic you are interested in, or you may find one online. | Once you select your topic make sure it is a csv file and then you want to press on the button that says raw. | After that copy that information and create a file with a name and .csv at the end and paste your information. | Below is a start that you can use for your hacks. | Your goal is to print 2 specific parts from data (example could be like population and country). | . import pandas as pd # read the CSV file df = pd.read_csv(&quot;/home/emma/emma_blog-3/_notebooks/files/women.csv&quot;) # Load CSV file into a Pandas DataFrame videogame_name = input(&quot;Enter video game name: &quot;) # Get player name input from user videogame_info = df[df[&#39;Name&#39;] == videogame_name] # Filter the DataFrame to only include stats for the specified player if videogame_info.empty: print(&quot;No info found for that video game.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nInfo for {videogame_name}:&quot;) print(videogame_info[[&#39;Name&#39;, &#39;Image&#39;, &#39;Homepage&#39;, &#39;Description&#39;]]) . Info for Broken Age: Name Image 6 Broken Age http://cdn.akamai.steamstatic.com/steam/apps/2... Homepage 6 http://brokenagegame.com/ Description 6 The first graphic adventure by Tim Schafer in ... . Popcorn Hacks (0.2) &#9989; . Lesson Portion 1. | . Answering Questions (0.2) &#9989; . What is NumPy and how is it used in data analysis? . A python library used for numerical computing. It provides a multidimensional array object and a large collection of mathematical functions to perform operations on these objects. It is used in data danalysis because it provides an efficient way to analyze and manipulate large amounts of data. | . What is Pandas and how is it used in data analysis? . Pandas is an open-source Python library that makes it very convenient to load, process, and analyze tabular data using SQL-like queries. With Matplotlib and Seaborn, Pandas provides wide range of ways for visual analysis of tabular data for data analysis | . How is NumPy different than Pandas for data analysis? . NumPy focuses on efficient operations on large numerical arrays. It provides N-dimensional array object that can store and manipulate large amounts of data | Pandas focuses on providing easy-to-use data structures and data manipulation tools for data analysis. 2 main data structures are Series and DataFrame that are designed to handle tabular data | . What is a DataFrame? . 2D array data structure in pandas used to handle tabular data | . What are some common operations you can perform with NumPy? . Creating arrays, indexing arrays, preforming mathematical operations, manipulating arrays | . How Can You Incorporate Either of these Data Analysis Tools (NunPy, Pandas) into your project? . I can incorporate pandas into my CPT project by organizing and indexing my sicknesses and diagnoses database using Pandas operations | . Submit By Thursday 8:35 A.M. &#9989; . How to Submit: Slack a Blog Post that includes all of your hacks to &quot;Joshua Williams&quot; on Slack. | .",
            "url": "https://e-shen2022.github.io/emma_blog/notebooks/2023/04/19/tri3_lesson.html",
            "relUrl": "/notebooks/2023/04/19/tri3_lesson.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # Q: What do you notice in the output? # A: Outputs only once of every number in the list, no duplicates (2 and 1) # Q: Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # A: Sets allow you to quickly and efficiently access data with no duplicates . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # Q: What data structures do you see? # A: dictionary for the key tracks, list for the key genre # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # Q: What can you change to make sure there are no duplicate producers? # A: use the set function # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Jack Antonoff&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # Q: How would add an additional genre to the dictionary, like electropop? # A: .update and append the genre electropop to list # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Jack Antonoff&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format tracks_dict = lover_album[&quot;tracks&quot;] track = 1 for song in tracks_dict.values(): print(&quot;Track &quot; + str(track) + &quot;: &quot; + str(song)) track += 1 . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Jack Antonoff&#39;} Track 1: I Forgot That You Existed Track 2: Cruel Summer Track 3: Lover Track 4: The Man Track 5: The Archer Track 6: I Think He Knows Track 7: Miss Americana &amp; The Heartbreak Prince Track 8: Paper Rings Track 9: Cornelia Street Track 10: Death By A Thousand Cuts Track 11: London Boy Track 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) Track 13: False God Track 14: You Need To Calm Down Track 15: Afterglow Track 16: Me! (feat. Brendon Urie of Panic! At The Disco) Track 17: It&#39;s Nice To Have A Friend Track 18: Daylight Track 19: All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # implementing crud &amp; can also add a spot for error check. if the input is invalid give them feedback on how to input corrrect format # . Taylor Swift . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary | . beatopia_album = { &quot;title&quot;: &quot;beatopia&quot;, &quot;artist&quot;: &quot;beebadoobee&quot;, &quot;year&quot;: 2022, &quot;genre&quot;: [&quot;Indie pop&quot;, &quot;Alternative rock&quot;, &quot;Dream pop&quot;], &quot;tracks&quot;: { 1: &quot;Beatopia Cultsong&quot;, 2: &quot;10:36&quot;, 3: &quot;Sunny day&quot;, 4: &quot;See you Soon&quot;, 5: &quot;Ripples&quot;, 6: &quot;the perfect pair&quot;, 7: &quot;broken cd&quot;, 8: &quot;Talk&quot;, 9: &quot;Lovesong&quot;, 10: &quot;Pictures of Us&quot;, 11: &quot;fairy song&quot;, 12: &quot;Don&#39;t get the deal&quot;, 13: &quot;tinkerbell is overreated feat. PinkPantheress&quot;, 14: &quot;You&#39;re here that&#39;s the thing &quot;, } } print(beatopia_album) . {&#39;title&#39;: &#39;beatopia&#39;, &#39;artist&#39;: &#39;beebadoobee&#39;, &#39;year&#39;: 2022, &#39;genre&#39;: [&#39;Indie pop&#39;, &#39;Alternative rock&#39;, &#39;Dream pop&#39;], &#39;tracks&#39;: {1: &#39;Beatopia Cultsong&#39;, 2: &#39;10:36&#39;, 3: &#39;Sunny day&#39;, 4: &#39;See you Soon&#39;, 5: &#39;Ripples&#39;, 6: &#39;the perfect pair&#39;, 7: &#39;broken cd&#39;, 8: &#39;Talk&#39;, 9: &#39;Lovesong&#39;, 10: &#39;Pictures of Us&#39;, 11: &#39;fairy song&#39;, 12: &#34;Don&#39;t get the deal&#34;, 13: &#39;tinkerbell is overreated feat. PinkPantheress&#39;, 14: &#34;You&#39;re here that&#39;s the thing &#34;}} . print(beatopia_album.get(&#39;genre&#39;)) . [&#39;Indie pop&#39;, &#39;Alternative rock&#39;, &#39;Dream pop&#39;] . tracks_dict = beatopia_album[&quot;tracks&quot;] track = 1 for song in tracks_dict.values(): print(&quot;Track &quot; + str(track) + &quot;: &quot; + str(song)) track += 1 . Track 1: Beatopia Cultsong Track 2: 10:36 Track 3: Sunny day Track 4: See you Soon Track 5: Ripples Track 6: the perfect pair Track 7: broken cd Track 8: Talk Track 9: Lovesong Track 10: Pictures of Us Track 11: fairy song Track 12: Don&#39;t get the deal Track 13: tinkerbell is overreated feat. PinkPantheress Track 14: You&#39;re here that&#39;s the thing .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "3/28/2023 CSUSM Blog",
            "content": "Intro . Failures don’t define you | CS degree very versatile, can apply to any field (Mr. Mort concurs 🔥) | My thoughts: I really liked how Ashley opened up the presentation talking about her failures and show despite them she was able to ultimately succeed as a researcher about to start her PhD at USD. For me personally I have a big fear of failure so when I don’t preform up to my expectations I question my skill and smartness. Hearing from a graduate student pursuing a rigorous academic field in Physics really set me more at ease knowing I don’t have to be perfect to succeed in academics too. I also definitely agree with how they stressed that CS is very versatile. This is one of the main reasons I want to pursue Computer Science. I have always loved math, physics, and biology so knowing that I can apply my programming skills to industries that work with these life/physical sciences makes me hopefuly that once I graduate with a degree I have the freedom to choose what niche to work in. | . ABOUT Cal State San Marcos . National leader in social mobility - highest turnover from college to career | Internships with local industries, so much opportunity in SD | 250 stairs wow! | Small school advantage → create and change classes to tailor to students | Cal State support system very good. Smaller campus, get to know faculty system well | My thoughts: Very cool that they are the NATIONAL leader in social mobility. I feel like one of the top purposes of a college is to prepare the student for life and careers AFTER college. I also appreciate the fact that they are a small campus which means smaller faculty to student ratio and a better support system. This is a very important factor that I look for in ideal colleges. | . Pathways . Chemistry | BioChem | Chemical engineering education | Applied Physics | Biological science | Computer Science, Computer Informations System, CyberSecurity, Computer Engineering | Applied mathematics, Algorithm Design | Software/Electrical Engineering | Mechnical Engineering | My thoughts: I am personally most interested in the Computer Science topics specifically machine learning and artifiical intelligence in the applications of robotics and analyzing biological data. I also have always loved math because of its logical thinking so I’m considered a minor in applied mathematics where I can dive into Calc 3, Linear Algebra, and more. | . CSUSM Clubs . Cybersecurity | Robotics | 3D printing | Women in STEM | Society of Women Engineers | Society of Physics students | National Society of Black Engineers | oSTEM -My thoughts: The Robotics and 3D printing clubs sound cool! I’m currently on a First Tech Challenge robotics team so I’m excited that I can continue with these extracurriculars in college. | . Internships . Can span from 4 weeks → 2 years | How to find internships (Campus events, Check emails, Google, Networking, Join Clubs) | Tips: Avoid unpaid, should get paid for dedication, Apply even if feel underqualified, Ask faculty members for help | My thoughts: Ashley gave some really good insights about internships. I didn’t know they could be elongated for that long of a time period. Currently the main way I have looked for internships is my emailing professors at local colleges like UCSD so it was nice to hear more ways I can look for them. | . Programs . Summer Scholars Program → full time paid $6000 | Quantum Bridge Program (admitted Cal Sate San Marcos) - learn about quantum info → paid $150 | . Research . Quantum | Meteor | Microplastics | Artihmetic Dyanmics in Math | Virtual Reality labs | Artificial intelligence My thoughts: I find the research in Artificial Intelligence and Virtual Reality very intriguing. I want to work on using machine learning algorithms like reinforcement or reward-based learning to train autonomous vehicles and optimize their speed and safety. Virtual Reality just sounds really cool because its like an intersection of computer science, art, and design and I like making these look aesthetic and appear on a screen. | . | Paying for College . Grant (goverment funding) vs Scholarship (privately funded) | Grants look at demographic status, grades, how much your parent’s make | Loans Subsidized: partially funded by government, prevent from deeper into debts | Unsubsidized: paying more than loan right after grace period | | Financial aid office website for CS specifically for loan/scholarship | John is Debt-free college student! Accomplishment! 💰 | My thoughts: I have never really known the difference between grants and scholarships so I’m glad I know the difference now. I didn’t know that debt could be that bad so I definitely need to look into that before I apply to colleges and take that into consideration. I really admire how John took the step to attend community college first and then transfer to Cal State! Debt-free woohoooo! | . Life after college . Private or public institution | Military, general autonomics | Internship at safari park (John) | Biomedical and environmental field | Teaching credential program | Graduate program → you get paid !! | Go to PhD. should not pay a dime | My thoughts: It was nice to get an insight of different career pathways after college. I think that I will either pursue a PhD if I like research or find a software engineering job in tech industry. One of my dreams it to work for Apple as a iOS developer since recently I’ve gotten some experienced in using Xcode to make and publish an app. I used the Storyboard to design the screens on the frontend and coded in Swift to integrate the backend so each button has a function. | . Bristle Bot activity . It was very fun to build a bristlebot from scratch. I didn’t know you could actually make this contraption out of a toothbrush head, batteries, tape, and whatnot. Grace and I were inspired by this hands-on engineering activity that Ashley was so kind to give us some of their supplies so we can use the same activity with the robotics class we are teaching on Friday!! Yippee!! . Overall Reflection + Connection to AP CSP . Overall, I really gained some valuable insights from Ashley and John’s visit from Cal State. I know now that I don’t have to get the perfect exam scores to succeed in the field I want to pursue (Computer science/Data Science). What matters is that I do my best to thoroughly understand the material I am given and do my best to apply it to my daily life. Especially since I am a rising senior and now is the time where I have to think about what major I want to pursue, what colleges I want to go to, and my future career goals, this talk was helpful for me to realize that my niche interests in Artificial Intelligence and Machine learning are support by clubs, research areas, and classes at colleges like CSUSM. Further, a big take away is that where you start does not define where you finish. My path will not be the same as anyone else in the room and no matter if I go to community college, a university, or pursue an internship I will just focus on learning more and more about what I am interested in. Connecting this to the AP CSP course at Del Norte. I’m going to start approaching hacks not as just an assignment I try to perfect, but as learning opportunities for me to dive deep into the topic we are learning and maybe do some extra exploration in how it applies to the topics I’m interested in. .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/28/CSUSM.html",
            "relUrl": "/2023/03/28/CSUSM.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Title",
            "content": "import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;skintypes&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() # metadata for database . Import . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) data = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = data app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() #SQLAlchemy object called here # This belongs in place where it runs once per project db.init_app(app) # app object called here . Database . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from random import randrange from datetime import date import os, base64 import json #from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into Python shell and follow along &#39;&#39;&#39; #Create new class to save information in a table class SkinType(db.Model): __tablename__ = &#39;skintypes&#39; # table name is plural, class name is singular # Define the SkinType schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _skin_type = db.Column(db.String(255), unique=False, nullable=False) _moisturizer = db.Column(db.String(255), unique=False, nullable=False) _face_cleanser = db.Column(db.String(255), unique=False, nullable=False) _serum = db.Column(db.String(255), unique=False, nullable=False) _sunscreen = db.Column(db.String(255), unique=False, nullable=False) # Defines a relationship between SkinType record and Notes table, one-to-many (one SkinType to many notes) #kosts = db.relationship(&quot;Kost&quot;, cascade=&#39;all, delete&#39;, backref=&#39;skintypes&#39;, lazy=True) #Constructor of a SkinType object, initializes the instance variables within object (self) def __init__(self, skin_type, moisturizer, face_cleanser, serum, sunscreen): self._skin_type = skin_type # variables with self prefix become part of the object, self._moisturizer = moisturizer self._face_cleanser = face_cleanser self._serum = serum self._sunscreen = sunscreen # a skin type getter method, extracts skin type from object @property def skin_type(self): return self._skin_type # a setter function, allows skin type to be updated after initial object creation @skin_type.setter def skin_type(self, skin_type): self._skin_type = skin_type # check if skin_type parameter matches _skin_type in object, return boolean def is_skin_type(self, skin_type): return self._skin_type == skin_type # a getter method, extracts moisturizer from object @property def moisturizer(self): return self._moisturizer # a setter function, allows moisturizer to be updated after initial object creation @moisturizer.setter def moisturizer(self, moisturizer): self._moisturizer = moisturizer # a getter method, extracts face cleanser from object @property def face_cleanser(self): return self._face_cleanser # a setter function, allows face_cleanser to be updated after initial object creation @face_cleanser.setter def face_cleanser(self, face_cleanser): self._face_cleanser = face_cleanser # a getter method, extracts serum from object @property def serum(self): return self._serum # a setter function, allows serum to be updated after initial object creation @serum.setter def serum(self, serum): self._serum = serum # a getter method, extracts sunscreen from object @property def sunscreen(self): return self._sunscreen # a setter function, allows sunscreen to be updated after initial object creation @sunscreen.setter def sunscreen(self, sunscreen): self._sunscreen = sunscreen # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from SkinType(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to skin_types table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;skin_type&quot;: self._skin_type, &quot;moisturizer&quot;: self._moisturizer, &quot;face_cleanser&quot;: self._face_cleanser, &quot;serum&quot;: self._serum, &quot;sunscreen&quot;: self._sunscreen, #&quot;kosts&quot;: [kost.read() for kost in self.kosts] } # CRUD update: updates skin_type and matching skin products # returns self def update(self, skin_type=&quot;&quot;, moisturizer=&quot;&quot;, face_cleanser=&quot;&quot;, serum=&quot;&quot;, sunscreen=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(skin_type) &gt; 0: self._skin_type = skin_type if len(moisturizer) &gt; 0: self._moisturizer = moisturizer if len(face_cleanser) &gt; 0: self._face_cleanser = face_cleanser if len(serum) &gt; 0: self._serum = serum if len(sunscreen) &gt; 0: self._sunscreen = sunscreen db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initSkinTypes(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.init_app(app) db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; st1 = SkinType(skin_type=&#39;oily&#39;, moisturizer=&#39;SkinCeuticals Daily Moisture&#39;, face_cleanser=&#39;CeraVe Acne Foaming Cream Cleanser&#39;, serum=&#39;The Ordinary Niacinamide 10% + Zinc 1% Serum&#39;, sunscreen=&#39;Regaliz Truderma Sunscreen Gel SPF 50&#39;) st2 = SkinType(skin_type=&#39;dry&#39;, moisturizer=&#39;Neutrogena Hydro Boost Gel Moisturizer&#39;, face_cleanser=&#39;Paula &#39;s Choice Perfectly Balanced Foaming Cleanser&#39;, serum=&#39;Simple Booster Serum - 3% Hyaluronic Acid&#39;, sunscreen=&#39;Laneige Watery Sun Cream&#39;) st3 = SkinType(skin_type=&#39;sensitive&#39;, moisturizer=&#39;Plum Hello Aloe Caring Day Moisturizer&#39;, face_cleanser=&#39;Bioderma Sensibio Gentle Soothing Micellar Cleansing Foaming Gel&#39;, serum=&#39;Simple Booster Serum - 10% Niacinamide&#39;, sunscreen=&#39;Elta MD Skin Care UV Glow SPF 36&#39;) st4 = SkinType(skin_type=&#39;normal&#39;, moisturizer=&#39;Good Vibes Gel Moisturizer&#39;, face_cleanser=&#39;La Roche-Posay Toleriane Hydrating Gentle Cleanser&#39;, serum=&#39;Jovees Herbal Vitamin C Face Serum&#39;, sunscreen=&#39;Cetaphil Daily Oil Free Facial Moisturizer with SPF 35&#39;) skintypes = [st1, st2, st3, st4] &quot;&quot;&quot;Builds sample skin type/note(s) data&quot;&quot;&quot; for skintype in skintypes: try: &#39;&#39;&#39;add a few 1 to 4 notes per skin type&#39;&#39;&#39; for num in range(randrange(1, 4)): note = &quot;#### &quot; + skintype.skin_type + &quot; note &quot; + str(num) + &quot;. n Generated by test data.&quot; #skintype.kosts.append(Kost(id=skintype.id, note=note, image=&#39;ncs_logo.png&#39;)) #&#39;&#39;&#39;add skin type/kost data to table&#39;&#39;&#39; skintype.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {skintype.skin_type}&quot;) initSkinTypes() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM skintypes&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . OperationalError Traceback (most recent call last) /home/emma/emma_blog-3/_notebooks/database.ipynb Cell 8 in &lt;cell line: 24&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; cursor.close() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; read() /home/emma/emma_blog-3/_notebooks/database.ipynb Cell 8 in read() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; cursor = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; # Execute a SELECT statement to retrieve data from a table &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; results = cursor.execute(&#39;SELECT * FROM skintypes&#39;).fetchall() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # Print the results &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/database.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; if len(results) == 0: OperationalError: no such table: skintypes .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/21/database.html",
            "relUrl": "/2023/03/21/database.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. Space complexity, on the other hand, refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. It is also usually expressed using big O notation, which provides an upper bound on the amount of memory used by the algorithm as the size of the input increases. . Big O Notation . Constant Time O(1) | Linear Time O(n) | Quadratic Time O(n^2) | Logarithmic Time O(logn) | Exponential time (O(2^n)) | . numbers = list(range(1000)) . Constant Time O(1) . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) . Linear Time O(n) . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Quadratic Time O(n^2) . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Logarithmic Time O(logn) . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . import time def constant_time(numbers, target): print(numbers[target]) start_time = time.time() constant_time(numbers, 263) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 263 Time taken: 0.00010228157043457031 seconds .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/21/DS-space_time_complexity.html",
            "relUrl": "/2023/03/21/DS-space_time_complexity.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . A database schema is a blueprint that defines the structure of a database. It describes the organization and interrelationships among the various data elements or tables that make up the database. . What is the purpose of identity Column in SQL database? | . The purpose of an identity column is to provide a unique identifier for each row in the table, without requiring the user to manually specify a value for that column. . What is the purpose of a primary key in SQL database? | . A primary key is a column or set of columns that uniquely identifies each row in a table. . What are the Data Types in SQL table? booleans, integers, strings, blog, imperative programming, OOP | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | . A connection object is an object that represents a connection to a database. It is used to establish and manage a connection to a database and allows the programmer to execute commands and retrieve data from the database. . Same for cursor object? | . A cursor object is an object that provides a way to iterate over the rows of a result set returned by a SQL query. It allows the programmer to fetch data from a database row by row, and perform operations on each row as it is retrieved. . Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | . The attributes that are in the conn object include special variables, function variables, class variables, in_transaction, isolation_level, row_factory, and total_changes. The attributes taht are in the cursor object include special variables, function variables, arraysize, connection, description, lastrowid, row_factory, and rowcount. . Is &quot;results&quot; an object? How do you know? | . Yes it is an object because it is set equal to cursor.execute() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . OperationalError Traceback (most recent call last) /home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb Cell 6 in &lt;cell line: 24&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; cursor.close() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; read() /home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb Cell 6 in read() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; cursor = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; # Execute a SELECT statement to retrieve data from a table &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # Print the results &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; if len(results) == 0: OperationalError: no such table: users . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? | . In the create function of 2.4a the function uses SQLite database to take in the data that the user inputs to create the new users. The create function of 2.4b uses SQLAlchemy to create the new users. 2.4a function can be better used for more simple projects where as 2.4b function can be used for more complex projects. . Explain purpose of SQL INSERT. Is this the same as User init? | . The SQL INSERT statement is used to insert new rows or records into a database table. The User init method is used to create a new user record in the database. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | . Checks to make sure the length of the new password is at least 2 characters. If it is not then the code presumes that they were hacked . Explain try/except, when would except occur? | . Try/except is used for the errors that could occur. Except would occur if there is an error that did not pass through the try block of code. . What code seems to be repeated in each of these examples to point, why is it repeated? | . Try/except is repeated. This is repeated because there are many different places where checking to ensure everything is inputted correctly is necessary. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | . DELETE can be dangerous in the case that you delete all of your data and do not have it anywhere else. . What is the &quot;f&quot; and {uid} do? | . f is used to embed expressions inside of string literals. The {uid} is used to input the user id that is being used in the code. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | . The menu repeats because it is recursive. . Could you refactor this menu? Make it work with a List? | . Yes you could make it a list with c, r, u, d, s . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Perform Jupyter &#39;Run All&#39; prior to starting menu . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. . In this implementation, do you see procedural abstraction? Yes, each function is an example of procedural abstraction. You can call these functions later in the program to execute a segment of code. One example is the &quot;create&quot; function, when called, this function passes in data for a new row in the data table and uses sqlite to add the data to the users table. | . | In 2.4a or 2.4b lecture. Do you see data abstraction? Complement this with Debugging example. Data abstraction is all over this program, each function of CRUD interacts with data, one example is the &quot;create&quot; function. This example shows me debugging the create function, I have a breakpoint right where the function adds the data I just inputted to the data table. | . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . Object Orientation vs Imperative . Object-oriented programming (OOP) and imperative programming are both popular programming paradigms, each with its own advantages and disadvantages. Here are some key differences between the two: . Focus: Imperative programming focuses on how to achieve a specific task, while OOP focuses on the creation and manipulation of objects. . | Data Structures: In imperative programming, data structures are often simple arrays or structures, while in OOP, they are typically more complex objects with their own attributes and methods. . | Inheritance: In OOP, objects can inherit properties and methods from other objects, allowing for code reuse and increased modularity. In imperative programming, code is often duplicated or reused by copying and pasting. . | . Overall, OOP is often seen as more organized, modular, and reusable than imperative programming. However, imperative programming can be more efficient for certain tasks, particularly those that involve a lot of low-level manipulation of data. Ultimately, the choice between the two will depend on the specific needs of the project and the preferences of the programmer. . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Score(db.Model): __tablename__ = &#39;scores&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid): self._name = name # variables with self prefix become part of the object, self._uid = uid # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . from random import randrange def initData(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.init_app(app) db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Score(name=&#39;Emma&#39;, uid=&#39;1234566&#39;) u2 = Score(name=&#39;Emily&#39;, uid=&#39;1123230&#39;) u3 = Score(name=&#39;Alan&#39;, uid=&#39;11212e0&#39;) u4 = Score(name=&#39;Xin&#39;, uid=&#39;1023423&#39;) u5 = Score(name=&#39;Yeung&#39;, uid=&#39;1123120&#39;) users = [u1, u2, u3, u4, u5] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add a few 1 to 4 notes per user&#39;&#39;&#39; for num in range(randrange(1, 4)): note = &quot;#### &quot; + user.name + &quot; note &quot; + str(num) + &quot;. n Generated by test data.&quot; &#39;&#39;&#39;add user/post data to table&#39;&#39;&#39; user.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {user.uid}&quot;) initData() . NameError Traceback (most recent call last) /home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb Cell 18 in &lt;cell line: 31&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; db.session.remove() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; print(f&#34;Records exist, duplicate email, or error: {user.uid}&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; initData() /home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb Cell 18 in initData() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def initData(): -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; with app.app_context(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; &#34;&#34;&#34;Create database and tables&#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/emma/emma_blog-3/_notebooks/2023-03-16-AP-unit2-4b.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; db.init_app(app) NameError: name &#39;app&#39; is not defined . .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | This has been used in other notebooks, and allows for a database to creates without having seperate api and python files. Like in our flask for our CPT, we needed to have one file to create an API and the other to create the SQL database. . SQLAlchemy object | Allows for communication between python and databased, which is needed for CRUD. We also used this in our CPT when we iterated through databases, and displayed (read) from frontend as well. . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose:defines the object that we will be using CRUD operations on - db.Model inheritance: we are able to organize our objects into a database, and display them in our sqlite.db folder | init method: allows class to initialize object&#39;s attributes | @property: creates and returns object, @.setter: sets column for sqlite.db table- additional methods: create (creates new object(reads existing database), update(changes object in existing database), delete methods(removes object from database)&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): #defining the template for users, used to create Objects #db.Model is inheritance, allows class Users to use database attributes and methods __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing from datetime import date def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 11, &#39;name&#39;: &#39;claire&#39;, &#39;uid&#39;: &#39;clairezhao&#39;, &#39;dob&#39;: &#39;02-20-2007&#39;, &#39;age&#39;: 16} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;emma shen&#39;, &#39;uid&#39;: &#39;exs&#39;, &#39;dob&#39;: &#39;07-29-2006&#39;, &#39;age&#39;: 16}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;xin tian&#39;, &#39;uid&#39;: &#39;xin tian&#39;, &#39;dob&#39;: &#39;02-22-1983&#39;, &#39;age&#39;: 40}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;Emma &#39;, &#39;uid&#39;: &#39;emmaxshen&#39;, &#39;dob&#39;: &#39;07-20-2006&#39;, &#39;age&#39;: 16}, {&#39;id&#39;: 10, &#39;name&#39;: &#39;Alan&#39;, &#39;uid&#39;: &#39;alanshen&#39;, &#39;dob&#39;: &#39;02-23-2001&#39;, &#39;age&#39;: 22}, {&#39;id&#39;: 11, &#39;name&#39;: &#39;claire&#39;, &#39;uid&#39;: &#39;clairezhao&#39;, &#39;dob&#39;: &#39;02-20-2007&#39;, &#39;age&#39;: 16}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . Delete User . def delete(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) #if can&#39;t find user in database, print no user is found if user is None: print(f&quot;No user found with uid {uid}&quot;) return #creates new application context to preform delete functionality with app.app_context(): #delete user try: user.delete() print(f&quot;User {uid} deleted &quot;) #if operation not preformed (error) except: print(&quot;Unknown error occured during deletion&quot;) delete() . User clairezhao deleted . Update User . def update(): uid = input(&quot;Enter your username:&quot;) user = find_by_uid(uid) if user is None: print(f&quot;User {uid} is not found&quot;) return print(user) new_name = input(&quot;What is your new name: &quot;) new_uid = input(&quot;What is your new uid: &quot;) new_password = input(&quot;What is your new password: &quot;) with app.app_context(): try: user.update(new_name, new_uid, new_password) print(f&quot;User {uid} has been updated&quot;) except: print(f&quot;There was a problem in updating user {uid}&quot;) update() . {&#34;id&#34;: 5, &#34;name&#34;: &#34;Indiana Jones&#34;, &#34;uid&#34;: &#34;indi&#34;, &#34;dob&#34;: &#34;10-21-1920&#34;, &#34;age&#34;: 102} User indi has been updated . &lt;/div&gt; | .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Sections 9-11 Hacks",
            "content": "(1) Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Input In [2] if (isCold or isRaining) { ^ SyntaxError: invalid syntax . (2) Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . import random random_number = [] i = 1 while i &lt;= 4: random_number.append(random.randint(1,10)) i = i +1 def sort(random_number): for index in range(1,len(random_number)): value = random_number[index] i = index - 1 while i &gt;= 0: if value &lt; random_number[i]: random_number[i+1] = random_number[i] random_number[i] = value i = i - 1 else: break sort(random_number) print(random_number) print(&quot;Max Score:&quot;, random_number[len(random_number)-1]) . [4, 4, 6, 10] Max Score: 10 . (3) Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: If (can_moveForward) Move_Forward Else (can_moveRight) { Rotate_Right Move_Forward } . (4) Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See image in issue . (5) Explain thorughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process goes through until the number 69 is found. . (6) Make a diagram explaining how you found the list (not tree, include equation) . see image in issue . (7) Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . (8) Explain why Binary Search is more efficient than Sequential Search . Binary search is quicker than sequential search because binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . (9) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I would be searching for 36. First, I would select the middle element ((1+5)/2 = 3, and since 16 &lt; 36, I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . See issue for image . SUMMARY . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. | Sequential Search (Inefficient search): compare each number to the number you want to find until you get to the number you want to find | Binary Search (Efficient search): repeats the process of finding a median and evaluating | Boolean Expressions: expression that evaluates to either true or false | Truth Tables: displays the logical operations on input signals in a table format, identifies all possible input combinations and the output for each | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2023/03/09/section9and11.html",
            "relUrl": "/csp/2023/03/09/section9and11.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Individual CPT Submission Plan",
            "content": "OUR TEAM SIZE PROJECT . Problem: 60% of Americans feel uncomfortable about their skin and don’t know how to treat it . Solution: CSP (Customized Skin Products) --&gt; A fast &amp; free website that caters to our user’s specific skin type to recommend quality skin care products &amp; services that range from a face cleanser to a professional dermatologist in their area . Purpose: . Help people of all ages to gain a thorough understanding of their own skin and how to treat it | Develop a skincare routine to ensure long-term maintenance of clear and healthy skin | Uplift inner and outer confidence! Looking good and feeling good to feel comfortable engaging with those around us and showing our personality to our full potential | Audience: Pre-tween kids to young adults dealing with pubescent &amp; stress blemeches. Most vulnerable to future self-esteem issues stemming from skin problems . MY INDIVIDUAL CONTRIBUTION: Based on user-input from skin-type quiz, generate top 3 recommendations for a face cleanser product . HOW I PLAN TO FULFILL THE CB RUBRIC . Row 1: Program Purpose &amp; Function . In the video: I will pretend I am a user and fill out the multiple choice skin-type quiz (input). Once I press generate results, it will show the output which is an in-depth evaluation of my skin type and how to treat it. Then, when I press on the &quot;face cleansers&quot; tab, it will show 3 products personally recommended. All of this together will show program functionality . | In the written response (3A): I will clearly explain the overall purpose AND function. . | Function: CSP (Customized Skin Products) --&gt; A fast &amp; free website that caters to user’s specific skin type to produce in-depth evaluation of how to improve and recommend quality skin care product. . Purpose: Help teenagers to gain a thorough understanding of their own skin and how to treat it. Uplifting inner and outer confidence so that they feel comfortable engaging with those around them and showing their personality to their full potential. . Clarify input and output: input (user-inputted skin-type quiz) &amp; output (skin-type evaluation + face cleanser recommendation) . Row 2: Data Abstraction . In the written response (3B): . Code segment shows how data is being stored in a list --&gt; I plan to create an array with all the quiz questions and loop through them | Code segment shows the data in this same list being used as part of fulfilling the program’s purpose --&gt; in recommendation function, will show that I am looping through questions and if user&#39;s answer matches with a product&#39;s assigned answer, add one point to that recommended product. | Identifies name of variable representing list being used --&gt; quizQs | Describes what the data contained in this list is representing in the program --&gt; data contained in list represents questions that user will be asked to determine what their skin-type is and what face cleanser recommendation they should recieve | Row 3: Managing Complexity . In the written response (3B): . Explains how list manages complexity + why vital to program: If program were to run without the &quot;quizQs&quot; list, it would make everything very inefficient because I would have to make new individual variables to store each question. By using &quot;quizQs&quot;, I can consolidate all that information in one place, making it easier to use and keep track of. | Row 4: Procedural Abstraction . In the written response (3C): . Code segment that shows student-developed procedure with at least one parameter that has an effeect on the functionality of the procedure: I will create a recommendation function called &quot;faceCleanserRec&quot; which will take user&#39;s input to each question and +1 to the corresponding variable. Then whichever variable is the max will be printed as the recommended product. | Code segment where student-developed procedure is being called: I will show place where &quot;faceCleanserRec&quot; will be called | Describes identified procedure does and how contribute to overall functionality of the program: This recommendation function contributes to my project&#39;s key feature which is giving custom product recommendation. Without this backend code, when the user submits their quiz they will recieve no result | Row 5: Algorithm Implementation . In the written response (3C): . Code Segment in student-developed procedure that shows: | sequencing: Code runs in order from line at top to line at bottom (starts with list of questions --&gt; recommendation function to output face cleanser) | iteration: iterates through list of questions | selection: if/else statements to check which variable is the max to output what product to recommend | . Explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it --&gt; will walk through entire algorithm line by line | Row 6: Testing . In the written response (3D): . 1st call: question asks &quot;Would you describe your skin as oily, dry, or a combination of both?&quot; &amp; user chooses answer choice &quot;oily&quot; 2nd call: question asks &quot;What is your age?&quot; &amp; user chooses age group 14 - 17 years old . 1st condition: if user chooses oily, 1 point is added to variable called &quot;CetaPhil&quot; which is a face cleansing brand that is good for oily skin 2nd call: if user chooses answer option 14-17 years old, 1 point is added to variable called &quot;humanAcne&quot; which is a face washer good for teenage acne . 1st result: One of top 3 face cleanser recommendations will be one from CetaPhil 2nd call: one of top 3 face cleanser recommendations will be for teenage acne .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2023/03/09/cptindividual.html",
            "relUrl": "/jupyter/2023/03/09/cptindividual.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . ls, cd, pwd . What are the command you use in Windows terminal to access files? | . dir. ren, chdir . What are some of the major differences? | . Windows vs Linux :directory listing (Windows - dir, Linux - ls), rename a file (Windows - ren, Linux - mv), returns current directory location (Windows - chdir, Linux - pwd), both change to current directory is cd Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . It helps to identify the location of the image file on a computer or server so that you can open, edit, and display it. A path includes the name of the directory/folder and anysubdirectories or subfolders that the file is located in. This information is important because it helps to locate the image file and retrieve it when needed. . How does the meta data source and label relate to Unit 5 topics? | . Unit 5 is where students learn about the development of computer programs that process and analyze data. This includes working with text, images, and video, and understanding how to access and manipulate that data. When it comes to images, metadata refers to the information embedded in an image file, like the date/time the image was taken, the camera settings used to capture the image, and the location where the image was taken. This data can be accessed and analyzed using programming techniques. Labeling is when you assign descriptive tags/labels to images to help identify and classify them. This is typically used in ML and AI where image recognition can classify and identity different objects. Like a robot being able to tell the difference between a cat and a dog. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . IPython (Interactive Python) is a command shell for interactive computing. It is now known as Jupyter Notebook. Jupyter Notebook is a preferable platform for pandas and images because it is a way to put data, code, visualizations, and documentation all in one single notebook. You can store massive amounts of metadata from images and format it into pandas dataframe to later change it . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Emma Shen&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smileyface.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS. . How is Base64 similar or different to Binary and Hexadecimal? | . Binary is most basic representation of data using only 0 and 1 to represent each bit of information while Hexadecimal is a base-16 numbering system that uses 16 digits (0-9 and A-f) to represent a byte of information. They are both numerical systems to represent data in computers. However, Base64 is a method for encoding binary data using 64 characters that are safe for use in email and other text-based communication channels. It has the most variety in being able to store numbers, letters, characters, AND symbols. It works by breaking the input data into blocks of three bytes, and then encoding each block as four characters from a pre-defined set of 64 characters. The resulting encoded text can then be sent as ASCII text. . Translate first 3 letters of your name to Base64: | . emm --&gt; ZW1t . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . I see buffering/loading screens everywhere on my phone and computer. To make up for loading time and to process the input and prepare for display of output, buffering screens are important to keep user entertained and know that request is still processing. Below are two ways that Synergy StudentVue uses buffering . . From your consumer experience, what effects have you experienced from buffering? | . The more data is being loaded the longer the buffer is . How do these effects apply to images? | . Larger images take more time to load. For lossy files they take a short time because the image is compressed to load faster while for lossless files they save original data and preserve the quality which causes it to load for longer time . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Manipulate images to different colors / filters . Does this code seem like a series of steps are being performed? | . Yes like imperative programming sequence . Describe Grey Scale algorithm in English or Pseudo code?&lt;/li&gt; &lt;/ul&gt; Initialize a new image object with the same dimensions as the input image. | For each pixel in the input image:a. Retrieve the red, green, and blue values of the pixel. b. Calculate the average of the red, green, and blue values. c. Set the red, green, and blue values of the pixel in the new image object to the average value. | Return the new image object.&lt;/b&gt; | Describe scale image? What is before and after on pixels in three images? --&gt; | . Scaling an image means changing its size, either making it larger or smaller. When an image is scaled, each pixel in the image is adjusted to a new position and/or color value, in order to create a new image with the desired size.&lt;/p&gt; Before scaling, each pixel in the original image has a specific position (x,y) and color value (RGB). . After scaling, the position and color value of each pixel in the scaled image will be different from its position and color value in the original image. &lt;/b&gt; . Is scale image a type of compression? If so, line it up with College Board terms described? --&gt; &lt;/li&gt; &lt;/ul&gt; Scaling an image can be considered a type of compression, as it reduces the amount of data required to represent the image by changing its size. . For College Board AP CSP, it describes compression as &quot;reducing the number of bits used to represent data in a file.&quot; This usually involves using techniques such as lossless compression algorithms, which exploit redundancy in the data to reduce its size without losing any information, or lossy compression algorithms, which selectively discard some information in order to achieve greater compression. . Scaling an image, on the other hand, only changes the size and resolution of the image, without necessarily reducing the number of bits used to represent the data in the file. &lt;/b&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Emma Shen&quot;, &#39;label&#39;: &quot;pretty&quot;, &#39;file&#39;: &quot;mountain.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- pretty Emma Shen PNG RGB Original size: (1048, 796) Scaled size: (320, 243) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Emma Shen&quot;, &#39;label&#39;: &quot;pretty&quot;, &#39;file&#39;: &quot;mountain.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- pretty Emma Shen mountain.png PNG RGB Original size: (1048, 796) Scaled size: (320, 243) -- scaled image -- . grey image . . Hacks!!! . 1. College Board Practice . Data Compression Quiz 3/3 . Extracting info from Data Quiz 5/6 . 5 Mistake . Explanation: The data is determined only by image recognition by a camera. Thus, the number of bicyles passed on a particular day can be recorded (Answer Choice D). However, the calculation of a AVERAGE speed would need metadata that includes the cars distance and time. . Using Programs with Data Quiz 5/6 . 4 Mistake . Explanation: The key to these types of questions is that I need to select TWO correct answers. Here, I chose Answer C which is wrong because this sequence of steps does not remove any entries with an unknown year, so the entry in the first row of the spreadsheet will have a year value of -1. I should&#39;ve chosen Answer D instead because sorting by year will sort the spreadsheet on column C from least to greatest. Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. . Binary Quiz . 2. Lossy vs Lossless Image . Lossless - compression in which the image is reduced without any quality loss Ex. A logo that can be produced in multiple places in the website and sizes | . Lossy - a process that removes some of the data from your image file, reducing the overall file size. This process is irreversible, meaning that the file information will be removed permanently. | Ex. Sending an image file to your friend over email and it asks you whether you want to send as small, medium, large, or actual size. In this situation, you can reduce the size/quality of the picture to make the file send faster. . . 3. Programming paradigm . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. . | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. . | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. . | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. . | . import numpy as np from PIL import Image # Load the image image = Image.open(&#39;images/bat.png&#39;) # Add a title to the image image.info[&#39;Title&#39;] = &#39;Redscaled&#39; # Convert the image to a NumPy array img_array = np.asarray(image) # Convert the array to binary representation binary_pixels = np.unpackbits(img_array, axis=-1) # Convert the binary representation to hexadecimal hex_pixels = np.apply_along_axis(lambda x: hex(int(&#39;&#39;.join(map(str, x)), 2))[2:].zfill(2), -1, binary_pixels) # Display the binary and hexadecimal pixels #print(&quot;Binary pixels: n&quot;, binary_pixels) #print(&quot;Hexadecimal pixels: n&quot;, hex_pixels) # Create a copy of the array red_img = np.copy(img_array) # Set the green and blue channels to 0, leaving only the red channel red_img[:, :, 1] = 0 red_img[:, :, 2] = 0 # Convert the NumPy array back to an image red_image = Image.fromarray(red_img) # Save the red-scale image red_image.save(&#39;images/bat.png&#39;) # Resize the image to half its original size resized_image = red_image.resize((red_image.width // 2, red_image.height // 2)) print(image.info) # Show the resized image resized_image.show() . {&#39;srgb&#39;: 0, &#39;gamma&#39;: 0.45455, &#39;dpi&#39;: (143.99259999999998, 143.99259999999998), &#39;Title&#39;: &#39;Redscaled&#39;} . &lt;/div&gt; | . | .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False | . Answer: 1000(B) = 8(D) =! 90(D) --&gt; B. False . 2. 10(D) ≠ 0110(B) . A. True | B. False | . Answer: 0110(B) =! 6(D) --&gt; A. True . 3. 56(D) ≥ 111000(B) . A. True | B. False | . Answer: 111000(B) = 56(D) --&gt; 56(D) &gt;= 56(D) --&gt; A. True . 3. 99(D) &lt; 1110011(B) . A. True | B. False | . Answer: 1110011(B) = 115(D) --&gt; 99(D) &lt; 115(D) --&gt; A. True . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 or 1 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 != 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &lt;= y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z + y) . False True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer explanation: . result = 75 . 75 &lt; 80 --&gt; &quot;Please schedule a retake&quot; . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | Answer: 2 . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | Answer: 2. If-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Answer: 1. If statement . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? --&gt; True print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) elif i == &quot;wildebeest&quot;: print(&quot;Fun Fact: Wildebeests live in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion tiger Fun Fact: Wildebeests live in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . import selenium from selenium import webdriver from selenium.webdriver.common.keys import Keys dict = { &quot;Chicken Alfredo&quot;: [&#39;Chicken&#39;, 60], &quot;Cheese Quesadilla&quot;: [&#39;None&#39;, 10], &quot;Beef Wellington&quot;: [&#39;Beef&#39;, 150] } #for each key, value pair in the dictionary for key, values in dict.items(): count = 0 for value in values: #isinstance checks if value is a string if isinstance(value, (str)) == True: if value == &quot;None&quot;: count += 1 #isinstance checks if value is an integer elif isinstance(value, (int)) == True: if value &lt;= 30: count += 1 if count == 2: print(key) break . Cheese Quesadilla . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . Lesson Takeaways: . For Binary to Decimal conversions and vice versa, I need to remember that each decimal place is to the power of 2 | if statement and if-else statements are different: if statements only preform if statement is met, if-else goes through code no matter is statement is met | I can use dictionaries and nested if statements to create a program that solves real-world problems | Sketching out a flow chart in psuedo code allows me to clear my algorithm logic. | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2023/03/06/u3s5-6lol.html",
            "relUrl": "/csp/2023/03/06/u3s5-6lol.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Error Testing",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the menu to the user print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? --&gt; type of variable #prompt the user multiple times, total price question = &quot;yes&quot; while question == &quot;yes&quot;: question = input(&quot;If would like to order an item type &#39;yes&#39;, if not type &#39;no&quot;).lower() if question == &quot;no&quot;: break else: item = input(&quot;Please select an item from the menu&quot;).lower() if item == &quot;burger&quot;: total +=3.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;fries&quot;: total +=1.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;drink&quot;: total +=0.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) else: print(f&quot;You inputted {item}, this is not an item on our menu. Please select again!&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 You ordered a burger, your total is now $ 3.99 You ordered a drink, your total is now $ 4.98 You ordered a fries, your total is now $ 6.97 You inputted apple, this is not an item on our menu. Please select again .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week7/2023/02/25/.burger.html",
            "relUrl": "/jupyter/week7/2023/02/25/.burger.html",
            "date": " • Feb 25, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/02/25/.14-3.15.html",
            "relUrl": "/2023/02/25/.14-3.15.html",
            "date": " • Feb 25, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Individual Plan for CPT",
            "content": "OUR TEAM SIZE PROJECT . Problem: 60% of Americans feel uncomfortable about their skin and don’t know how to treat it . Solution: CSP (Customized Skin Products) –&gt; A fast &amp; free website that caters to our user’s specific skin type to recommend quality skin care products &amp; services that range from a face cleanser to a professional dermatologist in their area . Purpose: . Help people of all ages to gain a thorough understanding of their own skin and how to treat it | Develop a skincare routine to ensure long-term maintenance of clear and healthy skin | Uplift inner and outer confidence! Looking good and feeling good to feel comfortable engaging with those around us and showing our personality to our full potential | Audience: Pre-tween kids to young adults dealing with pubescent &amp; stress blemeches. Most vulnerable to future self-esteem issues stemming from skin problems . MY INDIVIDUAL CONTRIBUTION: Based on user-input from skin-type quiz, generate top 3 recommendations for a face cleanser product . HOW I PLAN TO FULFILL THE CB RUBRIC . Row 1: Program Purpose &amp; Function . In the video: I will pretend I am a user and fill out the multiple choice skin-type quiz (input). Once I press generate results, it will show the output which is an in-depth evaluation of my skin type and how to treat it. Then, when I press on the “face cleansers” tab, it will show 3 products personally recommended. All of this together will show program functionality . | In the written response (3A): I will clearly explain the overall purpose AND function. . | Function: CSP (Customized Skin Products) –&gt; A fast &amp; free website that caters to user’s specific skin type to produce in-depth evaluation of how to improve and recommend quality skin care product. . Purpose: Help teenagers to gain a thorough understanding of their own skin and how to treat it. Uplifting inner and outer confidence so that they feel comfortable engaging with those around them and showing their personality to their full potential. . Clarify input and output: input (user-inputted skin-type quiz) &amp; output (skin-type evaluation + face cleanser recommendation) . Row 2: Data Abstraction . In the written response (3B): . Code segment shows how data is being stored in a list –&gt; I plan to create an array with all the quiz questions and loop through them | Code segment shows the data in this same list being used as part of fulfilling the program’s purpose –&gt; in recommendation function, will show that I am looping through questions and if user’s answer matches with a product’s assigned answer, add one point to that recommended product. | Identifies name of variable representing list being used –&gt; quizQs | Describes what the data contained in this list is representing in the program –&gt; data contained in list represents questions that user will be asked to determine what their skin-type is and what face cleanser recommendation they should recieve | Row 3: Managing Complexity . In the written response (3B): . Explains how list manages complexity + why vital to program: If program were to run without the “quizQs” list, it would make everything very inefficient because I would have to make new individual variables to store each question. By using “quizQs”, I can consolidate all that information in one place, making it easier to use and keep track of. | Row 4: Procedural Abstraction . In the written response (3C): . Code segment that shows student-developed procedure with at least one parameter that has an effeect on the functionality of the procedure: I will create a recommendation function called “faceCleanserRec” which will take user’s input to each question and +1 to the corresponding variable. Then whichever variable is the max will be printed as the recommended product. | Code segment where student-developed procedure is being called: I will show place where “faceCleanserRec” will be called | Describes identified procedure does and how contribute to overall functionality of the program: This recommendation function contributes to my project’s key feature which is giving custom product recommendation. Without this backend code, when the user submits their quiz they will recieve no result | Row 5: Algorithm Implementation . In the written response (3C): . Code Segment in student-developed procedure that shows: sequencing: Code runs in order from line at top to line at bottom (starts with list of questions –&gt; recommendation function to output face cleanser) | iteration: iterates through list of questions | selection: if/else statements to check which variable is the max to output what product to recommend | . | Explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it –&gt; will walk through entire algorithm line by line | Row 6: Testing . In the written response (3D): . 1st call: question asks “Would you describe your skin as oily, dry, or a combination of both?” &amp; user chooses answer choice “oily” 2nd call: question asks “What is your age?” &amp; user chooses age group 14 - 17 years old . 1st condition: if user chooses oily, 1 point is added to variable called “CetaPhil” which is a face cleansing brand that is good for oily skin 2nd call: if user chooses answer option 14-17 years old, 1 point is added to variable called “humanAcne” which is a face washer good for teenage acne . 1st result: One of top 3 face cleanser recommendations will be one from CetaPhil 2nd call: one of top 3 face cleanser recommendations will be for teenage acne .",
            "url": "https://e-shen2022.github.io/emma_blog/cpt/2023/01/30/individualcpt.html",
            "relUrl": "/cpt/2023/01/30/individualcpt.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Individual CPT Submission Plan",
            "content": "OUR TEAM SIZE PROJECT . Problem: 60% of Americans feel uncomfortable about their skin and don’t know how to treat it . Solution: CSP (Customized Skin Products) --&gt; A fast &amp; free website that caters to our user’s specific skin type to recommend quality skin care products &amp; services that range from a face cleanser to a professional dermatologist in their area . Purpose: . Help people of all ages to gain a thorough understanding of their own skin and how to treat it | Develop a skincare routine to ensure long-term maintenance of clear and healthy skin | Uplift inner and outer confidence! Looking good and feeling good to feel comfortable engaging with those around us and showing our personality to our full potential | Audience: Pre-tween kids to young adults dealing with pubescent &amp; stress blemeches. Most vulnerable to future self-esteem issues stemming from skin problems . MY INDIVIDUAL CONTRIBUTION: Based on user-input from skin-type quiz, generate top 3 recommendations for a face cleanser product . HOW I PLAN TO FULFILL THE CB RUBRIC . Row 1: Program Purpose &amp; Function . In the video: I will pretend I am a user and fill out the multiple choice skin-type quiz (input). Once I press generate results, it will show the output which is an in-depth evaluation of my skin type and how to treat it. Then, when I press on the &quot;face cleansers&quot; tab, it will show 3 products personally recommended. All of this together will show program functionality . | In the written response (3A): I will clearly explain the overall purpose AND function. . | Function: CSP (Customized Skin Products) --&gt; A fast &amp; free website that caters to user’s specific skin type to produce in-depth evaluation of how to improve and recommend quality skin care product. . Purpose: Help teenagers to gain a thorough understanding of their own skin and how to treat it. Uplifting inner and outer confidence so that they feel comfortable engaging with those around them and showing their personality to their full potential. . Clarify input and output: input (user-inputted skin-type quiz) &amp; output (skin-type evaluation + face cleanser recommendation) . Row 2: Data Abstraction . In the written response (3B): . Code segment shows how data is being stored in a list --&gt; I plan to create an array with all the quiz questions and loop through them | Code segment shows the data in this same list being used as part of fulfilling the program’s purpose --&gt; in recommendation function, will show that I am looping through questions and if user&#39;s answer matches with a product&#39;s assigned answer, add one point to that recommended product. | Identifies name of variable representing list being used --&gt; quizQs | Describes what the data contained in this list is representing in the program --&gt; data contained in list represents questions that user will be asked to determine what their skin-type is and what face cleanser recommendation they should recieve | Row 3: Managing Complexity . In the written response (3B): . Explains how list manages complexity + why vital to program: If program were to run without the &quot;quizQs&quot; list, it would make everything very inefficient because I would have to make new individual variables to store each question. By using &quot;quizQs&quot;, I can consolidate all that information in one place, making it easier to use and keep track of. | Row 4: Procedural Abstraction . In the written response (3C): . Code segment that shows student-developed procedure with at least one parameter that has an effeect on the functionality of the procedure: I will create a recommendation function called &quot;faceCleanserRec&quot; which will take user&#39;s input to each question and +1 to the corresponding variable. Then whichever variable is the max will be printed as the recommended product. | Code segment where student-developed procedure is being called: I will show place where &quot;faceCleanserRec&quot; will be called | Describes identified procedure does and how contribute to overall functionality of the program: This recommendation function contributes to my project&#39;s key feature which is giving custom product recommendation. Without this backend code, when the user submits their quiz they will recieve no result | Row 5: Algorithm Implementation . In the written response (3C): . Code Segment in student-developed procedure that shows: | sequencing: Code runs in order from line at top to line at bottom (starts with list of questions --&gt; recommendation function to output face cleanser) | iteration: iterates through list of questions | selection: if/else statements to check which variable is the max to output what product to recommend | . Explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it --&gt; will walk through entire algorithm line by line | Row 6: Testing . In the written response (3D): . 1st call: question asks &quot;Would you describe your skin as oily, dry, or a combination of both?&quot; &amp; user chooses answer choice &quot;oily&quot; 2nd call: question asks &quot;What is your age?&quot; &amp; user chooses age group 14 - 17 years old . 1st condition: if user chooses oily, 1 point is added to variable called &quot;CetaPhil&quot; which is a face cleansing brand that is good for oily skin 2nd call: if user chooses answer option 14-17 years old, 1 point is added to variable called &quot;humanAcne&quot; which is a face washer good for teenage acne . 1st result: One of top 3 face cleanser recommendations will be one from CetaPhil 2nd call: one of top 3 face cleanser recommendations will be for teenage acne .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2023/01/30/cptindividual.html",
            "relUrl": "/jupyter/2023/01/30/cptindividual.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Big Idea Reflection",
            "content": "5.6 Safe Computing . Describe PII you have seen on project in CompSci Principles Projects that include PII on a project in CSP is seen on the login page. When people login to a site on our website, their information includes their name and their email. . | What are your feelings about PII and your personal exposure? I think PIIs have the potential to be dangerous because people are able to stalk you online and I don’t want to be stalked. However, PII’s are necessary for login and user experience so it is important to be sure that the information you are giving is to a secure website where your information will not be stolen. . | Describe good and bad passwords? What is another step that is used to assist in authentication. A good password is one that can not be guessed by other people and does not include any personal information. | A bad password is 1234567890 or something that can be easily guessed. | . | Try to describe Symmetric and Asymmetric encryption. -Symmetric Encryption: Method of encryption where the same key is used for both encryption and decryption; is fast and efficient (SECRET KEY) - Asymmetric Encryption: encryption that uses two different keys for encryption and decryption. The public key, is used for encrypting the data and shared widely, and the private key, is used for decrypting the data and must be kept confidential. . | Provide an example of encryption we used in AWS deployment. AES-256 encryption | . | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. -A phishing scheme I have seen are people scamming personal information through fake lotteries. People send text messages saying you won $100 dollars and will ask for your address and other personal info. Bad! Other phishing include malicious websites, voice mail messages, or email. | . | 5.5 Legal &amp; Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. | MIT License . Permission is granted to use, copy, modify, and distribute the software | minimal restrictions on the use of the software and allows it to be used in commercial and non-commercial projects | allows anyone to use, modify, and distribute the licensed software for any purpose, including commercial use, as long as the original copyright and license notices are included | . GPL License . Freedom to use, modify, and distribute the software: Users of the software are free to use it for any purpose, make changes to it, and distribute it, either for free or for a fee | source code of the software must be made available to anyone who receives a copy of the software | no discrimination | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. | Software licenses determine the terms and conditions under which software can be used, modified, and distributed. | Digital rights, such as privacy and intellectual property rights, are important in considering ethical concerns. For example, in the case of music, licensing can prevent music from being pirated so that artists can take credit for their work. | This is important for software coders because it allows creators to control their creations and protect their rights to avoid other people stealing their data. | Software licenses, digital rights, and legal and ethical considerations are all complex and interrelated topics that impact the development, distribution, and use of software. | . Make a license for your personal | An MIT License allows for greater flexibility in the use of the software. GPL license is requires derivative works be licensed under the same terms as the original software. We chose the MIT license for greater flexibility. It is easier to distribute code, which can be beneficial to other users. . Link: https://github.com/e-shen2022/emma_blog/blob/master/LICENSE.md . 5.4 Crowdsourcing . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? A crowdsource idea relates to a project I am working on right now. I am developing this app with my friend called Grow &amp; Give. | . | Here is a little exerpt about it: Student productivity has plummeted following the COVID-19 pandemic. Nationwide test scores, specifically California, are at an all-time low which signal lower engagement and morale among elementary to high school students. A reason for this decrease in academic performance is the fact that children have difficulties taking the time to plan a goal, start their task, and take needed breaks in between. Thus, our app aims to guide them through this journey and give them the incentive to convert their productive minutes to in-game coins which will accumulate to donate money to support real-world causes such as planting a tree, taking a pound of trash from the ocean, and providing educational and academic materials to underserved kids. In this way, we are not only building focused intelligent minds, but also setting a strong moral foundation for children to build off of as they grow up to contribute social good to their community and workplace . It was just recently published to the app store, and we want to test its effectiveness using a week-long study. In this experiment, we want as many elementary to highschool students from different ethnicities and backgrounds to use our app for 7 consecutive days. We can crowdsource by mentioning on announcements that is to all students and sent out mass survey form to get people to sign up and input their email. . Here is a picture where we demoed our app at Design 39 2/3/2023 where we attempted to crowdsource by getting the students interested in our study and leaving their email so we can do mass testing . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? Our project is better with crowdsourcing to gain more accurate functionality for a certain target audience. For example, since our project is aimed to teenagers who want to improve their skin care we can send survey and get info about their routine now and what they feel like they are missing in taking care of their skin. | . | What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. Some data we can collect for our CPT project is before they use our website how they feel about their skin then and how they want it to improve, then after they use our website how useful they found it | 5.3 Computer Bias . Intentional bias: Ex. Tiktok: based on your view time, which videos you like and comment → recommends you more content and tiktokers similar to what you have liked before → pushes you to believe and identify in specific niche → increases interaction time which is what Tiktok wants . Unintentional bias Ex. One recent story takes place in 2019 when Optum, a health services algorithm that predicts which patients benefit most from extra medical care, exhibited fundamental prejudice against black patients. The algorithm used how much money a patient spends on healthcare as a measure of how healthy they are; however, since black patients face disproportionate levels of poverty and often spend less on health care than whites, the algorithm falsely concluded that blacks were healthier than equally sick white patients → discriminatory-based system unfairly reduced healthcare funding for black patients, putting their well-being at risk. . Algorithms that affect my decisions Rotten tomato ratings affect what movies people choose to watch Amazon: After you buy a product, it shows you what other people have bought with that product → prompt consumerism → makes people buy more things that they haven’t wouldn’t have in the first place . Virtual assistants have female voices Sexism - believe women are meant to assist others. They are the “soothing” voice that will help you with all your needs . HP computers are racist Probably based algorithm off of only white faces (not diverse data set) Did not train algorithms to account for darker faces Either disregarded darker faces when testing product / ignored the fact cannot detect → either way is intentional bias . For our CPT project I will make sure to prevent any kind of bias. We will do this by using wide diverse data set that considers all different skin products for various skin types and tones. . 5.2 Digital Divide . How does someone empower themself in a digital world? The top course of action that would empower someone in the digital world is getting access to a piece of technology to become familiar with the internet. In this way they can develop digital literacy skills and learn to navigate technology and understand the risks and benefits. Further, with easy access to any topic they want at their fingertips, they can continuously learn and stay informed about digital developments. They can also take advantage of mass networking platforms that allow people to create a positive online presence and connect with those they otherwise would’ve never been able to conctact . | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. “Someone who is empowered” can be interpreted in many ways. It could be someone who is more knowledgable in a certain area, in a higher economic stance, or just more confident in theirself and identity. In addressing this broad definition, here are a few ways you can empower someone who is inferior to you in some aspect: Share knowledge and skills. | Be a mentor or coach. | Advocate for digital equality and accessibility. | Collaborate on digital projects. | Support and uplift underrepresented communities online Specifically at Del Norte, you can become a WHAT tutor to help underclassmen in their essay writing, or volunteer at the nighthawk tutoring session where you can tutor students all different subjects that you are interested in. Further, clubs like National Honor Society are a great way to give back to your community and help underserved communities in their basic needs and education. | . | Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? A main barrier at Del Norte is the financial barrier. Not all families are able to afford a personal computer for their children. Some ways we can raise awareness and help these people are: Providing digital literacy training and education. | Partner with community organizations to bridge the digital divide. | Advocate for government policies that support digital access for all. | Create and support public spaces with technology access, such as community centers or libraries. | Collaborate with technology companies to donate equipment and support digital access initiatives. | . | 5.1 Beneficial and Harmful Effects . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing | Benefits . Computing allows us to create technological devices that make our lives easier. For example, just one device, the iPhone, has revolutionized communication, safety, and access to knowledge. With good service and wifi, we can contact anyone we want from wherever we want. In times of danger if we feel unsafe we can call 911 which will send help our way in the matter of seconds. If we want to learn how to cook a meal, what the cube root is of 64, and why fruit is good for you, the phone is a mobile device that makes it possible for us to access the answers to these questions anywhere. | Computing can analyze and categorize mass data at a speed and accuracy that humans cannot. The applications of AI have taken over from the health to the transportation industry.For example, there is computer software designed to help screen for cancers. Computers can scan through millions of possible signs of cancer and give a positive or negative result in less than a few minutes. Scientists are also using computers to help invent new methods of curing diseases with protein sequence pattern matching. | Innovative computer software can help those who are disadvantaged or have physical disabilities. For example, Stephen Hawking used a computer to speak, which wouldn’t be as easy without a computer. Computers are also great tools for the blind; special software (screen reader), can read what is on the screen. Computers and computer-controlled devices help increase a better quality of life for many different types of people. | . Harms . A clear harm of computing is that when technology makes our life easier, our brains are getting dumber. ChatGPT is a prime example. While it is a very useful for students to get answers to their questions who is good temporarily to get homework done, it is negative long-term when the student needs to recall this information on a test. | While machine learning and data mining have greatly benefitted many fields, their findings are also susceptible to biases and may unintentionally contribute to discrimination. One recent story takes place in 2019 when Optum, a health services algorithm that predicts which patients benefit most from extra medical care, exhibited fundamental prejudice against black patients. The algorithm used how much money a patient spends on healthcare as a measure of how healthy they are; however, since black patients face disproportionate levels of poverty and often spend less on health care than whites, the algorithm falsely concluded that blacks were healthier than equally sick white patients. Here it can be seen that computing is NOT perfect. In fact, it is seen as beneath humans because it is not capable of taking into account social factors such as race. | Replacement of humans by computing innovations, leading to the loss of previously existing jobs and economic hardship for the now-unemployed workers | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? | I believe that dopamine issues caused by overuse of technology is true. Social media and video games are designed to make you addicted to checking and playing them. Spending so much time recieving “short-term” pleasure from playing games on your computer will decrease your joy in other ordinary actions that usually bring you dopamine such as exericising. For me personally, I have found it harder to get out of bed and find joy in the small things when I spend multiple hours a day just staring at a screen. .",
            "url": "https://e-shen2022.github.io/emma_blog/big%20idea/2023/01/24/BigIdea.html",
            "relUrl": "/big%20idea/2023/01/24/BigIdea.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "College Board Sample Responses 3",
            "content": "Sample 7 . Row 1: Program Purpose and Function . Demonstrates an input, output, and program functionality | Written Response describes the purpose, functionality, and input/output of the program | Point? | . Row 2: Data Abstraction . Includes two program segments: 1. that shows how data has been stored in a list. 2. that shows the data in the same list used to fulfill the program purpose | Identifies the name of the variable representing the list being used | [] Describes what data in the list is representing the program | [] Point? | . Row 3: Managing Complexity . Includes a code segment that shows a list that manages the complexity of the program | Explains how this list manages the complexity and explains why the program would work differently or not at all without this list. | Point? | . Row 4: Procedural Abstraction . Includes two program code segments: 1. showing a student developed procedure with at least one parameter that has an effect on the procedure. 2. one shows where the procedure is being called | [] Describes what this procedure does and how it contributes to the functionality of the program | [] Point? | . Row 5: Algorithm Implementation . Includes a program code segment of an algorithm that has sequencing, iteration, and selection | explains in detail how the algorithm works, with enough detail that someone could recreate it. | Point? | . Row 6: Testing . Describes two calls to the selected procedure identified in written response 3.c Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | Describes the conditions tested by each call to the procedure | Identifies the result of each call | Point? | . Reporting Category My Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Has inputs and outputs with a functional program and explains them well | . Data Abstraction | 0 | 0 | Has two lists with code segments, but does not explain how they contribute to the program | . Managing Complexity | 1 | 0 | Has a List and describes it | . Procedural Abstraction | 0 | 0 | Has a great function with a great procedure and describes its functionality well, but not how it contributes to the complexity of the program | . Algorithm Implementation | 1 | 1 | Has a loop witht the iteration, selection, and explains them well | . Testing | 1 | 1 | Describes all the conditions that are tested and the results of each one along with all the calls. | . My Score: 4/6 College Board Score: 3/6 . Discrepencies between my scoring and Collegeboard? . The only discrepency I had was in managing complexity. I was fooled by their list and explaination, but it turns out that the list didnt actually manage the complexity of the program. | . Criteria and why a submision may have failed to meet the standard . This submission isnt the worst one ive ever seen, but it was still pretty bad because it didn’t hit specific details. For the ones it missed, they attempted everyhting but just missed one specific detail such as desrcibing the functionality or the parameters that lost them the whole point. | . Sample 8 . Row 1: Program Purpose and Function . Demonstrates an input, output, and program functionality | Written Response describes the purpose, functionality, and input/output of the program | Point? | . Row 2: Data Abstraction . Includes two program segments: 1. that shows how data has been stored in a list. 2. that shows the data in the same list used to fulfill the program purpose | Identifies the name of the variable representing the list being used | Describes what data in the list is representing the program | Point? | . Row 3: Managing Complexity . Includes a code segment that shows a list that manages the complexity of the program | Explains how this list manages the complexity and explains why the program would work differently or not at all without this list. | Point? | . Row 4: Procedural Abstraction . Includes two program code segments: 1. showing a student developed procedure with at least one parameter that has an effect on the procedure. 2. one shows where the procedure is being called | Describes what this procedure does and how it contributes to the functionality of the program | Point? | . Row 5: Algorithm Implementation . Includes a program code segment of an algorithm that has sequencing, iteration, and selection | explains in detail how the algorithm works, with enough detail that someone could recreate it. | Point? | . Row 6: Testing . Describes two calls to the selected procedure identified in written response 3.c Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | Describes the conditions tested by each call to the procedure | Identifies the result of each call | Point? | . Reporting Category My Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Describes the purpose of their function very well with inputs and outputs | . Data Abstraction | 1 | 1 | Shows the list and calling it within a procedure | . Managing Complexity | 1 | 1 | Has a great explaination on how their list makes their program better and alternative wats that could have been less/more complex and efficient | . Procedural Abstraction | 1 | 1 | Displays many parameters and how they work and how they contribute to the overall program | . Algorithm Implementation | 1 | 1 | Uses selction, iteration, and sequencing and explains them very nicely | . Testing | 1 | 1 | Describes the conditions adn results of each test well | . My Score: 6/6 College Board Score: 6/6 . Discrepencies between my scoring and Collegeboard? . This student made both mine and college boards jobs very easy, this was absolutely perfect according to collegeboards standards. | . Criteria and why a submision may have failed to meet the standard . This one met all the standards because of their beautiful explainations. | . Sample 9 . Row 1: Program Purpose and Function . Demonstrates an input, output, and program functionality | Written Response describes the purpose, functionality, and input/output of the program | Point? | . Row 2: Data Abstraction . [] Includes two program segments: 1. that shows how data has been stored in a list. 2. that shows the data in the same list used to fulfill the program purpose | Identifies the name of the variable representing the list being used | [] Describes what data in the list is representing the program | [] Point? | . Row 3: Managing Complexity . [] Includes a code segment that shows a list that manages the complexity of the program | [] Explains how this list manages the complexity and explains why the program would work differently or not at all without this list. | [] Point? | . Row 4: Procedural Abstraction . Includes two program code segments: 1. showing a student developed procedure with at least one parameter that has an effect on the procedure. 2. one shows where the procedure is being called | [] Describes what this procedure does and how it contributes to the functionality of the program | [] Point? | . Row 5: Algorithm Implementation . Includes a program code segment of an algorithm that has sequencing, iteration, and selection | [] explains in detail how the algorithm works, with enough detail that someone could recreate it. | [] Point? | . Row 6: Testing . [] Describes two calls to the selected procedure identified in written response 3.c Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | Describes the conditions tested by each call to the procedure | [] Identifies the result of each call | [] Point? | . Reporting Category My Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Has inputs and outputs with a functional program, however and explains them well | . Data Abstraction | 0 | 0 | Has two lists with code segments, but does not explain how they contribute to the program | . Managing Complexity | 0 | 0 | There were no code segments to show how they manage complexity | . Procedural Abstraction | 1 | 0 | Has a function with a parameter and explains it. | . Algorithm Implementation | 0 | 0 | Has a loop witht the iteration, selection, and sequencing requirements but does not explain it well. | . Testing | 0 | 0 | The calls have no parameters stated, specify the calls of anything, and doesnt even describe any of them just what is going on. | . My Score: 1/6 . College Board Score: 1/6 . Discrepencies between my scoring and Collegeboard? . On this one I managed to have no discrepencies with collegeboard. I think this is because I have done so many at this point, I know what the good and bad requirements look like. | . Criteria and why a submision may have failed to meet the standard . This submission was missing a whole lot, it had most of the actual coding however the explainations were far below standards which is definately why they got a 1/6 in real life. | . **Sample 10 ** . Row 1: Program Purpose and Function . Demonstrates an input, output, and program functionality | Written Response describes the purpose, functionality, and input/output of the program | Point? | . Row 2: Data Abstraction . Includes two program segments: 1. that shows how data has been stored in a list. 2. that shows the data in the same list used to fulfill the program purpose | Identifies the name of the variable representing the list being used | Describes what data in the list is representing the program | Point? | . Row 3: Managing Complexity . Includes a code segment that shows a list that manages the complexity of the program | Explains how this list manages the complexity and explains why the program would work differently or not at all without this list. | Point? | . Row 4: Procedural Abstraction . Includes two program code segments: 1. showing a student developed procedure with at least one parameter that has an effect on the procedure. 2. one shows where the procedure is being called | Describes what this procedure does and how it contributes to the functionality of the program | Point? | . Row 5: Algorithm Implementation . Includes a program code segment of an algorithm that has sequencing, iteration, and selection | explains in detail how the algorithm works, with enough detail that someone could recreate it. | Point? | . Row 6: Testing . [] Describes two calls to the selected procedure identified in written response 3.c Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | [] Describes the conditions tested by each call to the procedure | [] Identifies the result of each call | [] Point? | . Reporting Category My Score College Board Score Comments . Program Purpose and Function | 1 | 1 | demonstrates a good running program and explains the purpose of theg game and the inputs/outputs | . Data Abstraction | 1 | 1 | Definately shows data being stored ina list and identifies the name | . Managing Complexity | 1 | 1 | Uses a list to manage complexity and describes how | . Procedural Abstraction | 1 | 1 | Developed a good procedure and descibes it well. | . Algorithm Implementation | 1 | 1 | Includes parameters with sequencing, lists, iteration with if/else and for loops and describes all of them. | . Testing | 0 | 0 | Did not describe any of the calls and did not ue any arguments that use paramters. | . My Score: 5/6 College Board Score: 5/6 . Discrepencies between my scoring and Collegeboard? . This one was very easy to grade because it had everything perfectly until the Testing requiremnt where they did it so poorly that it was easy to take away that point. | . Criteria and why a submision may have failed to meet the standard . For the testing category I feel that that barely even looked at the requirements and described none of the calls, and just the code themselves which is obviously not what college board asked to. Overall a great project but it could have been perfect if they paid more attention to the last requirement. | . Overall Reflection: . Overall, these college board scoring assingments were extremely beneficial in teaching me how to get a great score on my own CPT project. Prior to these assignemtns, I barely knew what one of these projects were supposed to look like, but now I have a great perspective and many ideas of what I can do to make my one. This assigment especially taught me all the ways to meet colllegeboards requirements, such as the extreme detail that is needed in explainations of certain things like functionality vs contribution to program. Additionally paying close details to the requirements is going to be extremely important, because one small slip up will lose an entire point. FInally, comparing the best and the worst projects really gave me a perspective on how I am going to do my own project and how I will be going above and beyond in order to ensure the perfection of my own CPT. | .",
            "url": "https://e-shen2022.github.io/emma_blog/cpt/2023/01/23/College.html",
            "relUrl": "/cpt/2023/01/23/College.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "College Board scoring for Sample Responses No. 2",
            "content": "Sample 1 . Reporting category Score Reasoning . Row 1 Program Purpose and Function 0 The video shows clear inputs and oupts for animal icons/questions program. However, the commentary does not describe the problem solved by the program and demonstrates the functionality, describing the inputs and outputs of the program, but collegeborad believes that challenging the user&#39;s memory is not considered an interaction and this response does not describe the functionality shown in the video. Video shows clear input, functionality, and output. (3a) Write up describes overall purpose, functionality, and inputs/outputs of program . Row 2 Data Abstraction 1 (3b) Write up shows 2 coding segments that shows how data has been stored in the list, and data in that list being used to fulfill program purpose. There is more than 1 element in the list. . Row 3 Managing Complexity 1 (3B) write up: clearly shows how using list manages complexity of program purpose. Considers situation if sideIndex is not used and proves its usefulness. . Row 4 Procedural Abstraction 1 (3c) write up: student-developed procedure with 3 parameters. describes identified procedure and how contrbute to functionality of the code . Row 5 Algorithm Implementation 1 (3c) write up: includes sequencing, selection, and interation. explains in detail . Row 6 Testing 1 (3d and 3c) write up: describes 2 cells. conditions being tested. identify result . Comparing to College Board rubric: Row 1 did not recieve credit because student describes functionality but not PURPOSE of program. Why did he create a program that gives info about trig side lengths? Row 3 did not recieve credit because the list is not neccessary for the functionality of the program. To be necessary the items in the list should be looped through and checked. But in this case, the return statements are not needed, you could just print those words to output &quot;Classification by side&quot; Sample 2 . Reporting category Score Reasoning . Row 1 Program Purpose and Function 1 Video fills up until 59s. Shows multiple examples of how an input would result in an output of the blocks dancing in different formations.(3a) Write up describes overall purpose, functionality, and inputs/outputs of program . Row 2 Data Abstraction 1 (3b) Write up shows 2 coding segments that shows how data has been stored in the list, and data in that list being used to fulfill program purpose. There is more than 1 element in the list. The captions help show program&#39;s components as well as abstraction of data. . Row 3 Managing Complexity 1 (3B) write up: clearly shows how using list manages complexity of program purpose. . Row 4 Procedural Abstraction 1 (3c) write up: includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. (1) one showing where the student-developed procedure is being called.(2) describes what the identified procedure does and how it contributes to the overall functionality of the program. . Row 5 Algorithm Implementation 1 (3c) write up: includes a program code segment of a student-developed algorithm that includes sequencing, selection, and iteration. explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. . Row 6 Testing 1 (3d and 3c) write up: describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.describes the condition(s) being tested by each call to the procedure. identifies the result of each call. . Comparing to College Board rubric: 6/6 - no difference between my scoring and college board rubric - very thorough and unique game function Sample 3 . Reporting category Score Reasoning . Row 1 Program Purpose and Function 1 Video shows clear input, functionality, and output. (3a) Write up describes overall purpose, functionality, and inputs/outputs of program . Row 2 Data Abstraction 1 (3b) Write up shows 2 coding segments that shows how data has been stored in the list, and data in that list being used to fulfill program purpose. There is more than 1 element in the list. . Row 3 Managing Complexity 1 (3B) write up: clearly shows how using list manages complexity of program purpose. Considers situation if sideIndex is not used and proves its usefulness. . Row 4 Procedural Abstraction 1 (3c) write up: student-developed procedure with 3 parameters. describes identified procedure and how contrbute to functionality of the code . Row 5 Algorithm Implementation 1 (3c) write up: includes sequencing, selection, and interation. explains in detail . Row 6 Testing 1 (3d and 3c) write up: describes 2 cells. conditions being tested. identify result . Comparing to College Board rubric: Row 1 did not recieve credit because student describes functionality but not PURPOSE of program. Why did he create a program that gives info about trig side lengths? Row 3 did not recieve credit because the list is not neccessary for the functionality of the program. To be necessary the items in the list should be looped through and checked. But in this case, the return statements are not needed, you could just print those words to output &quot;Classification by side&quot; Sample 4 . Reporting category Score Reasoning . Row 1 Program Purpose and Function 1 Video fills up until 59s. Shows multiple examples of how an input would result in an output of the blocks dancing in different formations.(3a) Write up describes overall purpose, functionality, and inputs/outputs of program . Row 2 Data Abstraction 1 (3b) Write up shows 2 coding segments that shows how data has been stored in the list, and data in that list being used to fulfill program purpose. There is more than 1 element in the list. The captions help show program&#39;s components as well as abstraction of data. . Row 3 Managing Complexity 1 (3B) write up: clearly shows how using list manages complexity of program purpose. . Row 4 Procedural Abstraction 1 (3c) write up: includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. (1) one showing where the student-developed procedure is being called.(2) describes what the identified procedure does and how it contributes to the overall functionality of the program. . Row 5 Algorithm Implementation 1 (3c) write up: includes a program code segment of a student-developed algorithm that includes sequencing, selection, and iteration. explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. . Row 6 Testing 1 (3d and 3c) write up: describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.describes the condition(s) being tested by each call to the procedure. identifies the result of each call. . Comparing to College Board rubric: 6/6 - no difference between my scoring and college board rubric - very thorough and unique game function .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/tri2/2023/01/12/students2.html",
            "relUrl": "/markdown/tri2/2023/01/12/students2.html",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "Pbl Model",
            "content": "{ “cells”: [ { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Model and Object-Oriented Programming n”, “&gt; Object Oriented Programming is a part of learning Python. The objective of this blog is to introduce OOP with the intention of PBL task to create a database. The foundations for a database is defining a Class and understanding instance data and methods. A database is often a focus of backend coding as it will store persistent data, that can be recalled after the immediate session is closed. n”, “ n”, “- title: Model and Object-Oriented Programming n”, “- toc: true n”, “- categories: [] n”, “- image: /images/python.png n”, “- type: pbl n”, “- week: 18” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Class and Object Terms n”, “&gt; The foundations of Object-Oriented Programming is defining a Class n”, “* In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. n”, “* A Class has … n”, “ * a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self n”, “ * a collection of Functions/Procedures. These are called Methods** when they exist inside a Class definition. n”, “ An Object is created from the Class/Template. Characteristics of objects … n”, “ * an Object is an **Instance of the Class/Template n”, “ * there can be many Objects created from the same Class n”, “ * each Object contains its own Instance Data n”, “ * the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class n”, “ * all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) n”, “* A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions … n”, “ * @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) n”, “ * @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) n”, “ * observe all instance data (self.name, self._email …) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email …)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Class and Object Code” ] }, { “cell_type”: “code”, “execution_count”: 23, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Test 1, find user 3 n”, “name: &quot;Thomas Edison&quot;, id: &quot;toby&quot;, psw: &quot;sha256$ozy…&quot; n”, “name: &quot;Nicholas Tesla&quot;, id: &quot;nick&quot;, psw: &quot;sha256$rG2…&quot; n”, “* name: &quot;Alexander Graham Bell&quot;, id: &quot;lex&quot;, psw: &quot;sha256$oMu…&quot; n”, “name: &quot;Eli Whitney&quot;, id: &quot;eli&quot;, psw: &quot;sha256$Hws…&quot; n”, “name: &quot;Hedy Lemarr&quot;, id: &quot;hedy&quot;, psw: &quot;sha256$mI9…&quot; n”, “Hello n”, “Test 2, change user 3 n”, “name: &quot;Thomas Edison&quot;, id: &quot;toby&quot;, psw: &quot;sha256$ozy…&quot; n”, “name: &quot;Nicholas Tesla&quot;, id: &quot;nick&quot;, psw: &quot;sha256$rG2…&quot; n”, “* name: &quot;John Mortensen&quot;, id: &quot;jm1021&quot;, psw: &quot;sha256$a8F…&quot; n”, “name: &quot;Eli Whitney&quot;, id: &quot;eli&quot;, psw: &quot;sha256$Hws…&quot; n”, “name: &quot;Hedy Lemarr&quot;, id: &quot;hedy&quot;, psw: &quot;sha256$mI9…&quot; n”, “Test 3, make a dictionary n”, “[{&quot;name&quot;: &quot;Thomas Edison&quot;, &quot;_uid&quot;: &quot;toby&quot;, &quot;_password&quot;: &quot;sha256$ozyOQ4adCNmIMQQ4$4f33b47dde7aed37379362ba58737e5dced42ae546328c85c1dce634a9772dc3&quot;}, {&quot;_name&quot;: &quot;Nicholas Tesla&quot;, &quot;_uid&quot;: &quot;nick&quot;, &quot;_password&quot;: &quot;sha256$rG2gSgviHNmb3EgC$fc3d59ef3ee7780e3d9d6d40539426437d7d3a6e1bddd88f7e9b650bbc265b7f&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;, &quot;_password&quot;: &quot;sha256$a8FnuLa5KAXXjl6x$7ba9faf32c8ddbf0e3d36dab343fd5b593609e7875956f9ed33d03a669d5ca0d&quot;}, {&quot;_name&quot;: &quot;Eli Whitney&quot;, &quot;_uid&quot;: &quot;eli&quot;, &quot;_password&quot;: &quot;sha256$HwsZexPi1i2aRiu9$a91dd69cdda9b24c17e49c972d311d557b66e16d5cc62fccff07280c093e36d6&quot;}, {&quot;_name&quot;: &quot;Hedy Lemarr&quot;, &quot;_uid&quot;: &quot;hedy&quot;, &quot;_password&quot;: &quot;sha256$mI9uSTtwOqUnEV37$b6cb61f9430d461fa5f00359aa65f747f8a817e1f74fea95d56a4bebb6a59db5&quot;}] n”, “Test 4, make a dictionary n”, “[{&quot;_name&quot;: &quot;Thomas Edison&quot;, &quot;_uid&quot;: &quot;toby&quot;, &quot;_password&quot;: &quot;sha256$ozyOQ4adCNmIMQQ4$4f33b47dde7aed37379362ba58737e5dced42ae546328c85c1dce634a9772dc3&quot;}, {&quot;_name&quot;: &quot;Nicholas Tesla&quot;, &quot;_uid&quot;: &quot;nick&quot;, &quot;_password&quot;: &quot;sha256$rG2gSgviHNmb3EgC$fc3d59ef3ee7780e3d9d6d40539426437d7d3a6e1bddd88f7e9b650bbc265b7f&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;, &quot;_password&quot;: &quot;sha256$a8FnuLa5KAXXjl6x$7ba9faf32c8ddbf0e3d36dab343fd5b593609e7875956f9ed33d03a669d5ca0d&quot;}, {&quot;_name&quot;: &quot;Eli Whitney&quot;, &quot;_uid&quot;: &quot;eli&quot;, &quot;_password&quot;: &quot;sha256$HwsZexPi1i2aRiu9$a91dd69cdda9b24c17e49c972d311d557b66e16d5cc62fccff07280c093e36d6&quot;}, {&quot;_name&quot;: &quot;Hedy Lemarr&quot;, &quot;_uid&quot;: &quot;hedy&quot;, &quot;_password&quot;: &quot;sha256$mI9uSTtwOqUnEV37$b6cb61f9430d461fa5f00359aa65f747f8a817e1f74fea95d56a4bebb6a59db5&quot;}] n” ] } ], “source”: [ “# Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) n”, “# A gateway in necessary as a web server cannot communicate directly with Python. n”, “# In this case, imports are focused on generating hash code to protect passwords. n”, “from werkzeug.security import generate_password_hash, check_password_hash n”, “import json n”, “ n”, “# Define a User Class/Template n”, “# – A User represents the data we want to manage n”, “class User: n”, “ # constructor of a User object, initializes the instance variables within object (self) n”, “ def init(self, name, uid, password): n”, “ self._name = name # variables with self prefix become part of the object, n”, “ self._uid = uid n”, “ self.set_password(password) n”, “ n”, “ # a name getter method, extracts name from object n”, “ @property n”, “ def name(self): n”, “ return self._name n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @name.setter n”, “ def name(self, name): n”, “ self._name = name n”, “ n”, “ # a getter method, extracts email from object n”, “ @property n”, “ def uid(self): n”, “ return self._uid n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @uid.setter n”, “ def uid(self, uid): n”, “ self._uid = uid n”, “ n”, “ # check if uid parameter matches user id in object, return boolean n”, “ def is_uid(self, uid): n”, “ return self._uid == uid n”, “ n”, “ @property n”, “ def password(self): n”, “ return self._password[0:10] + &quot;…&quot; # because of security only show 1st characters n”, “ n”, “ # update password, this is conventional setter n”, “ def set_password(self, password): n”, “ &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; n”, “ self._password = generate_password_hash(password, method=’sha256’) n”, “ n”, “ # check password parameter versus stored/encrypted password n”, “ def is_password(self, password): n”, “ &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; n”, “ result = check_password_hash(self._password, password) n”, “ return result n”, “ n”, “ # output content using str(object) in human readable form, uses getter n”, “ def str(self): n”, “ return f’name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;‘ n”, “ n”, “ # output command to recreate the object, uses attribute directly n”, “ def repr(self): n”, “ return f’Person(name={self._name}, uid={self._uid}, password={self._password})’ n”, “ n”, “ n”, “# tester method to print users n”, “def tester(users, uid, psw): n”, “ result = None n”, “ for user in users: n”, “ # test for match in database n”, “ if user.uid == uid and user.is_password(psw): # check for match n”, “ print(&quot;* &quot;, end=&quot;&quot;) n”, “ result = user n”, “ # print using str method n”, “ print(str(user)) n”, “ return result n”, “ n”, “ n”, “# place tester code inside of special if! This allows include without tester running n”, “#Note: this is important - if using multiple files n”, “if name == &quot;main&quot;: n”, “ n”, “ # define user objects n”, “ u1 = User(name=’Thomas Edison’, uid=’toby’, password=’123toby’) n”, “ u2 = User(name=’Nicholas Tesla’, uid=’nick’, password=’123nick’) n”, “ u3 = User(name=’Alexander Graham Bell’, uid=’lex’, password=’123lex’) n”, “ u4 = User(name=’Eli Whitney’, uid=’eli’, password=’123eli’) n”, “ u5 = User(name=’Hedy Lemarr’, uid=’hedy’, password=’123hedy’) n”, “ n”, “ # put user objects in list for convenience n”, “ users = [u1, u2, u3, u4, u5] n”, “ n”, “ # Find user n”, “ print(&quot;Test 1, find user 3&quot;) n”, “ u = tester(users, u3.uid, &quot;123lex&quot;) n”, “ print(&quot;Hello&quot;) n”, “ n”, “ n”, “ # Change user n”, “ print(&quot;Test 2, change user 3&quot;) n”, “ u.name = &quot;John Mortensen&quot; n”, “ u.uid = &quot;jm1021&quot; n”, “ u.set_password(&quot;123qwerty&quot;) n”, “ u = tester(users, u.uid, &quot;123qwerty&quot;) n”, “ n”, “ n”, “ # Make dictionary n”, “ ‘’’ n”, “ The dict in Python represents a dictionary or any mapping object that is used to store the attributes of the object. n”, “ Every object in Python has an attribute that is denoted by dict. n”, “ Use the json.dumps() method to convert the list of Users to a JSON string. n”, “ ‘’‘ n”, “ print(&quot;Test 3, make a dictionary&quot;) n”, “ json_string = json.dumps([user.dict for user in users]) n”, “ print(json_string) n”, “ n”, “ print(&quot;Test 4, make a dictionary&quot;) n”, “ json_string = json.dumps([vars(user) for user in users]) n”, “ print(json_string)” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Hacks n”, “&gt; Add new attributes/variables to the Class. Make class specific to your CPT work. n”, “- Add classOf attribute to define year of graduation n”, “ - Add setter and getter for classOf n”, “- Add dob attribute to define date of birth n”, “ - This will require investigation into Python datetime objects as shown in example code below n”, “ - Add setter and getter for dob n”, “- Add instance variable for age, make sure if dob changes age changes n”, “ - Add getter for age, but don’t add/allow setter for age n”, “- Update and format tester function to work with changes n”, “ n”, “&gt; Start a class design for each of your own Full Stack CPT sections of your project n”, “- Use new code cell in this notebook n”, “- Define _init and self attributes n”, “- Define setters and getters n”, “- Make a tester n”, “ n”, “attribute: bday n”, “class w/attributes that fits with project “ ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Start Code for Hacks” ] }, { “cell_type”: “code”, “execution_count”: 42, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Test 1, find user 3 n”, “False n”, “name: ‘Emma Shen’, id: ‘emma’, psw: ‘sha256$uqv…’, dob: ‘07/29/2006’, gradYear: ‘2024’, gender: ‘female’ n”, “False n”, “name: ‘Alan Shen’, id: ‘alan’, psw: ‘sha256$6cd…’, dob: ‘11/14/2001’, gradYear: ‘2020’, gender: ‘male’ n”, “True n”, “* &lt;class ‘main.User’&gt; n”, “Test 2, change user 3 n”, “False n”, “name: ‘Emma Shen’, id: ‘emma’, psw: ‘sha256$uqv…’, dob: ‘07/29/2006’, gradYear: ‘2024’, gender: ‘female’ n”, “False n”, “name: ‘Alan Shen’, id: ‘alan’, psw: ‘sha256$6cd…’, dob: ‘11/14/2001’, gradYear: ‘2020’, gender: ‘male’ n”, “True n”, “* Test 3, make a dictionary n”, “[{&quot;_name&quot;: &quot;Emma Shen&quot;, &quot;_uid&quot;: &quot;emma&quot;, &quot;_password&quot;: &quot;sha256$uqvLPmsDk6yzRn5z$1aa865710452f0fb1270c231eeaeefb5d8ee3e2877f68cfd8e81035df4399c98&quot;, &quot;_dob&quot;: &quot;2006-07-29&quot;, &quot;_gradYear&quot;: &quot;2024&quot;, &quot;_gender&quot;: &quot;female&quot;, &quot;_skintype&quot;: &quot;oily&quot;, &quot;_allergies&quot;: &quot;dustmites&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}, {&quot;_name&quot;: &quot;Alan Shen&quot;, &quot;_uid&quot;: &quot;alan&quot;, &quot;_password&quot;: &quot;sha256$6cdFHUqV6XTphgLh$fc238c48a37b947eb4051586157949bfae426bcf608580a220f4794df37a8dc5&quot;, &quot;_dob&quot;: &quot;2001-11-14&quot;, &quot;_gradYear&quot;: &quot;2020&quot;, &quot;_gender&quot;: &quot;male&quot;, &quot;_skintype&quot;: &quot;oily&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;no&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;, &quot;_password&quot;: &quot;sha256$2fPj78Sq1RmMHKF8$03e43802a185ca695c7b78f89fe512d01f07b47b302d3b092cb248263877e8bd&quot;, &quot;_dob&quot;: &quot;2006-08-23&quot;, &quot;_gradYear&quot;: &quot;2024&quot;, &quot;_gender&quot;: &quot;female&quot;, &quot;_skintype&quot;: &quot;dry&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}, {&quot;_name&quot;: &quot;Xin Tian&quot;, &quot;_uid&quot;: &quot;emma&quot;, &quot;_password&quot;: &quot;sha256$yks9fP2JmUXyMRa7$48cc03ad0075a750f201724d3e23ed261c69903d4e7123bbb484871e1e81b82c&quot;, &quot;_dob&quot;: &quot;1965-04-01&quot;, &quot;_gradYear&quot;: &quot;1983&quot;, &quot;_gender&quot;: &quot;female&quot;, &quot;_skintype&quot;: &quot;combination&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}, {&quot;_name&quot;: &quot;Sean Yeung&quot;, &quot;_uid&quot;: &quot;sean&quot;, &quot;_password&quot;: &quot;sha256$MsiHAOzDrWyizuIm$35a6a8fd9b5eec527b4b3c542773a5bc9b656bd8ea47a02114b8df39b5fc1b30&quot;, &quot;_dob&quot;: &quot;2023-01-01&quot;, &quot;_gradYear&quot;: &quot;undetermined&quot;, &quot;_gender&quot;: &quot;male&quot;, &quot;_skintype&quot;: &quot;dry&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}] n”, “Test 4, make a dictionary n”, “[{&quot;_name&quot;: &quot;Emma Shen&quot;, &quot;_uid&quot;: &quot;emma&quot;, &quot;_password&quot;: &quot;sha256$uqvLPmsDk6yzRn5z$1aa865710452f0fb1270c231eeaeefb5d8ee3e2877f68cfd8e81035df4399c98&quot;, &quot;_dob&quot;: &quot;2006-07-29&quot;, &quot;_gradYear&quot;: &quot;2024&quot;, &quot;_gender&quot;: &quot;female&quot;, &quot;_skintype&quot;: &quot;oily&quot;, &quot;_allergies&quot;: &quot;dustmites&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}, {&quot;_name&quot;: &quot;Alan Shen&quot;, &quot;_uid&quot;: &quot;alan&quot;, &quot;_password&quot;: &quot;sha256$6cdFHUqV6XTphgLh$fc238c48a37b947eb4051586157949bfae426bcf608580a220f4794df37a8dc5&quot;, &quot;_dob&quot;: &quot;2001-11-14&quot;, &quot;_gradYear&quot;: &quot;2020&quot;, &quot;_gender&quot;: &quot;male&quot;, &quot;_skintype&quot;: &quot;oily&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;no&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;, &quot;_password&quot;: &quot;sha256$2fPj78Sq1RmMHKF8$03e43802a185ca695c7b78f89fe512d01f07b47b302d3b092cb248263877e8bd&quot;, &quot;_dob&quot;: &quot;2006-08-23&quot;, &quot;_gradYear&quot;: &quot;2024&quot;, &quot;_gender&quot;: &quot;female&quot;, &quot;_skintype&quot;: &quot;dry&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}, {&quot;_name&quot;: &quot;Xin Tian&quot;, &quot;_uid&quot;: &quot;emma&quot;, &quot;_password&quot;: &quot;sha256$yks9fP2JmUXyMRa7$48cc03ad0075a750f201724d3e23ed261c69903d4e7123bbb484871e1e81b82c&quot;, &quot;_dob&quot;: &quot;1965-04-01&quot;, &quot;_gradYear&quot;: &quot;1983&quot;, &quot;_gender&quot;: &quot;female&quot;, &quot;_skintype&quot;: &quot;combination&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}, {&quot;_name&quot;: &quot;Sean Yeung&quot;, &quot;_uid&quot;: &quot;sean&quot;, &quot;_password&quot;: &quot;sha256$MsiHAOzDrWyizuIm$35a6a8fd9b5eec527b4b3c542773a5bc9b656bd8ea47a02114b8df39b5fc1b30&quot;, &quot;_dob&quot;: &quot;2023-01-01&quot;, &quot;_gradYear&quot;: &quot;undetermined&quot;, &quot;_gender&quot;: &quot;male&quot;, &quot;_skintype&quot;: &quot;dry&quot;, &quot;_allergies&quot;: &quot;nothing&quot;, &quot;_fragrance&quot;: &quot;yes&quot;}] n” ] } ], “source”: [ “#project: skin product recommendation n”, “#questions: male or female, age, dry/oil/combination skin, allergies, fragrance/nofragrance check boxes n”, “#submit button –&gt; append data into data base (dictionary) n”, “ n”, “from werkzeug.security import generate_password_hash, check_password_hash n”, “import json n”, “from datetime import date, datetime n”, “ n”, “# Define a User Class/Template n”, “class User: n”, “ # constructor of a User object, initializes the instance variables within object (self) n”, “ def init(self, name, uid, password, dob, gradYear, gender, skinType, allergies, fragrance): n”, “ self._name = name # variables with self prefix become part of the object, n”, “ self._uid = uid n”, “ self.set_password(password) n”, “ #Added dob, gradYear, gender, skinType, allergies, and fragrance for CPT n”, “ self._dob = dob n”, “ self._gradYear = gradYear n”, “ self._gender = gender n”, “ self._skinType = skinType n”, “ self._allergies = allergies n”, “ self._fragrance = fragrance n”, “ n”, “ # a name getter method, extracts name from object n”, “ @property n”, “ def name(self): n”, “ return self._name n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @name.setter n”, “ def name(self, name): n”, “ self._name = name n”, “ n”, “ @property n”, “ def uid(self): n”, “ return self._uid n”, “ n”, “ @uid.setter n”, “ def uid(self, uid): n”, “ self._uid = uid n”, “ n”, “ def is_uid(self, uid): n”, “ return self._uid == uid n”, “ n”, “ @property n”, “ def dob(self): n”, “ return self._dob n”, “ n”, “ @dob.setter n”, “ def dob(self, dob): n”, “ self._dob = dob n”, “ n”, “ @property n”, “ def gradYear(self): n”, “ return self._gradYear n”, “ n”, “ @gradYear.setter n”, “ def gradYear(self, gradYear): n”, “ self._gradeYear = gradYear n”, “ n”, “ @property n”, “ def gender(self): n”, “ return self._gender n”, “ n”, “ @gender.setter n”, “ def gender(self, gender): n”, “ self._gender = gender n”, “ n”, “ @property n”, “ def skinType(self): n”, “ return self.skinType n”, “ n”, “ @skinType.setter n”, “ def skinType(self, skinType): n”, “ self._skinType = skinType n”, “ n”, “ @property n”, “ def allergies(self): n”, “ return self.allergies n”, “ n”, “ @allergies.setter n”, “ def allergies(self, allergies): n”, “ self._allergies = allergies n”, “ n”, “ @property n”, “ def fragrance(self): n”, “ return self.fragrance n”, “ n”, “ @fragrance.setter n”, “ def fragrance(self, fragrance): n”, “ self._fragrance = fragrance n”, “ n”, “ @property n”, “ def password(self): n”, “ return self._password[0:10] + &quot;…&quot; n”, “ n”, “ # update password, this is conventional setter n”, “ def set_password(self, password): n”, “ &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; n”, “ self._password = generate_password_hash(password, method=’sha256’) n”, “ n”, “ # check password parameter versus stored/encrypted password n”, “ def is_password(self, password): n”, “ &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; n”, “ result = check_password_hash(self._password, password) n”, “ return result n”, “ n”, “ # output content using str(object) in human readable form, uses getter n”, “ def str(self): n”, “ return f&quot;name: ‘{self.name}’, id: ‘{self.uid}’, psw: ‘{self.password}’, dob: ‘{self.dob.strftime(‘%m/%d/%Y’)}’, gradYear: ‘{self.gradYear}’, gender: ‘{self.gender}’&quot; n”, “ #Note: not able to print all attributes bc of size limit –&gt; find out how to fix n”, “ #,skinType: ‘{self.skinType}’, allergies: &quot;{self.allergies}&quot;, fragrance: &quot;{self.fragrance}&quot;, n”, “ n”, “# tester method to print users n”, “def tester(users, uid, psw): n”, “ #print(&quot;ur mom&quot;) n”, “ result = None n”, “ for user in users: n”, “ print(user.uid == uid) n”, “ # test for match in database n”, “ if user.uid == uid and user.is_password(psw): # check for match n”, “ print(&quot;* &quot;, end=&quot;&quot;) n”, “ result = user n”, “ break n”, “ # print using str method n”, “ print(str(user)) n”, “ return result n”, “ n”, “ n”, “#import sys n”, “#sys.setrecursionlimit(9000) n”, “ n”, “# place tester code inside of special if! This allows include without tester running n”, “#Note: this is important - if using multiple files n”, “if name == &quot;main&quot;: n”, “ n”, “# added new birthdays and users n”, “ birthday1 = date(2006, 7, 29) n”, “ birthday2 = date(2001, 11, 14) n”, “ birthday3 = date(2006, 8, 23) n”, “ birthday4 = date(1965, 4, 1) n”, “ birthday5 = date(2023, 1, 1) n”, “ u1 = User(name=’Emma Shen’, uid=’emma’, password=’123emma’, dob = birthday1, gradYear = ‘2024’, gender = ‘female’, skinType = ‘oily’, allergies = ‘dustmites’, fragrance = ‘yes’) n”, “ u2 = User(name=’Alan Shen’, uid=’alan’, password=’123alan’, dob = birthday2, gradYear = ‘2020’, gender = ‘male’, skinType = ‘oily’, allergies = ‘nothing’, fragrance = ‘no’) n”, “ u3 = User(name=’Julia Huynh’, uid=’julia’, password=’123julia’, dob = birthday3, gradYear = ‘2024’, gender = ‘female’, skinType = ‘dry’, allergies = ‘nothing’, fragrance = ‘yes’) n”, “ u4 = User(name=’Xin Tian’, uid=’emma’, password=’123xin’, dob = birthday4, gradYear = ‘1983’, gender = ‘female’, skinType = ‘combination’, allergies = ‘nothing’, fragrance = ‘yes’) n”, “ u5 = User(name=’Sean Yeung’, uid=’sean’, password=’123sean’, dob = birthday5, gradYear = ‘undetermined’, gender = ‘male’, skinType = ‘dry’, allergies = ‘nothing’, fragrance = ‘yes’) n”, “ n”, “ # put user objects in list for convenience n”, “ users = [u1, u2, u3, u4, u5] n”, “ n”, “ # Find Julia! n”, “ print(&quot;Test 1, find user 3&quot;) n”, “ u = tester(users, u3.uid, &quot;123julia&quot;) n”, “ print(type(u)) n”, “ n”, “ # Change user n”, “ print(&quot;Test 2, change user 3&quot;) n”, “ u.name = &quot;John Mortensen&quot; n”, “ u.uid = &quot;jm1021&quot; n”, “ u.set_password(&quot;123qwerty&quot;) n”, “ u = tester(users, u.uid, &quot;123qwerty&quot;) n”, “ n”, “ print(&quot;Test 3, make a dictionary&quot;) n”, “ #Note: serialize datetime to json string n”, “ json_string = json.dumps([user.dict for user in users], default=str) n”, “ print(json_string) n”, “ n”, “ n”, “ print(&quot;Test 4, make a dictionary&quot;) n”, “ json_string = json.dumps([vars(user) for user in users],default=str) n”, “ print(json_string) n”, “ n”, “ n”, “ n”, “ n”, “ “ ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [ { “ename”: “ModuleNotFoundError”, “evalue”: “No module named ‘init’”, “output_type”: “error”, “traceback”: [ “ u001b[0;31m————————————————————————— u001b[0m”, “ u001b[0;31mModuleNotFoundError u001b[0m Traceback (most recent call last)”, “ u001b[1;32m/home/emma/emma_blog-3/_posts/2023-01-10-PBL-model.ipynb Cell 9 u001b[0m in u001b[0;36m&lt;cell line: 7&gt; u001b[0;34m() u001b[0m n u001b[1;32m 1 u001b[0m u001b[39m#project: skin product recommendation u001b[39;00m n u001b[1;32m 2 u001b[0m u001b[39m#questions: male or female, age, dry/oil/combination skin, allergies, fragrance/nofragrance check boxes u001b[39;00m n u001b[1;32m 3 u001b[0m u001b[39m#submit button –&gt; append data into data base (dictionary) u001b[39;00m n u001b[1;32m 5 u001b[0m u001b[39m&quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; u001b[39;00m n u001b[0;32m—-&gt; 7 u001b[0m u001b[39mfrom u001b[39;00m u001b[39m__init__ u001b[39;00m u001b[39mimport u001b[39;00m app, db n u001b[1;32m 8 u001b[0m u001b[39mfrom u001b[39;00m u001b[39msqlalchemy u001b[39;00m u001b[39m. u001b[39;00m u001b[39mexc u001b[39;00m u001b[39mimport u001b[39;00m IntegrityError n u001b[1;32m 10 u001b[0m u001b[39m&quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; u001b[39;00m n”, “ u001b[0;31mModuleNotFoundError u001b[0m: No module named ‘init’” ] } ], “source”: [ “#project: skin product recommendation n”, “#questions: male or female, age, dry/oil/combination skin, allergies, fragrance/nofragrance check boxes n”, “#submit button –&gt; append data into data base (dictionary) n”, “ n”, “&quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; n”, “ n”, “from init import app, db n”, “from sqlalchemy.exc import IntegrityError n”, “ n”, “&quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; n”, “ n”, “from werkzeug.security import generate_password_hash, check_password_hash n”, “import json n”, “from datetime import date, datetime n”, “ n”, “# Define a User Class/Template n”, “class User(db.Model): n”, “ # constructor of a User object, initializes the instance variables within object (self) n”, “ def init(self, name, uid, password, dob, gradYear, gender, skinType, allergies, fragrance): n”, “ self._name = name # variables with self prefix become part of the object, n”, “ self._uid = uid n”, “ self.set_password(password) n”, “ #Added dob, gradYear, gender, skinType, allergies, and fragrance for CPT n”, “ self._dob = dob n”, “ self._gradYear = gradYear n”, “ self._gender = gender n”, “ self._skinType = skinType n”, “ self._allergies = allergies n”, “ self._fragrance = fragrance n”, “ n”, “ # a name getter method, extracts name from object n”, “ @property n”, “ def name(self): n”, “ return self._name n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @name.setter n”, “ def name(self, name): n”, “ self._name = name n”, “ n”, “ @property n”, “ def uid(self): n”, “ return self._uid n”, “ n”, “ @uid.setter n”, “ def uid(self, uid): n”, “ self._uid = uid n”, “ n”, “ def is_uid(self, uid): n”, “ return self._uid == uid n”, “ n”, “ @property n”, “ def dob(self): n”, “ return self._dob n”, “ n”, “ @dob.setter n”, “ def dob(self, dob): n”, “ self._dob = dob n”, “ n”, “ @property n”, “ def gradYear(self): n”, “ return self._gradYear n”, “ n”, “ @gradYear.setter n”, “ def gradYear(self, gradYear): n”, “ self._gradeYear = gradYear n”, “ n”, “ @property n”, “ def gender(self): n”, “ return self._gender n”, “ n”, “ @gender.setter n”, “ def gender(self, gender): n”, “ self._gender = gender n”, “ n”, “ @property n”, “ def skinType(self): n”, “ return self.skinType n”, “ n”, “ @skinType.setter n”, “ def skinType(self, skinType): n”, “ self._skinType = skinType n”, “ n”, “ @property n”, “ def allergies(self): n”, “ return self.allergies n”, “ n”, “ @allergies.setter n”, “ def allergies(self, allergies): n”, “ self._allergies = allergies n”, “ n”, “ @property n”, “ def fragrance(self): n”, “ return self.fragrance n”, “ n”, “ @fragrance.setter n”, “ def fragrance(self, fragrance): n”, “ self._fragrance = fragrance n”, “ n”, “ @property n”, “ def password(self): n”, “ return self._password[0:10] + &quot;…&quot; n”, “ n”, “ # update password, this is conventional setter n”, “ def set_password(self, password): n”, “ &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; n”, “ self._password = generate_password_hash(password, method=’sha256’) n”, “ n”, “ # check password parameter versus stored/encrypted password n”, “ def is_password(self, password): n”, “ &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; n”, “ result = check_password_hash(self._password, password) n”, “ return result n”, “ n”, “ # output content using str(object) in human readable form, uses getter n”, “ def str(self): n”, “ return f&quot;name: ‘{self.name}’, id: ‘{self.uid}’, psw: ‘{self.password}’, dob: ‘{self.dob.strftime(‘%m/%d/%Y’)}’, gradYear: ‘{self.gradYear}’, gender: ‘{self.gender}’&quot; n”, “ #Note: not able to print all attributes bc of size limit –&gt; find out how to fix n”, “ #,skinType: ‘{self.skinType}’, allergies: &quot;{self.allergies}&quot;, fragrance: &quot;{self.fragrance}&quot;, n”, “ n”, “# tester method to print users n”, “def tester(users, uid, psw): n”, “ #print(&quot;ur mom&quot;) n”, “ result = None n”, “ for user in users: n”, “ print(user.uid == uid) n”, “ # test for match in database n”, “ if user.uid == uid and user.is_password(psw): # check for match n”, “ print(&quot;* &quot;, end=&quot;&quot;) n”, “ result = user n”, “ break n”, “ # print using str method n”, “ print(str(user)) n”, “ return result n”, “ n”, “ n”, “#import sys n”, “#sys.setrecursionlimit(9000) n”, “ n”, “# place tester code inside of special if! This allows include without tester running n”, “#Note: this is important - if using multiple files n”, “if name == &quot;main&quot;: n”, “ n”, “# added new birthdays and users n”, “ birthday1 = date(2006, 7, 29) n”, “ birthday2 = date(2001, 11, 14) n”, “ birthday3 = date(2006, 8, 23) n”, “ birthday4 = date(1965, 4, 1) n”, “ birthday5 = date(2023, 1, 1) n”, “ u1 = User(name=’Emma Shen’, uid=’emma’, password=’123emma’, dob = birthday1, gradYear = ‘2024’, gender = ‘female’, skinType = ‘oily’, allergies = ‘dustmites’, fragrance = ‘yes’) n”, “ u2 = User(name=’Alan Shen’, uid=’alan’, password=’123alan’, dob = birthday2, gradYear = ‘2020’, gender = ‘male’, skinType = ‘oily’, allergies = ‘nothing’, fragrance = ‘no’) n”, “ u3 = User(name=’Julia Huynh’, uid=’julia’, password=’123julia’, dob = birthday3, gradYear = ‘2024’, gender = ‘female’, skinType = ‘dry’, allergies = ‘nothing’, fragrance = ‘yes’) n”, “ u4 = User(name=’Xin Tian’, uid=’emma’, password=’123xin’, dob = birthday4, gradYear = ‘1983’, gender = ‘female’, skinType = ‘combination’, allergies = ‘nothing’, fragrance = ‘yes’) n”, “ u5 = User(name=’Sean Yeung’, uid=’sean’, password=’123sean’, dob = birthday5, gradYear = ‘undetermined’, gender = ‘male’, skinType = ‘dry’, allergies = ‘nothing’, fragrance = ‘yes’) n”, “ n”, “ # put user objects in list for convenience n”, “ users = [u1, u2, u3, u4, u5] n”, “ n”, “ # Find Julia! n”, “ print(&quot;Test 1, find user 3&quot;) n”, “ u = tester(users, u3.uid, &quot;123julia&quot;) n”, “ print(type(u)) n”, “ n”, “ # Change user n”, “ print(&quot;Test 2, change user 3&quot;) n”, “ u.name = &quot;John Mortensen&quot; n”, “ u.uid = &quot;jm1021&quot; n”, “ u.set_password(&quot;123qwerty&quot;) n”, “ u = tester(users, u.uid, &quot;123qwerty&quot;) n”, “ n”, “ print(&quot;Test 3, make a dictionary&quot;) n”, “ #Note: serialize datetime to json string n”, “ json_string = json.dumps([user.dict for user in users], default=str) n”, “ print(json_string) n”, “ n”, “ n”, “ print(&quot;Test 4, make a dictionary&quot;) n”, “ json_string = json.dumps([vars(user) for user in users],default=str) n”, “ print(json_string) n”, “ n”, “ n”, “ n”, “ n”, “ “ ] } ], “metadata”: { “kernelspec”: { “display_name”: “base”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.9.12” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “adc4c76832433b5703473fd5a379ae75624d2e9db498a5bfaf0ea532f238cb81” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://e-shen2022.github.io/emma_blog/2023/01/10/PBL-model.ipynb",
            "relUrl": "/2023/01/10/PBL-model.ipynb",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Night @ The Museum Blog Post!",
            "content": "Ceramics 🍶🏺⚱ . . I really enjoyed the artwork from the ceramics students. While when I think of the word “art” I usually think of sketches, paintings, and more stereotypical art forms, it is important to recognize and appreciate mediums such as forming unique figures made of clay and hardening them into practical and artistic objects. The students made a variety of structures such as teapots, statues, plates, cups, and more. They all had their own color theme and ideas. A few of my personal favorites was a tea cup that was in the shape of a turtle and the body was in the texture of a turtle’s shell, a cup that had a simple but elegant look with vines growing around the surface, and snakes that curled around a cup that looked like it was for when you brush your teeth and need to wash your mouth with water. However, my favorite favorite was this art piece: . . Although the first time I laid eyes on it I physically flinched, the more I looked at the more I was in awe of how realistically gory and perfectly crafted it was. The most prominent aspect was the way the bat was able to balance and not fall over while being “stuck” in the human’s mouth. The person’s facial expression also just speaks to me in the way that they seeem surprised and eerie at the same time. Makes me think whether this person is forced to eat the bat or not. Anyways, just wanted to share this one with y’all. . Drawing &amp; Painting🎨🖌️🖼️ . . When I was first browsing this painting I felt an indescribable sense of warmth. For me, I saw my grandmother and grandfather feeding me authentic chinese dishes made with love. The last time I went to my family’s hometown was 6 years ago. It’s been too long and this image brings me back to the qing zheng yu which means natural fish in Chinese that was my favorite dish. I can see my grandmother’s enthusiastic smile and chopstick feeding me noodles and my grandfather’s wholesome eye smile as he drinks his soup. I feel at home here. . I&#39;m not sure what class this was ◡̈ . . Here is just a cute little selfie pic of Sanika, Ishi, and I posing next to these photos of skin care products because we are CSP!!! Customized Skin Products!! . AP Computer Science A 💻 . One project I really liked in Mort’s room was one where any student at DNHS can submit their club to be on a master sheet and other students can leave their reviews of the clubs. I think that this is a website needed at our school and would organize information very nicely and be very helpful for people looking to join activities they are interested in. Having an alumni review of what the club is like and what they gained from it is very cool! . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/tri2/2023/01/04/sampleresponse.html",
            "relUrl": "/markdown/tri2/2023/01/04/sampleresponse.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "Hacks for simulations",
            "content": "Notes . What is a simulation? -simpler abstraction of an very complicated natural phenomena -removes details that are too difficult to simulate . Advantages of using a simulation . Safer - avoid safety hazards in real-life experimentation | Less expensive - don&#39;t need to buy real-world equipment, just abstract simulation! | Repeatable - once a simulation is created, it&#39;s easy to repeat it to get different but similar results | Can make predictions - use previous data to predict what will happen in the future | Examples . Rolling a dice must account for air resistance and velocity of the throw --&gt; create a psuedo random number generator that can randomly generate a number from the 6 sides | Airplane transportation must account for weather, air resistance, etc --&gt; run multiple simulations with variety of outside factor conditions | . Techniques to formulate a good simulation . Procedure and iteration | Flowcharts | Conditionals | Removing details; like accidents or weather | . Hacks . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Emma Shen | | . 1 | N/A | . 2 | N/A | . 3 | C - A and B are both true | . 4 | B - other aircraft in situation is important and can make big impact. rain, storm, + other small weather issues are less considered | . 5 | C - both simulations and experiment need to consider logistics of situation and what their purpose is | . 6 | A - to avoid safety issues when testing a new product, a simulation is better | . 7 | A - testing real-life greenhouse gas effect on environment is unsafe and can be better simulated | . 8 | N/A | . 9 | B - in this case there are not many other factors to consider or safety/money issue. If teacher wants to calculate test average should just use actual numbers therefore experiment | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation . Extra Credit . Purpose: Simulate 600 rolls of a 6 sided dice . import random import pandas as pd data = [] #1 empty list data for i in range(600): #2 for-loop roll = random.randint(1, 6) #3 simulate real-world factors (randomization in 6 sided dice) d = { &quot;roll&quot;: roll } #4 accumulate factors in dictionary d data.append(d) #5 append d to list data df = pd.DataFrame(data) #6 create the DataFrame (outside of the for-loop) print(f&quot;Outcome of 600 random rolls of a 6 sided dice n{df}&quot;) . Outcome of 600 random rolls of a 6 sided dice roll 0 2 1 2 2 5 3 3 4 6 .. ... 595 5 596 3 597 1 598 6 599 3 [600 rows x 1 columns] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/15/unit3section16.html",
            "relUrl": "/2022/12/15/unit3section16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Hacks for simulations",
            "content": "Answer table . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Name(First+Last) | | . 1 | | . 2 | | . 3 | | . 4 | | . 5 | | . 6 | | . 7 | | . 8 | | . 9 | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/15/section16.html",
            "relUrl": "/2022/12/15/section16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2022/12/14/section17-18.html",
            "relUrl": "/jupyter/2022/12/14/section17-18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Unit 3 Sections 9-11 Hacks",
            "content": "(1) Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Input In [2] if (isCold or isRaining) { ^ SyntaxError: invalid syntax . (2) Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . import random random_number = [] i = 1 while i &lt;= 4: random_number.append(random.randint(1,10)) i = i +1 def sort(random_number): for index in range(1,len(random_number)): value = random_number[index] i = index - 1 while i &gt;= 0: if value &lt; random_number[i]: random_number[i+1] = random_number[i] random_number[i] = value i = i - 1 else: break sort(random_number) print(random_number) print(&quot;Max Score:&quot;, random_number[len(random_number)-1]) . [4, 4, 6, 10] Max Score: 10 . (3) Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: If (can_moveForward) Move_Forward Else (can_moveRight) { Rotate_Right Move_Forward } . (4) Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See image in issue . (5) Explain thorughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process goes through until the number 69 is found. . (6) Make a diagram explaining how you found the list (not tree, include equation) . see image in issue . (7) Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . (8) Explain why Binary Search is more efficient than Sequential Search . Binary search is quicker than sequential search because binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . (9) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I would be searching for 36. First, I would select the middle element ((1+5)/2 = 3, and since 16 &lt; 36, I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . See issue for image . SUMMARY . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. | Sequential Search (Inefficient search): compare each number to the number you want to find until you get to the number you want to find | Binary Search (Efficient search): repeats the process of finding a median and evaluating | Boolean Expressions: expression that evaluates to either true or false | Truth Tables: displays the logical operations on input signals in a table format, identifies all possible input combinations and the output for each | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/13/section9and11.html",
            "relUrl": "/csp/2022/12/13/section9and11.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Error Testing",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the menu to the user print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? --&gt; type of variable #prompt the user multiple times, total price question = &quot;yes&quot; while question == &quot;yes&quot;: question = input(&quot;If would like to order an item type &#39;yes&#39;, if not type &#39;no&quot;).lower() if question == &quot;no&quot;: break else: item = input(&quot;Please select an item from the menu&quot;).lower() if item == &quot;burger&quot;: total +=3.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;fries&quot;: total +=1.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;drink&quot;: total +=0.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) else: print(f&quot;You inputted {item}, this is not an item on our menu. Please select again!&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 You ordered a burger, your total is now $ 3.99 You ordered a drink, your total is now $ 4.98 You ordered a fries, your total is now $ 6.97 You inputted apple, this is not an item on our menu. Please select again .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week7/2022/12/13/.burger.html",
            "relUrl": "/jupyter/week7/2022/12/13/.burger.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "NOTES🎄 . Some vocab . problem: description of a task (may or may not be able to be solved by an algorithm) | instance: specific input of a problem | decision problem: binary answer | optimization: objective of finding BEST solution among other possibilties to solve reason Algorithm efficiency determine through mathematical reasoning | . How to determine if an algorithm is efficient? . number of times a statement executes | algorithms with polynomial effiency or slower (constant, linear, square, cube, etc) are said to run in a reasonable amount of time. Algorithms with EXPONENTIAL run w/unreasonable amount of time :( | . 4️⃣ types of algorithms . First step: an integer being multiplied by a variable &#39;n&#39;. Ex. 5 * n | Second step: an integer to the power of the variable &#39;n&#39;. Ex. 3^4 | Third step: a variable multiplied by an integer, all to the power of 2. Ex. (2 * n)^2. | Fourth step: variable factorial. Ex. 5! = 120. | Run⏱️ . constant time: Always takes a fixed number of steps, no matter how large the input size increases | linear time: number of steps increases in direct proportion to the input size | quadratic time: steps increase in proportion to the input size squared | exponential time: grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. | . HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . A decidable problem can use a computer program to produce a correct output for all possible inputs. An undecidable problem cannot be solved by an algorithm. They either cannot provide a definite yes or no answer, or has correct output for some instances but not all. . Decidable problem example: . number = int(input(&quot;Which number do you want to check? &quot;)) if number % 2 == 0: print(f&quot;{number} is even 🤯&quot;) else: print(f&quot;{number} is odd 🥸&quot;) . 92837429384729381 is odd 🥸 . Undecidable problem example: . age = 18 while age &lt; 13: print(&quot;You get $5 off as a child in the movie theaters!&quot;) age = age + 1 . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . Note: A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array) { //find middle element let middle = Math.floor(array.length / 2); //if middle element is greater than or equal to its neighbors, it is a peak !!! if (array[middle] &gt;= array[middle - 1] &amp;&amp; array[middle] &gt;= array[middle + 1]) { return `The ${middle} indexed number, ${array[middle]} is a peak`; } //if the middle element is less than left neighbor, the peak is to the left else if (array[middle] &lt; array[middle - 1]) { return peak_finder(array.slice(0, middle)); } //else, the peak is to the right else { return peak_finder(array.slice(middle + 1)); } } . HACK 4: Rewrite this Python Code in a More Efficient Way . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] #data unsorted print(&quot;unsorted data:&quot;, data) data.sort() # sort function to sort through data print(&quot;sorted data&quot;, data) . unsorted data: [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] sorted data [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2022/12/12/HACKS.html",
            "relUrl": "/jupyter/2022/12/12/HACKS.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Unit 3 Sections 9-11 Hacks",
            "content": "(1) Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Input In [2] if (isCold or isRaining) { ^ SyntaxError: invalid syntax . (2) Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . import random random_number = [] i = 1 while i &lt;= 4: random_number.append(random.randint(1,10)) i = i +1 def sort(random_number): for index in range(1,len(random_number)): value = random_number[index] i = index - 1 while i &gt;= 0: if value &lt; random_number[i]: random_number[i+1] = random_number[i] random_number[i] = value i = i - 1 else: break sort(random_number) print(random_number) print(&quot;Max Score:&quot;, random_number[len(random_number)-1]) . [4, 4, 6, 10] Max Score: 10 . (3) Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: If (can_moveForward) Move_Forward Else (can_moveRight) { Rotate_Right Move_Forward } . (4) Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See image in issue . (5) Explain thorughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process goes through until the number 69 is found. . (6) Make a diagram explaining how you found the list (not tree, include equation) . see image in issue . (7) Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . (8) Explain why Binary Search is more efficient than Sequential Search . Binary search is quicker than sequential search because binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . (9) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I would be searching for 36. First, I would select the middle element ((1+5)/2 = 3, and since 16 &lt; 36, I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . See issue for image . SUMMARY . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. | Sequential Search (Inefficient search): compare each number to the number you want to find until you get to the number you want to find | Binary Search (Efficient search): repeats the process of finding a median and evaluating | Boolean Expressions: expression that evaluates to either true or false | Truth Tables: displays the logical operations on input signals in a table format, identifies all possible input combinations and the output for each | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/11/section9and11.html",
            "relUrl": "/csp/2022/12/11/section9and11.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Unit 3 Sections 12-13 Hacks",
            "content": "3.12 Homework Part 1 . (1) This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . (2) Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . (3) Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Homework Part 2 . (1) . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . c = 9 . b = 9 * 9 = 81 . a = b c = 81 9 = 729 . (2) . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . temp = 110 . 110/100 = 1.1 . 173 * 1.1 = $190.30 . (3) . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . 103 - 32 = 71 . 71 x (5/9) = 39.44 degrees Celsius . 3.13 Hacks . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) . 2 Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . 3 Which Is the Correct Way to define the Name of a Procedure? . B. PROCEDURE MyList (because procedure should be in all caps and part of the procedure name should be capitalized) . 4 Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } . Summary . Procedure:a named group of programming instructions that may have parameters and return values | Parameters: input values of a procedure. | Arguments: specify the values of the parameters when a procedure is called. | Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | How to code Procedure: While Coding a procedure you must makes sure it has as name and a clear purpose weather to executre a response or complete an action. One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/11/section12and13.html",
            "relUrl": "/csp/2022/12/11/section12and13.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/11/.14-3.15.html",
            "relUrl": "/2022/12/11/.14-3.15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Hacks for simulations",
            "content": "Answer table . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Name(First+Last) | | . 1 | | . 2 | | . 3 | | . 4 | | . 5 | | . 6 | | . 7 | | . 8 | | . 9 | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/10/hacks.html",
            "relUrl": "/2022/12/10/hacks.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/08/.14-3.15.html",
            "relUrl": "/2022/12/08/.14-3.15.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Unit 2 Vocabulary",
            "content": "Unit 2: Binary/Data Terms . Bits: A bit or a binary digit, is the smallest unit of data that a computer can process and store. A bit can be one of 2 physical states, such as either 0 or 1, yes or no, and true or false. . Bytes: A byte is a unit of data that is eight bits long. It is used by computers to represent a character such as a letter or number symbol. . Hexadecimal: Hexadecimal is a numbering system with base 16. There are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. It can be used to represent large numbers with fewer digits. . Binary Numbers . Unsigned Integer: Numbers without + or - sign, only representing the magnitude not the direction. Used when we know that the value we are storing will always be non-negative . Ex. 1, 2, 3, 4 . Signed Integer: The default where the variable can hold positive or negative numbers . Ex. -1, 6, -29, 1000 . Floating Point: Positive or negative whole number with a decimal point. Used to represent real numbers and is written with a decimal point dividing the integer and fractional parts . Ex. 1.23, 87.425, and -9039454.2, NOT 101, -3, 18203 . Binary Data Abstractions: . Boolean: Variable type that represents one of two values: True or False. . A = 200 . B = 33 . If b &gt; a: . print(“b is greater than a”) . If a &gt; b: . print(“a is greater than b”) . ASCII: Stands for American Standard Code for Information Interchange. ASCII was first created when all people wanted computers to be able to show was numbers, letters, punctuation, and non-printing commands(Enter, Delete, F1).. All ASCII encoded character can be represented by 1 byte, or 8 bits for a total of 2^8 = 127 different total characters. . Ex. lowercase “h” character → 104 (D) → 01101000(B) . Unicode: today, people use emojis and new symbols like other languages and stuff and computers needed to be able to represent all that. Unicode is a new standard defining an association between characters and even more numbers. Each unicode character (utf8) is 4 bytes, or 32 bits, enough for 2^32 different characters. Most modern programming languages represent strings as utf8 encoded characters (hex) because people use these new symbols in their code, but old languages like C still associat either character type with a single byte integer . Ex. “Hello” → U+0048 U+0065 U+006C U+006C U+006F . RGB: RGB (red, green, and blue) refers to a system for representing the colors to be used on a computer display.These 3 colors can be combined in various proportions to obtain any color in the visible spectrum. . Ex. rgb(255, 0, 0) = red because red is set to its highest value (255), and the other two (green and blue) are set to 0. . Data Compression . Lossy: a techinique that reduces file size by discarding less important information . Lossless (unit 3): Every bit of data originally in a file remains after it is uncompressed, and all the information is restored. . Unit 3: Algorithms Binary/Data Terms . Variables:An abstraction inside a program that holds a specific value or meaning defined by the programmer. . Data Types: . Integer- highScore (involves math, save as integer or numbers) . String- firstName (name is text, so it is a string) . Boolean- isSunny (2 options, true or false) . String- phoneNumber (no math, just numbers) . Arithmetic Operators . Plus indicated addition (a + b) . Minus indicates subtractions (a - b) . Asterisk indicated multiplication (a * b) . Slash indicated division (a / b) . Managing Complexity with Variables . Lists: Allows you to complete a process for each value in the list, or store multiple values to one variable. . 2D Lists: Array within an array. You can pull single arrays through using index and variable commands. . Ex: T = [[11, 12, 5, 2], [15, 6,10], [10, 8, 12, 5], [12,15,8,6]] . Dictionaries: Allows the storage or data keys and values (assigning a certain piece of data to fit the category it is assigned) . Class: A particular data structure. . Algorithms: An algorithm is a finite set of instructions that accomplish a specific task, us as humans, do algorithms on a daily basis. . Sequence: A specific order a process is completed, which impacts the output. . Selection: Programmer decides between 2 different functions . Iteration: Repetition of a process . For loop: repeats a section of code a set number of times . While loop: repearts a section of code an unknown number of times, until the code is told to break . Expressions: A piece of syntax in coding . Comparison Operators . Operators used in programming languages which compare two different values. These can often be used to set up statements which return a boolean value (true/false), which can be stored in variables. All examples below are in Python and were checked using the bool() command, which returns the True/False output. . == : checks if 2 values are equal to each other (ex. “Hrar?” == “Hrar?” OR 1 == 1.0) . !=: checks if 2 values are NOT equal to each other . &lt;, &lt;=, =&gt;, &gt;: checks if left value is less than (and equal to) or greater than (and equal to) the right value . in/not in : Checks if the specified value is an element in the specified list. in returns true if the element is in the list; not in returns true if the element is not in the list. (Ex. List = [1, 3, 5, 7, 9, “hi”]) . 1 in List . 3 in List . 5 in List . “hi” in List . “What” not in List . “Why” not in List . 2 in List . 4 in List . 6 in List . 9 not in List . 7 not in List . “Weird” in List . Booleans Expressions and Selection . The value of a boolean variable (True/False) can be used as conditions in selection (often known as if statements). The condition of the if statement is the boolean variable; if its value is True, the condition passes. A possible function of this is in Python code below . //Assume the grade was calculated by a computer program . //The bool command is here to make a boolean variable . //In a larger computer program, the value was likely . //generated by previous commands . Grade = 89.49 . isA = bool(Grade &gt;= 90) . if isA: . print(“Yay!”) . else: . print(“hmm”) . OUTPUT: hmm . Booleans Expressions and Iteration . Certain forms of iteration (specifically while loops in Python) can use a boolean variable as a condition (similar to selection commands). As you may expect, the while loop executes commands until the value of the variable is false. In terms of a computer program, this could perhaps be used to execute commands critical for maintaining a certain process until that process is no longer needed. This could also potentially be used to periodically send notifications until a certain condition is met (ex: an assignment is submitted) . Here’s some informal python code: . num = 10 . correct = bool(num &gt; 0) . while correct: . print(num) num = num - 1 correct = bool(num &gt; 0) . OUTPUT: 10 9 8 7 6 5 4 3 2 1 . Truth Tables: A table for a logical operator (ex: AND, OR, XOR) containing each variable and all possible input and output results of that operator. . AND TABLE: All inputs must be true to return output of true. . Input 1 Input 2 Input 3 . False | False | False | . False | True | False | . True | False | False | . True | True | True | . . OR TABLE: At least one input must be true to return output of true. . Input 1 Input 2 Input 3 . False | False | False | . False | True | True | . True | False | True | . True | True | True | . . XOR TABLE: Exactly one input must be true to return output of true. . Input 1 Input 2 Input 3 . False | False | False | . False | True | True | . True | False | True | . True | True | False | . . Characters . The units which make up a string. These can be letters, numbers, special symbols (!@#$%^&amp;*), or even spaces. Regardless, if one types, each keystroke outputs one character. . Ex: “keyboard hi!!!” has 14 characters: 10 letters, three exclamation marks, and a space. . Strings . A variable data type which consists of a combination of letters, numbers, and other special characters (ex: @#$%^&amp;*). They are seen inside quotation marks, and operators cannot affect any numbers in the string. . Ex: stringVar = “Hello World!” . “Hello World!” is a string. . Length . The number of elements in a list. Here’s an example in Python: . numList = [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1] . This list has a length of 17 because it has 17 elements. Each element is separated by a comma. . Concatenation: the act of joining two strings into a single string. Often, these strings are printed to an output terminal/console. Here’s an example in pseudocode: . concat(“tri”, “llion”) . This concatenates the strings “tri” and “llion”, making a new string “trillion”. . Upper, Lower, Traversing Strings . The first two (upper and lower) seem to be referring to Python methods. They are quite simple. I think it would be easiest to explain with a demonstration: . String = “WhYaReWeDoInGtHiS” . print(string) . print(string.upper()) . print(string.lower()) . Output: . WhYaReWeDoInGtHiS . WHYAREWEDOINGTHIS . whyarewedoingthis . Relatively intuitive. The upper() method changes all lowercase letters in a string to uppercase, while the lower() method does the opposite. A potential reason for this would be ensuring uniform case (especially of uppercase when making important headings like page/screen titles) Traversing strings behaves highly similar to iterating elements in a list, except that instead of iterating through a list, it’s a string. Elements in a list are now the characters of a string. A potential application of this could be to search all strings for a specific substring. Here’s some example python code: . #Very informative example here: #https://www.geeksforgeeks.org/iterate-over-characters-of-a-string-in-python/ . String = “Thirty Trillion Dollars” . for i in String: . if i == “T” print(“T detected!”) . Output: . T detected! . T detected! . Python If, Elif, Else conditionals; . Python if statements execute associated lines of code if the if condition is satisfied. . If the if condition is not satisfied, an Elif statement is executed as fallback… with another condition and associated commands . If all associated Elif conditions are not satisfied, there can be an else statement which unconditionally executes associated commands. . Ex: input = input(“enter a string”) . if input == “Hi”: . print(“Hello World!”) . print(“How are you doing today?”) . elif input == “Why”: . print(“That’s a good question to ask about everything that happens.”) . elif input == “Who are you”: . print(“I’m an anonymous guest. Pleased to meet you.”) . else: . print(“Have a great day!”) . This code uses if statements and elif statements to return strings for three special inputs (“Hi,” “Why,” “Who are you”). If the input were any of those strings, the associated command would be executed. Otherwise, the command associated with the else statement (which prints “Have a great day!”) would be executed. . Nested Selection Statements: When a program can choose from many paths to lead to a result, think of flowcharts where one condition must be satisfied before another can be picked Python For/While loops with Range with List: There are two ways loops can be used one is with a range and the other is with a list. When using the range method a variable is iterated a set number of times based on the range (typically an integer value), while with the list method the loop is iterated based on the length of a list. . Range: . i = 0 . while i &lt; 5: . print(i + 1) i += 1 . Output: 1, 2, 3, 4, 5 . List: . list = [“a”, “b”, “c”] . i = 0 . while i&lt;len(list): . print(list[i]) i = i + 1 . Output: a, b, c . Combining loops with conditionals to Break: Makes it so that the loop will stop as soon as a condition is met . Continue: A statement used in while and for loops which starts the code from the beginning, in the image below you can see how the “h” in “Python” was not printed since the continue statement skipped the print(letter) and made the code start from the beginning . for letter in “python”: . if letter == “n”: continue print(letter) . Output: pytho . Procedural Abstraction: A model of what the code should do but it doen’t tell how to do it. It’s basically using a procedure to name the idea. . Python Def: It defines a function and makes code simpler by allowing for the code in the function to be called . Procedures: Code that doesn’t return a value but allows for a specific task to be completed . Parameters: Values that are passed into functions when they are defined in addition(a + b), a and b will be given a value and that value is a parameter . Return Values: Values that are outputed when a function is completed. An example of this was when we were using console.log(“message”) when testing in AppLab .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/12/06/vocabblog.html",
            "relUrl": "/markdown/2022/12/06/vocabblog.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Unit 3 Section 3-4 Notes",
            "content": "Hacks . title: Homework Assignment for 3.3-4 | tags: [hw] | toc: true | comments: true | . 3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] . for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) . print(evens) . Answers 1 . All the steps combined are sequencing . The step “for i in numbers:” is iteration because they go through all the numbers. . “if (numbers[i] % 2 == 0)” is selection because they sort each number to find the even ones. i = 1 starString = “” while i &lt;= 5: j = 1 while j &lt;= i: print (“”, end= “”) j += 1 print () i += 1 Hack: code walkthrough . i = 1 . 1 &lt; 5 . j = 1 . 1 &lt;= 1 . print –&gt; * . #iterate to next i . i = 2 . 2 &lt; 5 . j = 1 . 1 &lt;= 2 . print –&gt; * . 2 &lt;=2 . print –&gt; * . #iterate to next i, keeps going like this until i = 6 and stops printing * . Answers 2 . All the steps are a sequence . “While i &lt;= 5:” is iteration because they repeat until i reaches 5 . “While j &lt;= i:” is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . Click for the answer! a = 1, b = 7, c = 3, d = 7 consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | the value of hot is true, the value of cold is false | the value of hot is false, the value of cold is false | Click for the answer! 1. the value of hot is true, the value of cold is true Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. | Sequencing num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 # num2 is now the new num1 + num3 Hack: Problem 1-4 explanation | #1 . a = 7 . b = 1 . c = 3 . d = 4 . a = 1 . b = 3 + 4 = 7 . d = 7 . Answer: a = 1, b = 7, c = 3, d = 7 . #2 . hot = true . cold = false . cold = hot = true . hot = cold= true . Answer: cold = true, hot = true . #3 Own code segment with 5 variables a = 3 . b = 7 . c = 10 . d = b + a . e = c / d . what is d * e ? . Explanation: . d = 7 + 3 = 10 . e = 10 / 10 = 1 . d * e = 10 * 1 = 10 . #4 . num1 = 3 . num2 = 1 . num3 = 5 . num1 = num2 + num3 = 1 + 5 = 6 . num2 = num1 + num3 = 3 + 6 = 9 . What is the value of num1 and num2? . Click for the answer! num1 = 6, num2 = 11 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . . Test 1 . firstName &lt;- “Bob” lastName &lt;- “Smith” var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, “@gmail.com”) DISPLAY(email) . | What would the result be? . | . Hint: var = “B” name = “SmithB” . . Test 2 . word1 &lt;- “computer” word2 &lt;- “textbooks” length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) ————————————————————— . | . Answers . Test 1 . Result: “SmithB@gmail.com” | . Test 2 . Result: “ompuook” | . String homework explanation . #1 . firstName = “Bob” . lastName = “Smith” . var = substring(firstName, 1, 1) = “B” . name = concat(lastName, var) = “SmithB” . email = concat(name, “gmail.com”) = SmithB@gmail.com . #2 . word1 = “computer” . word2 = “textbooks” . length1 = len(word1)/2 = 8 / 2 = 4 . length2 = len(word2)/3 = 9 / 3 = 3 . first = substring(word1, 2, len1) = ompu (starting at 2nd letter, 4 letters) . second = substring(word2, len2 + 3, len2) = ook (starting 6th letter, 3 letters) . newWord = concat(first, second) .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/12/02/u3s3-4.html",
            "relUrl": "/markdown/2022/12/02/u3s3-4.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Unit 3 Section 1-2 Hacks",
            "content": "Wrong Answer Explanations . Binary Hacks . Q3 254 –&gt; binary . My Answer: 11111111 . Correct Answer: 11111110 . Answer explanation: I forgot that the decimal place on the very right indicates if the number is odd or not. Since 254 is even, I know that the digit on very right should be 0, not 1. . Homework/Hacks Q9 . My Answer: 7. 1, 3, 4 . Correct Answer: 6. 1, 4 . Answer explanation: I momentarily forgot that index starts at 0, therefore Avocado in the list would be index 4 . Reflection Today I learned about variables, how to name them, types of variables, lists, and binary numbers. String –&gt; a word or group of characters not be changed numerically, just a phrase (ex. “hello”, “858-705-5930”) . Boolean –&gt; True of False . Integer –&gt; whole number . Float –&gt; number with decimal point . Name a variable thoughtfully, not just randomly. (ex. If you were naming a boolean variable to determine if an object is the color pink, name the variable isPink.) . Lists - you can combine lists together, and have multiple types of variables in a list . Converting binary to decimal numbers is just a matter of knowing what each decimal point represents. .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/12/01/u3s1-2.html",
            "relUrl": "/markdown/2022/12/01/u3s1-2.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Planning for group project",
            "content": "3.15 Random Value . Function: random (a, b) → generates a random integer from a to b inclusive. Provides 1 number at a time. Each execution of a random number generator may produce a different result each time. . Ex. random(1, 5) could return 1, 2, 3, 4, 5 . Understanding check –&gt; Lower range of 2 ranges will be added, higher range of 2 ranges will be added . Real-world example . . Block-code example . . Possible Hacks . Create a probability math problem and solve the problem using the random function Ex. A die contains 8 sides with dots 1 through 8 on individual sides. Write a code segment that can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable “sum” | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/11/27/projectresearch.html",
            "relUrl": "/markdown/2022/11/27/projectresearch.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://e-shen2022.github.io/emma_blog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;10&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d2f7c75442mshde016465b174ed9p10a7b5jsn1acedf7fc107&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Cars&quot;) cars = response.json() for x in cars: for key, value in x.items(): if (key == &quot;id&quot;): print(&quot;id:&quot;, value) if (key == &quot;year&quot;): print(&quot; year:&quot;, value) if (key == &quot;make&quot;): print(&quot; make:&quot;, value) if (key == &quot;model&quot;): print(&quot; model:&quot;, value) if (key == &quot;type&quot;): print(&quot; type:&quot;, value) . Cars id: 9582 year: 2008 make: Buick model: Enclave type: SUV id: 9583 year: 2006 make: MINI model: Convertible type: Convertible id: 9584 year: 2019 make: Volvo model: XC90 type: SUV id: 9585 year: 1999 make: Ford model: Taurus type: Sedan, Wagon id: 9586 year: 2020 make: Volvo model: XC60 type: SUV id: 9587 year: 2006 make: HUMMER model: H2 type: SUV, Pickup id: 9588 year: 2016 make: GMC model: Sierra 1500 Crew Cab type: Pickup id: 9589 year: 2008 make: GMC model: Canyon Crew Cab type: Pickup id: 9590 year: 2016 make: Subaru model: Outback type: SUV id: 9591 year: 2010 make: Mitsubishi model: Outlander type: SUV .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Error Testing",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the menu to the user print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? --&gt; type of variable #prompt the user multiple times, total price question = &quot;yes&quot; while question == &quot;yes&quot;: question = input(&quot;If would like to order an item type &#39;yes&#39;, if not type &#39;no&quot;).lower() if question == &quot;no&quot;: break else: item = input(&quot;Please select an item from the menu&quot;).lower() if item == &quot;burger&quot;: total +=3.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;fries&quot;: total +=1.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;drink&quot;: total +=0.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) else: print(f&quot;You inputted {item}, this is not an item on our menu. Please select again!&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 You ordered a burger, your total is now $ 3.99 You ordered a drink, your total is now $ 4.98 You ordered a fries, your total is now $ 6.97 You inputted apple, this is not an item on our menu. Please select again .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week7/2022/10/10/.burger.html",
            "relUrl": "/jupyter/week7/2022/10/10/.burger.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "JavaScript and HTML",
            "content": "| JS Table | Scrum Process | Rapid API | .",
            "url": "https://e-shen2022.github.io/emma_blog/frontend/jsTable",
            "relUrl": "/frontend/jsTable",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Group Project",
            "content": "| JS Table | Scrum Process | Rapid API | . Our Scrum Process . Our College Board Task Plan Link .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week7/2022/09/25/scrumprocess.html",
            "relUrl": "/markdown/week7/2022/09/25/scrumprocess.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, Emma!&quot;) . Hello, Emma! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, Emma!&quot;; console.log(msg); . Hello, Emma! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, Emma! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Types of variables in JavaScript&quot;) logItType(&quot;AP Computer Science Principles&quot;); // String logItType(32 / 2); // Number logItType([&quot;Emma&quot;, &quot;Vivian&quot;, &quot;Sarah&quot;, &quot;Amay&quot;]); // Object is generic for this Array, which similar to Python List . Types of variables in JavaScript string ; AP Computer Science Principles number ; 16 object ; [ &#39;Emma&#39;, &#39;Vivian&#39;, &#39;Sarah&#39;, &#39;Amay&#39; ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Emma&quot;, &quot;e-shen2022&quot;, 2024), new Person(&quot;Vivian&quot;, &quot;vivianknee&quot;, 2024), new Person(&quot;Amay&quot;, &quot;amayadvani&quot;, 2024), new Person(&quot;Sarah&quot;, &quot;sarahliu2006&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Emma&#39;, ghID: &#39;e-shen2022&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Vivian&#39;, ghID: &#39;vivianknee&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Amay&#39;, ghID: &#39;amayadvani&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Sarah&#39;, ghID: &#39;sarahliu2006&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Emma | e-shen2022 | 2024 | Student | Vivian | vivianknee | 2024 | Student | Amay | amayadvani | 2024 | Student | Sarah | sarahliu2006 | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "JavaScript Tutorial",
            "content": "| JS Table | Scrum Process | Rapid API | . . JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2022-09-19-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Focus and Habits",
            "content": "Emma&#39;s takeaways . My biggest takeaway is to focus on what I can control. If I were to not win a lottery, I should realize that it was up to chance and there was nothing I could do to make me win, I shouldn&#39;t spend any negative emotions on a situation I have no control over. However, when it comes to pursuing happiness, I do need to take effort to do things that bring me joy and surround myself with people I love. In this way, we won&#39;t tie our self worth to our salary, where we live, etc. because we can be content with our life in any circumstance. Vivian&#39;s takeaways . I learned that things like your salary or your job aren&#39;t what necessarily make you happy, rather data shows that people who spend more time engaging in social activities feel more happy overall. This goes along with being time affluent and avoiding burnout. Amay&#39;s takeaways . A student&#39;s life is mostly centered around learning. A student will need to show evidence of their learning in almost every lesson they attend. Concentrating on their work and employing effective study techniques are two approaches to assist students in learning. We must value our time, as Laurie Santos discussed in her address. If we value our time, we have more of it and may use it to enhance our mental health. There are various ways we may make the most of our time. For instance, we may efficiently spend our time by concentrating on our task, doing it quickly, and avoiding rushing it at the last minute. In accordance with Laurie Santos&#39;s discourse, we should also exercise self-control and develop healthy routines.When you have the opportunity to work hard and have a break from your responsibilities, you should do so. These actions would improve your academic performance as well as your general wellbeing since they would reduce the amount of homework you have to complete at home. Sarah&#39;s takeaways . From the video, I learned that small things like money and grades won&#39;t necessarily happier. An experiment showed that participating in activities like giftgiving can help make a person much happier. .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week4/2022/09/15/focusandhabits.html",
            "relUrl": "/markdown/week4/2022/09/15/focusandhabits.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Docker Server",
            "content": "These are my 2 local servers! . Python Web Server . FastPages Web Server . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week4/2022/09/14/docker-server.html",
            "relUrl": "/markdown/week4/2022/09/14/docker-server.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "The Big Idea",
            "content": "Program Purpose: . AI algorithm that based on inputs of the user&#39;s symptoms, outputs the user&#39;s most probably sicknesses! (specifically towards helping user discern between COVID-symptoms and common cold/fever/cough symptoms) . Roles . Scrum Master: Emma Shen | DevOP: Amay Advani | Frontend Developer: Vivian Ni | Backend Developer: Sarah Liu | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week5/2022/09/12/performancetask.html",
            "relUrl": "/markdown/week5/2022/09/12/performancetask.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Bash Tool Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/emma/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/emma/.local/share/jupyter/kernels/bash javascript /home/emma/.local/share/jupyter/kernels/javascript python3 /home/emma/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/emma/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week1/2022/09/11/bash-notebook.html",
            "relUrl": "/jupyter/week1/2022/09/11/bash-notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "App Lab Quiz",
            "content": "Creation 1: A Derivative Quiz . Press on me! . 1 Program Purpose and Function . Program Purpose: Memory of the many derivatives is essential in succeeding in Calculus. I am currently struggling to remember the derivatives after a summer of no-calculus practice, so I hope this quiz can jog my own memory and help others as well! This program is meant to be a quick and easy study tool for students aking Calculus . Functionality: This program is a three-question quiz that tests a student&#39;s capability to remember the derivatives of sin(x), cos(x), and tan(x). The app starts on the home page where a text welcomes the user to the quiz, the user presses Start Quiz to begin. Now the user must answer 3 questions. If they answer correctly, &quot;Correct Answer!&quot; text appears. If they answer correctly, &quot;Incorrect Answer&quot; text appears. Regardless if the user gets the problem correct, the screen will change to the next screen within 2 seconds. The last screen is where it gives your resuls: score out of 3. . 2 Data Abstraction . (simplifies a set of data by representing it in some general way) I used data abstraction by creating a variable called “score”. I initialized this variable to 0, and everytime the user answers a question correctly, 1 is added to the current score. In this way, I can record each user’s personal correct answer count in one variable and use it to print out their final score. . 3 Managing Complexity . ?? . 4 Procedural Abstraction . (when we write code sections which are generalised by having variable parameters. The idea is that we have code which can cope with a variety of different situations, depending on how its parameters are set when it is called.) . 5 Algorithmn Implementation . ?? . 6 Testing/Debugging . Successes . I made the app fairly user-friendly. I added sounds to make it more entertaining and allowed 2 seconds of rest between each question | I think I designed the background and layout pretty well. The colors are soothing and images are interesting to look at | I found a way to calculate the user&#39;s score using a variable | . Challenges &amp; Discoveries . Sometimes I would forget to name each button, element, and image and I would command the wrong one which would make my app just appear to not be doing anything --&gt; For my second creation I made sure to name each element so I don&#39;t confuse myself again | I couldn&#39;t find a way to combine the similar code among different buttons into one chunk. I had to code almost the same exact thing for each wrong answer and each correct answer. Next time I need to utilize for loops and if statements | . How it works: . First, I defined and set a variable, score to 0. This will be used to calculate the user&#39;s end score out of 3 | I set the screen to &quot;homescreen&quot;, which is where the user should start | When the user clicks the &quot;start quiz&quot; button, the app takes them to the first question screen and plays a soothing &quot;start sound&quot;. However because when I designed the screen for the first question there is the &quot;correct answer!&quot; text, I must first hide this element so it doesn&#39;t appear until later | For the first question the correct answer is cos(x). Thus, if the user clicks cos(x) 1 is added to the score variable. The text &quot;correct answer!&quot; appears and a positive sound is played. The screen then changes to the next question in 2 seconds. This time is meant to make it less abrupt and friendly to user | If the user presses any other answer for example -cos(x), the score stays the same. I show the element &quot;correct answer!&quot; but change the text color to red and replace the text with &quot;wrong answer&quot;. A negative sound plays and it waits 2 seconds until the next question | Same process for the second question | Once the user answers the third question, the screen is taken to the results screen. However, because the score for each user is different, I set the &quot;score_result&quot; text to the variable score that has been accumulating the user&#39;s amount of correct answers. | Future learning . I need to learn how to make a function and pass multiple parameters so that the code can cope with multiple situations. (Procedural Abstraction) | I need to use a list/dictionary to simplify code into one flexible section. For example, all questions and answer choices are in a dictionary, create function that calls each set on one screen. (Managing Complexity) | Includes sequencing, selection, or iteration. For example, how list is used or a for loop. (Algorithm Implementation) | . Creation 2: &quot;Are you a Summer or Winter person?&quot; . Press on me! . Here is a second app I made for fun. I always loved taking buzzfeed quizzes as a kid for fun, they told me a little more about myself even if it was an innaccurate judgement! . Something different: A difference between this buzzfeed quiz and my derivative quiz, is that I made 2 variables, a function, and used an if statement . I made a variable summer and a variable winter, I initialized both to 0 | I defined a function called &quot;setResult&quot; that set a variable max equal to summer, so assuming that the user has more summer answers than winter answers. I would then set the variable result to the text &quot;summer&quot;. If the number of winter answers was greater than max (summer answers), the max would now be set to winter, and result would be text &quot;winter&quot;. To make the sentence on the result screen the same words, I made a label that would only replace the word &quot;summer&quot; or &quot;winter&quot; in the sentence &quot;you are a __ person!&quot; | .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week3/2022/09/07/quiz.html",
            "relUrl": "/markdown/week3/2022/09/07/quiz.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "My Weekly Progress",
            "content": "Week 0 Week 1 Week 2 Week 3 Week 4 Week 5 Week 6 Week 7 . Emma&#39;s Markdown Post | Bash Tool Checks | Lists, Dictionaries, Loops | App Lab Quiz | Focus and Habits | JavaScript and HTML | College Board Learning | Error Testing | . First Jupyter Notebook | AP Physics, APEL, APCSP, and AP Calc BC Study Guide | DNHS Bell Schedule | | Docker Server | Javascript Tutorial | College Board Learning Notes | Python Rapid API | . Fastpages Notebook Blog Post | Python Quiz | My Weekly Progress | | | The Big Idea | | Group Project | . | AP Computer Science Principles Blogging | | | | | | | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week2/2022/09/04/classweeks.html",
            "relUrl": "/markdown/week2/2022/09/04/classweeks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Lists, Dictionaries, Loops",
            "content": "A Caesar cipher is a simple method of encoding messages. Caesar ciphers use a substitution method where letters in the alphabet are shifted by some fixed number of spaces to yield an encoding alphabet. A Caesar cipher with a shift of 1 would encode an A as a B, an M as an N, and a Z as an A, and so on. The method is named after Roman leader Julius Caesar, who used it in his private correspondence! . alphabet = [&#39;a&#39;,&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;,&#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] text = input(&quot;Type your message: n&quot;).lower() #asks for user&#39;s message print(&quot;Your message is: &quot; + text) shift = int(input(&quot;Type the shift number: n&quot;)) #asks for shift number print(f&quot;Your shift number is: {shift}&quot;) def encrypt(text, shift): #define function cipher_text = &quot;&quot; #set cipher_text to empty for letter in text: #looping through each letter in the user&#39;s message position = alphabet.index(letter) #set letter&#39;s alphabet index to variable position new_position = position + shift #set the letter&#39;s new position with shift number new_letter = alphabet[new_position] #new letter with new position cipher_text += new_letter #add letters one by one to empty cipher_text print(f&quot;Your encoded text is: {cipher_text}&quot;) #print the encoded text encrypt(text, shift) . Your message is: hello Your shift number is: 3 Your encoded text is: khoor . Types of Variables: String, Integer, Float, List, and Dictionary In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. . # variable of type string name = &quot;Emma Shen&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;Html&quot;, &quot;CSS&quot;, &quot;C&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) ###REVERSED ORDER##### fruits = [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;, &quot;Pear&quot;, &quot;Blueberry&quot;, &quot;Grape&quot;] fruits.reverse() print(&#39; nReversed List:&#39;, fruits) ###PRINT IN RANDOM ORDER#### import random print(&quot; nAre you bored? Would you like us to give you a random, fun activity to do right now?&quot;) activities = [&quot;biking&quot;, &quot;baking&quot;, &quot;playing basketball&quot;, &quot;going to the beach&quot;, &quot;sleeping&quot;] randomWord = random.choice(activities) print(&quot;An activity you could do is&quot;, randomWord + &quot;!&quot;) . name Emma Shen &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[3] C &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Emma Shen&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Emma Shen &lt;class &#39;str&#39;&gt; Reversed List: [&#39;Grape&#39;, &#39;Blueberry&#39;, &#39;Pear&#39;, &#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;] Are you bored? Would you like us to give you a random, fun activity to do right now? An activity you could do is sleeping! . Lists and Dictionaries Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many Dictionary is used to define data patterns. Iteration is often used to process through lists. To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). . InfoDb = [] # Append to List a 2nd Dictionary of key/values #added records for my gender, phone number, and age InfoDb.append({ &quot;FirstName&quot;: &quot;Emma&quot;, &quot;LastName&quot;: &quot;Shen&quot;, &quot;Gender&quot;: &quot;Female&quot;, &quot;DOB&quot;: &quot;July 29&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aimashen.2017@gmail.com&quot;, &quot;PhoneNumber&quot;: &quot;858-705-5930&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Tennis&quot;, &quot;Listening to music&quot;, &quot;Baking&quot;,] }) #my partner info in dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Vivian&quot;, &quot;LastName&quot;: &quot;Ni&quot;, &quot;Gender&quot;: &quot;Female&quot;, &quot;DOB&quot;: &quot;May 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;vivianni452@gmail.com&quot;, &quot;PhoneNumber&quot;: &quot;410-227-5596&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Art&quot;, &quot;Cybersecurity&quot;, &quot;Graphic design&quot;,] }) import getpass, sys ####User&#39;s input added to list### FirstName = input(&quot;Enter your first name: &quot;) LastName = input(&quot;Enter your last name: &quot;) Gender = input(&quot;Enter your gender: &quot;) DOB = input(&quot;Enter your birthday: &quot;) Residence = input(&quot;Enter your city: &quot;) Email = input(&quot;Enter your email: &quot;) PhoneNumber = input(&quot;Enter your phone number (with dashes in between): &quot; ) Age = input(&quot;Enter your age: &quot;) #for loop for hobbies, since want multiple outputs Hobbies=[] max_length = 3 while len(Hobbies) &lt; max_length: userHobby = input(&quot;Enter a hobby you enjoy: &quot;) Hobbies.append(userHobby) print(Hobbies) InfoDb.append({ &quot;FirstName&quot;: FirstName, &quot;LastName&quot;: LastName, &quot;Gender&quot;: Gender, &quot;DOB&quot;: DOB, &quot;Residence&quot;: Residence, &quot;Email&quot;: Email, &quot;PhoneNumber&quot;: PhoneNumber, &quot;Age&quot;: Age, &quot;Hobbies&quot;: Hobbies, }) # Print the data structure print(InfoDb) . [&#39;eating&#39;, &#39;&#39;, &#39;&#39;] [{&#39;FirstName&#39;: &#39;Emma&#39;, &#39;LastName&#39;: &#39;Shen&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aimashen.2017@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-705-5930&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Tennis&#39;, &#39;Listening to music&#39;, &#39;Baking&#39;]}, {&#39;FirstName&#39;: &#39;Vivian&#39;, &#39;LastName&#39;: &#39;Ni&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;May 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;vivianni452@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;410-227-5596&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Art&#39;, &#39;Cybersecurity&#39;, &#39;Graphic design&#39;]}, {&#39;FirstName&#39;: &#39;alexa&#39;, &#39;LastName&#39;: &#39;murphy&#39;, &#39;Gender&#39;: &#39;female&#39;, &#39;DOB&#39;: &#39;july 28&#39;, &#39;Residence&#39;: &#39;la&#39;, &#39;Email&#39;: &#39;alfjweoef@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;868-494-2938&#39;, &#39;Age&#39;: &#39;19&#39;, &#39;Hobbies&#39;: [&#39;eating&#39;, &#39;&#39;, &#39;&#39;]}] . Formatted output of Dictionary Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Gender:&quot;, d_rec[&quot;Gender&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Phone Number:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Age:&quot;, d_rec[&quot;Age&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;Formatted for loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Formatted for loop output Emma Shen Gender: Female Birth Day: July 29 Residence: San Diego Email: aimashen.2017@gmail.com Phone Number: 858-705-5930 Age: 16 Hobbies: tennis, listening to music, baking Vivian Ni Gender: Female Birth Day: May 13 Residence: San Diego Email: vivianni452@gmail.com Phone Number: 410-227-5596 Age: 16 Hobbies: art, cybersecurity, graphic design Alan Shen Gender: Male Birth Day: November 14 Residence: Arizona Email: alanshen@gmail.com Phone Number: 858-860-4999 Age: 21 Hobbies: Gaming, Swimming, Cooking . While loop In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print(record) i += 1 return while_loop() . While loop output {&#39;FirstName&#39;: &#39;Emma&#39;, &#39;LastName&#39;: &#39;Shen&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aimashen.2017@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-705-5930&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Tennis&#39;, &#39;Listening to music&#39;, &#39;Baking&#39;]} {&#39;FirstName&#39;: &#39;Vivian&#39;, &#39;LastName&#39;: &#39;Ni&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;May 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;vivianni452@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;410-227-5596&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Art&#39;, &#39;Cybersecurity&#39;, &#39;Graphic design&#39;]} {&#39;FirstName&#39;: &#39;alexa&#39;, &#39;LastName&#39;: &#39;murphy&#39;, &#39;Gender&#39;: &#39;female&#39;, &#39;DOB&#39;: &#39;july 28&#39;, &#39;Residence&#39;: &#39;la&#39;, &#39;Email&#39;: &#39;alfjweoef@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;868-494-2938&#39;, &#39;Age&#39;: &#39;19&#39;, &#39;Hobbies&#39;: [&#39;eating&#39;, &#39;&#39;, &#39;&#39;]} . Recursion (calling a loop repeatedly) This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Emma Shen Gender: Female Birth Day: July 29 Residence: San Diego Email: aimashen.2017@gmail.com Phone Number: 858-705-5930 Age: 16 Hobbies: tennis, listening to music, baking Vivian Ni Gender: Female Birth Day: May 13 Residence: San Diego Email: vivianni452@gmail.com Phone Number: 410-227-5596 Age: 16 Hobbies: art, cybersecurity, graphic design Alan Shen Gender: Male Birth Day: November 14 Residence: Arizona Email: alanshen@gmail.com Phone Number: 858-860-4999 Age: 21 Hobbies: Gaming, Swimming, Cooking . Quiz that stores in a List of Dictionaries . questions = 5 #number of quiz questions correct = 0 #initialize number of correct answers as 0 print(&quot;This is a 5 question trivia quiz, good luck!&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) #asks user a question user_input = input() #takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) #print user&#39;s input as Answer if answer == user_input.lower(): #convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct #allows to modify variable outside of current scope correct += 1 #add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;Which is the largest planet in the solar system?&quot;, &quot;jupiter&quot;) question_2 = question_and_answer(&quot;Are worker bees male or female?&quot;, &quot;female&quot;) question_3 = question_and_answer(&quot;What type of fish is Nemo?&quot;, &quot;clownfish&quot;) question_4 = question_and_answer(&quot;How much is the diameter of a basketball hoop? (answer in inches and written out as a word)&quot;, &quot;eighteen&quot;) question_5 = question_and_answer(&quot;Name the largest state in America&quot;, &quot;alaska&quot;) if correct &lt; 3: print(f&#39;You scored {correct} correct answers out of 5, better luck next time!&#39;) elif correct &lt; 5: print(f&#39;You scored {correct} correct answers out of 5, nice try!&#39;) else: print(f&#39;You scored {correct} correct answers out of 5, nice going you trivia star!&#39;) Quiz = { &quot;Q_1&quot;: question_1, &quot;Q_2&quot;: question_2, &quot;Q_3&quot;: question_3, &quot;Q_4&quot;: question_4, &quot;Q_5&quot;: question_5 } print(&quot;A record of your quiz:&quot;, Quiz) . This is a 5 question trivia quiz, good luck! Question: Which is the largest planet in the solar system? Answer: Jupiter Correct Answer Question: Are worker bees male or female? Answer: Female Correct Answer Question: What type of fish is Nemo? Answer: Clownfish Correct Answer Question: How much is the diameter of a basketball hoop? (answer in inches and written out as a word) Answer: eighteen Correct Answer Question: Name the largest state in America Answer: alaska Correct Answer You scored 5 correct answers out of 5, nice going you trivia star! A record of your quiz: {&#39;Q_1&#39;: &#39;Jupiter&#39;, &#39;Q_2&#39;: &#39;Female&#39;, &#39;Q_3&#39;: &#39;Clownfish&#39;, &#39;Q_4&#39;: &#39;eighteen&#39;, &#39;Q_5&#39;: &#39;alaska&#39;} .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week2/2022/08/31/2022-loops.html",
            "relUrl": "/jupyter/week2/2022/08/31/2022-loops.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Resume",
            "content": "Emma Shen . (858)-705-5930 | aimashen.2017@gmail.com | . San Diego, CA . Career Interest: Computer Science . Education . - Del Norte High School (Class of 2024) . - Unweighted GPA: 3.95, Weighted GPA: 4.41 . - Completed AP classwork: AP Biology, AP Calculus AB, AP Chemistry, AP Chinese, AP European History . Outside Courses . - 100 Days of Code - The Complete Python Pro Bootcamp (November 2021 - January 2022), Grade A | Udemy | . - CS50: Introduction to Computer Science (April 2022 - June 2022), Grade A | Harvard University | . Awards &amp; Achievements . - Winning Project in UCLA Computer Science Summer Institute Intermediate Track (2021) | International | . - Gold President’s Volunteer Service Award (2022) | National | . - AP Scholar Award with Distinction (2022) | National | . - Scholar Athlete Award (2021) | School | . Extracurricular Activities . - Founder and President, Academics and Athletics for All (March 2022-Present) Student-run nonprofit organization to collect and distribute sports equipment, athletic clothing, and educational materials to underprivileged kids. . - Outreach leader and coder, First Tech Challenge Team (May 2022 - Present) . Build and program a robot to compete in tournaments. Organize volunteering events to introduce robotics to children interested in STEM. . - Mentor for FLL Robotics Team (July 2022 - Present) . - Leader, First Lego League Team (2017-2019) . Competed in 3 tournament divisions at the middle-school level. Solved missions with a LEGOMINDSTORM robot on a special obstacles course. Presented an innovative solution to a real world problem to a panel of judges. Learned how to efficiently lead a team under points of pressure. . - Member (2014-2021), Leader in Training (2020-Present), AWANA . Take care and teach a group of kids about Jesus and the bible through games and small group activities. . - Vice-President, International Association of Youth (July 2022 - Present) . Collect and distribute sleeping bags to the homeless . - Competitive Tennis (2016-Present) . Competed in USTA tournaments around Southern California. Del Norte High School Varsity tennis team. Freshmen year - Third Place in Palomar League Singles Division .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/08/30/resume.html",
            "relUrl": "/2022/08/30/resume.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "AP Physics, APEL, APCSP, and AP Calc BC Study Guide",
            "content": "Trimester 1 . . AP Physics Unit 1: Introduction &amp; Measurements . 3 Basic Quantities: Length, Mass, Time | SI units: Meter(m), Kilogram(kg), Seconds(s) | Dimensions to know 10^-9 nano | 10^-6 mico | 10^-3 milli | 10^-2 centi | 10^-1 deci | 10^1 deca | 10^3 kilo | 10^6 mega | 10^9 giga | . | Dimensional Analysis | Sig Figs Measurement: 1 more digit than certain | All non-zeros digits significant (37.12 --&gt; 4 SF) | All #s between SF are significant(12007 --&gt; 5 SF | All trailing zeroes w/decimal point are significant(107.300--&gt;6 SF) | Leading zeroes never significant(0.00003 --&gt;1 SF) | Multiplication/division: same # of SF as term with least amount of SF Addition/Subtraction: same # of digits to right of DECIMAL as measurement with smallest # of digits to the right of the decimal | &lt;/ul&gt; | Lab 1 | . AP English Language . The Rhetorical Situation: Individuals write within a particular situation and make strategic writing choices based on that situation . Genre: speech, essay, personal letter, etc | Context: Historical, cultural, and/or political issues occuring when piece written | Exigence: The event that inspires, provokes, or prompts the writer to pick up their pen | Speaker/Writer: credentials/adjectives, their values | Audience: intended receivers/listeners | Purpose: goal of text(call to action, argument, to __) | Message: ideas contained in the text, a full phrase | . Attacking the FRQ . Read the prompt. Annotate the Rhetorical Situation | Read passage(write main idea in margins, underline key lines, identify rhetorical devices, identify shifts, develop understanding of rhetorical situation) | Write essay (introduction + thesis, 2 or 3 body paragraphs) | . AP Computer Science Principles . Learning how to code in Python, use vscode and Github, and make markdown posts/jupyter notebooks. . Terms to Know . input = instructions you give to a computer | output = the information the computer gives to you | sequence = several lines of code together | key (name) --&gt; value (Emma) | . Python Linux Commmands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory &lt;/ul&gt; . AP Calculus BC . Unit 1 . Rewriting Absolute Value into piecewise | &quot;Gotta know&quot; trig limits | Computing limits-end behavior | Absolute Value &amp; End Behavior Limit | Definition of Continuity (The 2 types) | If f&amp; g continuous, then... | Composite Function | Intermediate Value Theorem | . | | . | . | .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week1/2022/08/28/classes.html",
            "relUrl": "/markdown/week1/2022/08/28/classes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): #defines question_and_answer print(&quot;Question: &quot; + prompt) #asks user a question msg = input() #takes user&#39;s input print(&quot;Answer: &quot; + msg) # prints user&#39;s input as answer def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg #returns as string value questions = 6 #number of quiz questions correct = 0 #initialize number of correct answers to 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: #compares user&#39;s response to answer, if &quot;import&quot; than correct, if other than not correct print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the word for several lines of code together?&quot;) if rsp == &quot;sequence&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What does ls stand for?&quot;) if rsp == &quot;list&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What button do you have to click to sync changes with vscode and your fastpages?&quot;) if rsp == &quot;commit&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, aimas running c: Users aimas AppData Local Programs Python Python310 python.exe You will be asked 6 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What is the word for several lines of code together? sequence is correct! Question: What does ls stand for? list is correct! Question: What button do you have to click to sync changes with vscode and your fastpages? commit is correct! aimas you scored 6/6 .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week1/2022/08/26/quiz.html",
            "relUrl": "/jupyter/week1/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Emma's Markdown Post",
            "content": "Welcome to My Blog! . Hello! . . Hi! My name is Emma Shen and I&#39;m a junior at Del Norte High School. I&#39;m an aspiring software developer and interested in AI robotics. I ❤️ boba milk tea and listening to indie pop music.🎵 I have some Python, C, Java, Html, and CSS experience. I would love to code with anyone for fun! .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week0/2022/08/22/test-markdown-post.html",
            "relUrl": "/markdown/week0/2022/08/22/test-markdown-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;Hi!! I hope you are having a wonderful day. What&#39;s one thing you are excited about today?&quot;) . Hi!! I hope you are having a wonderful day. What&#39;s one thing you are excited about today? .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week0/2022/08/22/notebook.html",
            "relUrl": "/jupyter/week0/2022/08/22/notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "DNHS Bell Schedule",
            "content": "Monday, Tuesday, Thursday . Period Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 PM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Wednesday (Late Start) . Period Start Time End Time . Period 1 | 9:55 AM | 10:53 AM | . Period 2 | 10:58 AM | 11:56 AM | . Break | 11:56 AM | 12:06 pM | . Period 3 | 12:11 PM | 1:09 PM | . Lunch | 1:09 PM | 1:39 PM | . Period 4 | 1:44 PM | 2:42 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:47 PM | 3:45 PM | . Friday . Period Start Time End Time . Period 1 | 8:35 AM | 9:49 AM | . Period 2 | 9:54 AM | 11:08 AM | . Break | 11:08 AM | 11:18 AM | . Period 3 | 11:23 AM | 12:37 PM | . Lunch | 12:37 PM | 1:07 PM | . Period 4 | 1:12 PM | 2:26 PM | . Period 5 | 2:31 PM | 3:45 PM | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week2/2022/08/22/bellschedule.html",
            "relUrl": "/markdown/week2/2022/08/22/bellschedule.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "AP Computer Science Principles Blogging",
            "content": "Welcome to my APCSP Blog! . Here is where I will document my learning in AP Computer Science Principles every week! . Week 1 . I downloaded all the tools and equipment needed for this class | I learned basic cs vocabulary such as input, output, sequence, and key/value | I learned Python Linux commands (pwd, cd, mkdirr, ls) | I learned how to make markdown posts and jupyter notebooks | I used Python to create a 6-question quiz | I used a jupyter notebook to write code that checks to see if I have the right packages installed (Bash) | I searched up by myself how to make my website have a background color and text-align the title in the middle | I made a study guide I can update throughout the year for all of my classes | . # Week 2 . I learned how to use lists and dictionaries | I learned how to add user input to a dictionary | I made a cool ceasar cipher that uses a for loop and shift numbers to make an ecoded message | I learned how to make a table in html | I used css to turn website into dark mode | I organized my tags into the different weeks, this way I can easily refer to them later | .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week1/2022/08/22/apcspblbog.html",
            "relUrl": "/markdown/week1/2022/08/22/apcspblbog.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False | . Answer: 1000(B) = 8(D) =! 90(D) --&gt; B. False . 2. 10(D) ≠ 0110(B) . A. True | B. False | . Answer: 0110(B) = 6(D) != 10(D)--&gt; A. True . 3. 56(D) ≥ 111000(B) . A. True | B. False | . Answer: 111000(B) = 56(D) --&gt; 56(D) &gt;= 56(D) --&gt; A. True . 4. 99(D) &lt; 1110011(B) . A. True | B. False | . Answer: 1110011(B) = 115(D) --&gt; 99(D) &lt; 115(D) --&gt; A. True . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 != 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &lt;= y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z + y) . False True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer: &quot;Please schedule a retake&quot; . result = 75 . 75 &lt; 80 --&gt; &quot;Please schedule a retake&quot; . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | Answer: 2 . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | Answer: 2. If-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Answer: 1. If statement . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? --&gt; True print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) elif i == &quot;wildebeest&quot;: print(&quot;Fun Fact: Wildebeests live in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion tiger Fun Fact: Wildebeests live in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . import selenium from selenium import webdriver from selenium.webdriver.common.keys import Keys dict = { &quot;Chicken Alfredo&quot;: [&#39;Chicken&#39;, 60], &quot;Cheese Quesadilla&quot;: [&#39;None&#39;, 10], &quot;Beef Wellington&quot;: [&#39;Beef&#39;, 150] } #for each key, value pair in the dictionary for key, values in dict.items(): count = 0 for value in values: #isinstance checks if value is a string if isinstance(value, (str)) == True: if value == &quot;None&quot;: count += 1 #isinstance checks if value is an integer elif isinstance(value, (int)) == True: if value &lt;= 30: count += 1 if count == 2: print(key) break . Cheese Quesadilla . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . Link to flow chart: https://lucid.app/lucidchart/bb804938-7853-4750-aff8-7b0b68bdf326/edit?viewport_loc=38%2C23%2C1365%2C681%2C0_0&amp;invitationId=inv_b9638135-7445-46e4-8848-8f0da2bb8562 . Lesson Takeaways: . For Binary to Decimal conversions and vice versa, I need to remember that each decimal place is to the power of 2 | if statement and if-else statements are different: if statements only preform if statement is met, if-else goes through code no matter is statement is met | I can use dictionaries and nested if statements to create a program that solves real-world problems | Sketching out a flow chart in psuedo code allows me to clear my algorithm logic. | .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week0/2020/02/20/test.html",
            "relUrl": "/jupyter/week0/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post76": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week0/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/week0/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This website is powered by [emmashen] 1. . A little about me :) . . . I founded a student-run nonprofit organization called Academics and Athletics for All. Our mission is provide resources for underpriviledged kids to pursue their sports and subject passion. We collect and distribute sports equipment, athletic clothing, and educational materials to kids who need it and hold sports clinics/tutoring events. To learn more, click here! . . I&#39;m in First Tech Challenge Team Scorpio. We build and program our own robot to compete in tournaments and volunteer to teach robotics to kids in our community!🤖 . . I&#39;m a FLL LEGO Robotics Teacher at Grace All-Star Academy . I&#39;ve been an AWANA clubber for 6 years, and became a Leader in Training 2 years ago. Now, I mentor a group of 3-4 kids in their spiritual journey, fun games, and bible memory verses.✝️ . I&#39;m on Del Norte&#39;s Varsity Tennis team!🎾 . Some fun facts . . I have a twin sister, bet you didn&#39;t know that | I had a pet chicken but it got mysteriously murdered at 4am in the morning | My favorite fruit has and always will be watermelon | . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://e-shen2022.github.io/emma_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocab",
          "content": "AP CSP Vocab Notes . Terms to Know . input = instructions you give to a computer | output = the information the computer gives to you | sequence = several lines of code together | key (name) --&gt; value (Emma) | Types of variables: Strings, Integers, Float, List, Dictionary | . Python Linux Commmands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory &lt;/ul&gt; **Lists, Dictionaries, Iterations** index --&gt; position of string in a list | Lists &amp; Dictionaries used to collect and store information | .append(expression) --&gt; adds to list | &lt;/li&gt;Recursive loops&lt;/li&gt; . | | .",
          "url": "https://e-shen2022.github.io/emma_blog/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "JavaScript",
          "content": "My Java Script Design Elements . link to my jupyter notebook using javascript and HTML fragment/Javascript data table | . .",
          "url": "https://e-shen2022.github.io/emma_blog/JavaScript/",
          "relUrl": "/JavaScript/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Frontend",
          "content": "| JS Table | Scrum Process | Rapid API | .",
          "url": "https://e-shen2022.github.io/emma_blog/Frontend/",
          "relUrl": "/Frontend/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://e-shen2022.github.io/emma_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}