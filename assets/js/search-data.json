{
  
    
        "post0": {
            "title": "Hacks for simulations",
            "content": "Notes . What is a simulation? -simpler abstraction of an very complicated natural phenomena -removes details that are too difficult to simulate . Advantages of using a simulation . Safer - avoid safety hazards in real-life experimentation | Less expensive - don&#39;t need to buy real-world equipment, just abstract simulation! | Repeatable - once a simulation is created, it&#39;s easy to repeat it to get different but similar results | Can make predictions - use previous data to predict what will happen in the future | Examples . Rolling a dice must account for air resistance and velocity of the throw --&gt; create a psuedo random number generator that can randomly generate a number from the 6 sides | Airplane transportation must account for weather, air resistance, etc --&gt; run multiple simulations with variety of outside factor conditions | . Techniques to formulate a good simulation . Procedure and iteration | Flowcharts | Conditionals | Removing details; like accidents or weather | . Hacks . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Emma Shen | | . 1 | N/A | . 2 | N/A | . 3 | C - A and B are both true | . 4 | B - other aircraft in situation is important and can make big impact. rain, storm, + other small weather issues are less considered | . 5 | C - both simulations and experiment need to consider logistics of situation and what their purpose is | . 6 | A - to avoid safety issues when testing a new product, a simulation is better | . 7 | A - testing real-life greenhouse gas effect on environment is unsafe and can be better simulated | . 8 | N/A | . 9 | B - in this case there are not many other factors to consider or safety/money issue. If teacher wants to calculate test average should just use actual numbers therefore experiment | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation . Extra Credit . Purpose: Simulate 600 rolls of a 6 sided dice . import random import pandas as pd data = [] #1 empty list data for i in range(600): #2 for-loop roll = random.randint(1, 6) #3 simulate real-world factors (randomization in 6 sided dice) d = { &quot;roll&quot;: roll } #4 accumulate factors in dictionary d data.append(d) #5 append d to list data df = pd.DataFrame(data) #6 create the DataFrame (outside of the for-loop) print(f&quot;Outcome of 600 random rolls of a 6 sided dice n{df}&quot;) . Outcome of 600 random rolls of a 6 sided dice roll 0 2 1 2 2 5 3 3 4 6 .. ... 595 5 596 3 597 1 598 6 599 3 [600 rows x 1 columns] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/15/unit3section16.html",
            "relUrl": "/2022/12/15/unit3section16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Sections 9-11 Hacks",
            "content": "(1) Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Input In [2] if (isCold or isRaining) { ^ SyntaxError: invalid syntax . (2) Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . import random random_number = [] i = 1 while i &lt;= 4: random_number.append(random.randint(1,10)) i = i +1 def sort(random_number): for index in range(1,len(random_number)): value = random_number[index] i = index - 1 while i &gt;= 0: if value &lt; random_number[i]: random_number[i+1] = random_number[i] random_number[i] = value i = i - 1 else: break sort(random_number) print(random_number) print(&quot;Max Score:&quot;, random_number[len(random_number)-1]) . [4, 4, 6, 10] Max Score: 10 . (3) Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: If (can_moveForward) Move_Forward Else (can_moveRight) { Rotate_Right Move_Forward } . (4) Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See image in issue . (5) Explain thorughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process goes through until the number 69 is found. . (6) Make a diagram explaining how you found the list (not tree, include equation) . see image in issue . (7) Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . (8) Explain why Binary Search is more efficient than Sequential Search . Binary search is quicker than sequential search because binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . (9) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I would be searching for 36. First, I would select the middle element ((1+5)/2 = 3, and since 16 &lt; 36, I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . See issue for image . SUMMARY . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. | Sequential Search (Inefficient search): compare each number to the number you want to find until you get to the number you want to find | Binary Search (Efficient search): repeats the process of finding a median and evaluating | Boolean Expressions: expression that evaluates to either true or false | Truth Tables: displays the logical operations on input signals in a table format, identifies all possible input combinations and the output for each | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/15/section9and11.html",
            "relUrl": "/csp/2022/12/15/section9and11.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2022/12/15/section17-18.html",
            "relUrl": "/jupyter/2022/12/15/section17-18.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Hacks for simulations",
            "content": "Answer table . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Name(First+Last) | | . 1 | | . 2 | | . 3 | | . 4 | | . 5 | | . 6 | | . 7 | | . 8 | | . 9 | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/15/section16.html",
            "relUrl": "/2022/12/15/section16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 3 Sections 12-13 Hacks",
            "content": "3.12 Homework Part 1 . (1) This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . (2) Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . (3) Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Homework Part 2 . (1) . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . c = 9 . b = 9 * 9 = 81 . a = b c = 81 9 = 729 . (2) . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . temp = 110 . 110/100 = 1.1 . 173 * 1.1 = $190.30 . (3) . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . 103 - 32 = 71 . 71 x (5/9) = 39.44 degrees Celsius . 3.13 Hacks . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) . 2 Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . 3 Which Is the Correct Way to define the Name of a Procedure? . B. PROCEDURE MyList (because procedure should be in all caps and part of the procedure name should be capitalized) . 4 Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } . Summary . Procedure:a named group of programming instructions that may have parameters and return values | Parameters: input values of a procedure. | Arguments: specify the values of the parameters when a procedure is called. | Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | How to code Procedure: While Coding a procedure you must makes sure it has as name and a clear purpose weather to executre a response or complete an action. One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/15/section12and13.html",
            "relUrl": "/csp/2022/12/15/section12and13.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Bash Tool Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/emma/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/emma/.local/share/jupyter/kernels/bash javascript /home/emma/.local/share/jupyter/kernels/javascript python3 /home/emma/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/emma/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week1/2022/12/15/bash-notebook.html",
            "relUrl": "/jupyter/week1/2022/12/15/bash-notebook.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;10&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d2f7c75442mshde016465b174ed9p10a7b5jsn1acedf7fc107&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Cars&quot;) cars = response.json() for x in cars: for key, value in x.items(): if (key == &quot;id&quot;): print(&quot;id:&quot;, value) if (key == &quot;year&quot;): print(&quot; year:&quot;, value) if (key == &quot;make&quot;): print(&quot; make:&quot;, value) if (key == &quot;model&quot;): print(&quot; model:&quot;, value) if (key == &quot;type&quot;): print(&quot; type:&quot;, value) . Cars id: 9582 year: 2008 make: Buick model: Enclave type: SUV id: 9583 year: 2006 make: MINI model: Convertible type: Convertible id: 9584 year: 2019 make: Volvo model: XC90 type: SUV id: 9585 year: 1999 make: Ford model: Taurus type: Sedan, Wagon id: 9586 year: 2020 make: Volvo model: XC60 type: SUV id: 9587 year: 2006 make: HUMMER model: H2 type: SUV, Pickup id: 9588 year: 2016 make: GMC model: Sierra 1500 Crew Cab type: Pickup id: 9589 year: 2008 make: GMC model: Canyon Crew Cab type: Pickup id: 9590 year: 2016 make: Subaru model: Outback type: SUV id: 9591 year: 2010 make: Mitsubishi model: Outlander type: SUV .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Error Testing",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the menu to the user print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? --&gt; type of variable #prompt the user multiple times, total price question = &quot;yes&quot; while question == &quot;yes&quot;: question = input(&quot;If would like to order an item type &#39;yes&#39;, if not type &#39;no&quot;).lower() if question == &quot;no&quot;: break else: item = input(&quot;Please select an item from the menu&quot;).lower() if item == &quot;burger&quot;: total +=3.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;fries&quot;: total +=1.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;drink&quot;: total +=0.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) else: print(f&quot;You inputted {item}, this is not an item on our menu. Please select again!&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 You ordered a burger, your total is now $ 3.99 You ordered a drink, your total is now $ 4.98 You ordered a fries, your total is now $ 6.97 You inputted apple, this is not an item on our menu. Please select again .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week7/2022/12/15/.burger.html",
            "relUrl": "/jupyter/week7/2022/12/15/.burger.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/15/.14-3.15.html",
            "relUrl": "/2022/12/15/.14-3.15.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "NOTES🎄 . Some vocab . problem: description of a task (may or may not be able to be solved by an algorithm) | instance: specific input of a problem | decision problem: binary answer | optimization: objective of finding BEST solution among other possibilties to solve reason Algorithm efficiency determine through mathematical reasoning | . How to determine if an algorithm is efficient? . number of times a statement executes | algorithms with polynomial effiency or slower (constant, linear, square, cube, etc) are said to run in a reasonable amount of time. Algorithms with EXPONENTIAL run w/unreasonable amount of time :( | . 4️⃣ types of algorithms . First step: an integer being multiplied by a variable &#39;n&#39;. Ex. 5 * n | Second step: an integer to the power of the variable &#39;n&#39;. Ex. 3^4 | Third step: a variable multiplied by an integer, all to the power of 2. Ex. (2 * n)^2. | Fourth step: variable factorial. Ex. 5! = 120. | Run⏱️ . constant time: Always takes a fixed number of steps, no matter how large the input size increases | linear time: number of steps increases in direct proportion to the input size | quadratic time: steps increase in proportion to the input size squared | exponential time: grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. | . HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . A decidable problem can use a computer program to produce a correct output for all possible inputs. An undecidable problem cannot be solved by an algorithm. They either cannot provide a definite yes or no answer, or has correct output for some instances but not all. . Decidable problem example: . number = int(input(&quot;Which number do you want to check? &quot;)) if number % 2 == 0: print(f&quot;{number} is even 🤯&quot;) else: print(f&quot;{number} is odd 🥸&quot;) . 92837429384729381 is odd 🥸 . Undecidable problem example: . age = 18 while age &lt; 13: print(&quot;You get $5 off as a child in the movie theaters!&quot;) age = age + 1 . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . Note: A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array) { //find middle element let middle = Math.floor(array.length / 2); //if middle element is greater than or equal to its neighbors, it is a peak !!! if (array[middle] &gt;= array[middle - 1] &amp;&amp; array[middle] &gt;= array[middle + 1]) { return `The ${middle} indexed number, ${array[middle]} is a peak`; } //if the middle element is less than left neighbor, the peak is to the left else if (array[middle] &lt; array[middle - 1]) { return peak_finder(array.slice(0, middle)); } //else, the peak is to the right else { return peak_finder(array.slice(middle + 1)); } } . HACK 4: Rewrite this Python Code in a More Efficient Way . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] #data unsorted print(&quot;unsorted data:&quot;, data) data.sort() # sort function to sort through data print(&quot;sorted data&quot;, data) . unsorted data: [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] sorted data [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/2022/12/12/HACKS.html",
            "relUrl": "/jupyter/2022/12/12/HACKS.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 3 Sections 9-11 Hacks",
            "content": "(1) Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Input In [2] if (isCold or isRaining) { ^ SyntaxError: invalid syntax . (2) Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . import random random_number = [] i = 1 while i &lt;= 4: random_number.append(random.randint(1,10)) i = i +1 def sort(random_number): for index in range(1,len(random_number)): value = random_number[index] i = index - 1 while i &gt;= 0: if value &lt; random_number[i]: random_number[i+1] = random_number[i] random_number[i] = value i = i - 1 else: break sort(random_number) print(random_number) print(&quot;Max Score:&quot;, random_number[len(random_number)-1]) . [4, 4, 6, 10] Max Score: 10 . (3) Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: If (can_moveForward) Move_Forward Else (can_moveRight) { Rotate_Right Move_Forward } . (4) Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . See image in issue . (5) Explain thorughly how to find the number 69 in the list above (use key words) . To find 69 using sequential search, the list would be iterated 7 times. Using a binary search instead, this process would be much more efficient. The search would start from the middle index, then going to the first and last index and dividing by two. This process goes through until the number 69 is found. . (6) Make a diagram explaining how you found the list (not tree, include equation) . see image in issue . (7) Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . (8) Explain why Binary Search is more efficient than Sequential Search . Binary search is quicker than sequential search because binary search takes out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . (9) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I would be searching for 36. First, I would select the middle element ((1+5)/2 = 3, and since 16 &lt; 36, I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . See issue for image . SUMMARY . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. | Sequential Search (Inefficient search): compare each number to the number you want to find until you get to the number you want to find | Binary Search (Efficient search): repeats the process of finding a median and evaluating | Boolean Expressions: expression that evaluates to either true or false | Truth Tables: displays the logical operations on input signals in a table format, identifies all possible input combinations and the output for each | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/11/section9and11.html",
            "relUrl": "/csp/2022/12/11/section9and11.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Sections 12-13 Hacks",
            "content": "3.12 Homework Part 1 . (1) This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . (2) Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . (3) Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Homework Part 2 . (1) . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . c = 9 . b = 9 * 9 = 81 . a = b c = 81 9 = 729 . (2) . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . temp = 110 . 110/100 = 1.1 . 173 * 1.1 = $190.30 . (3) . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . 103 - 32 = 71 . 71 x (5/9) = 39.44 degrees Celsius . 3.13 Hacks . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . if currentrbyards(1260) &gt; toprbyardspg(100) replace(toprbyardspg(100), currentrbyards(1260), totalGames(12)) . 2 Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . 3 Which Is the Correct Way to define the Name of a Procedure? . B. PROCEDURE MyList (because procedure should be in all caps and part of the procedure name should be capitalized) . 4 Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } . Summary . Procedure:a named group of programming instructions that may have parameters and return values | Parameters: input values of a procedure. | Arguments: specify the values of the parameters when a procedure is called. | Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | How to code Procedure: While Coding a procedure you must makes sure it has as name and a clear purpose weather to executre a response or complete an action. One common type of abstraction is procedrual abstraction, which provides a name for a process and allows a procedure to be only knowing what it doe,not how it does it. | .",
            "url": "https://e-shen2022.github.io/emma_blog/csp/2022/12/11/section12and13.html",
            "relUrl": "/csp/2022/12/11/section12and13.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/11/.14-3.15.html",
            "relUrl": "/2022/12/11/.14-3.15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Hacks for simulations",
            "content": "Answer table . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Name(First+Last) | | . 1 | | . 2 | | . 3 | | . 4 | | . 5 | | . 6 | | . 7 | | . 8 | | . 9 | . Extra . Show your understanding. You could make a simple simulation, define vocab, etc. . WHAT QUESTIONS . 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real worldB: To save resources C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? A: WeatherB: Other aircraftC: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? A: Resources and time needed B: Factors considered C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes A: Simulation B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final A: Simulation B: Experiment/calculation .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/10/hacks.html",
            "relUrl": "/2022/12/10/hacks.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 3 Section 15 - Random Values",
            "content": "College Board Learning Objectives . For generating random values: Write expressions to generate possible values | Evaluate expressions to determine the possible results | . . . Randomization in our daily lives.... . Rolling a dice | Lottery Tickets | Game of Marbles | . . Essential Knowledge . The exam reference sheet provides: RANDOM(a, b) - which generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. For example, random(1,3) could return 1, 2, or 3. Adding two ranges to get a third range Example Problem: answer1 = random(0,2) answer2 = random(1,5) answer3 = answer1 + answer2 What is the possible range of results for answer3? . . Answer! [1, 2, 3, 4, 5, 6, 7] Working with Random Number Generators A die contains six sides with corresponding dots 1 through 6 on individual sides. Which of the following code segments can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable. A) sum = 3 * random(1,6) B) sum = random(1,18) C) sum = random(1,6) + random(1,6) + random(1,6) . Answer! C Random function in Code Segment . Answer! C 3 1 2 Different random methods . 1) Using random.choice . import random tvshows_list = [&#39;Squid Game&#39;, &#39;Cobra Kai&#39;, &#39;Gilmore Girls&#39;, &#39;Sherlock Holmes&#39;, &#39;Barbie in the Dream House&#39;] # pick a random choice from a list of strings. random_tvshow = random.choice(tvshows_list) print(f&quot;You should watch {random_tvshow}!&quot;) . You should watch Sherlock Holmes! . Using random.shuffle | import random num_list = [7,8,10,22] print(&quot;List before using shuffle: &quot;, num_list) random.shuffle(num_list) print(&quot;List after using shuffle method: &quot;, num_list) . List before using shuffle: [7, 8, 10, 22] List after using shuffle method: [10, 8, 7, 22] .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/12/08/.14-3.15.html",
            "relUrl": "/2022/12/08/.14-3.15.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2 Vocabulary",
            "content": "Unit 2: Binary/Data Terms . Bits: A bit or a binary digit, is the smallest unit of data that a computer can process and store. A bit can be one of 2 physical states, such as either 0 or 1, yes or no, and true or false. . Bytes: A byte is a unit of data that is eight bits long. It is used by computers to represent a character such as a letter or number symbol. . Hexadecimal: Hexadecimal is a numbering system with base 16. There are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. It can be used to represent large numbers with fewer digits. . Binary Numbers . Unsigned Integer: Numbers without + or - sign, only representing the magnitude not the direction. Used when we know that the value we are storing will always be non-negative . Ex. 1, 2, 3, 4 . Signed Integer: The default where the variable can hold positive or negative numbers . Ex. -1, 6, -29, 1000 . Floating Point: Positive or negative whole number with a decimal point. Used to represent real numbers and is written with a decimal point dividing the integer and fractional parts . Ex. 1.23, 87.425, and -9039454.2, NOT 101, -3, 18203 . Binary Data Abstractions: . Boolean: Variable type that represents one of two values: True or False. . A = 200 . B = 33 . If b &gt; a: . print(“b is greater than a”) . If a &gt; b: . print(“a is greater than b”) . ASCII: Stands for American Standard Code for Information Interchange. ASCII was first created when all people wanted computers to be able to show was numbers, letters, punctuation, and non-printing commands(Enter, Delete, F1).. All ASCII encoded character can be represented by 1 byte, or 8 bits for a total of 2^8 = 127 different total characters. . Ex. lowercase “h” character → 104 (D) → 01101000(B) . Unicode: today, people use emojis and new symbols like other languages and stuff and computers needed to be able to represent all that. Unicode is a new standard defining an association between characters and even more numbers. Each unicode character (utf8) is 4 bytes, or 32 bits, enough for 2^32 different characters. Most modern programming languages represent strings as utf8 encoded characters (hex) because people use these new symbols in their code, but old languages like C still associat either character type with a single byte integer . Ex. “Hello” → U+0048 U+0065 U+006C U+006C U+006F . RGB: RGB (red, green, and blue) refers to a system for representing the colors to be used on a computer display.These 3 colors can be combined in various proportions to obtain any color in the visible spectrum. . Ex. rgb(255, 0, 0) = red because red is set to its highest value (255), and the other two (green and blue) are set to 0. . Data Compression . Lossy: a techinique that reduces file size by discarding less important information . Lossless (unit 3): Every bit of data originally in a file remains after it is uncompressed, and all the information is restored. . Unit 3: Algorithms Binary/Data Terms . Variables:An abstraction inside a program that holds a specific value or meaning defined by the programmer. . Data Types: . Integer- highScore (involves math, save as integer or numbers) . String- firstName (name is text, so it is a string) . Boolean- isSunny (2 options, true or false) . String- phoneNumber (no math, just numbers) . Arithmetic Operators . Plus indicated addition (a + b) . Minus indicates subtractions (a - b) . Asterisk indicated multiplication (a * b) . Slash indicated division (a / b) . Managing Complexity with Variables . Lists: Allows you to complete a process for each value in the list, or store multiple values to one variable. . 2D Lists: Array within an array. You can pull single arrays through using index and variable commands. . Ex: T = [[11, 12, 5, 2], [15, 6,10], [10, 8, 12, 5], [12,15,8,6]] . Dictionaries: Allows the storage or data keys and values (assigning a certain piece of data to fit the category it is assigned) . Class: A particular data structure. . Algorithms: An algorithm is a finite set of instructions that accomplish a specific task, us as humans, do algorithms on a daily basis. . Sequence: A specific order a process is completed, which impacts the output. . Selection: Programmer decides between 2 different functions . Iteration: Repetition of a process . For loop: repeats a section of code a set number of times . While loop: repearts a section of code an unknown number of times, until the code is told to break . Expressions: A piece of syntax in coding . Comparison Operators . Operators used in programming languages which compare two different values. These can often be used to set up statements which return a boolean value (true/false), which can be stored in variables. All examples below are in Python and were checked using the bool() command, which returns the True/False output. . == : checks if 2 values are equal to each other (ex. “Hrar?” == “Hrar?” OR 1 == 1.0) . !=: checks if 2 values are NOT equal to each other . &lt;, &lt;=, =&gt;, &gt;: checks if left value is less than (and equal to) or greater than (and equal to) the right value . in/not in : Checks if the specified value is an element in the specified list. in returns true if the element is in the list; not in returns true if the element is not in the list. (Ex. List = [1, 3, 5, 7, 9, “hi”]) . 1 in List . 3 in List . 5 in List . “hi” in List . “What” not in List . “Why” not in List . 2 in List . 4 in List . 6 in List . 9 not in List . 7 not in List . “Weird” in List . Booleans Expressions and Selection . The value of a boolean variable (True/False) can be used as conditions in selection (often known as if statements). The condition of the if statement is the boolean variable; if its value is True, the condition passes. A possible function of this is in Python code below . //Assume the grade was calculated by a computer program . //The bool command is here to make a boolean variable . //In a larger computer program, the value was likely . //generated by previous commands . Grade = 89.49 . isA = bool(Grade &gt;= 90) . if isA: . print(“Yay!”) . else: . print(“hmm”) . OUTPUT: hmm . Booleans Expressions and Iteration . Certain forms of iteration (specifically while loops in Python) can use a boolean variable as a condition (similar to selection commands). As you may expect, the while loop executes commands until the value of the variable is false. In terms of a computer program, this could perhaps be used to execute commands critical for maintaining a certain process until that process is no longer needed. This could also potentially be used to periodically send notifications until a certain condition is met (ex: an assignment is submitted) . Here’s some informal python code: . num = 10 . correct = bool(num &gt; 0) . while correct: . print(num) num = num - 1 correct = bool(num &gt; 0) . OUTPUT: 10 9 8 7 6 5 4 3 2 1 . Truth Tables: A table for a logical operator (ex: AND, OR, XOR) containing each variable and all possible input and output results of that operator. . AND TABLE: All inputs must be true to return output of true. . Input 1 Input 2 Input 3 . False | False | False | . False | True | False | . True | False | False | . True | True | True | . . OR TABLE: At least one input must be true to return output of true. . Input 1 Input 2 Input 3 . False | False | False | . False | True | True | . True | False | True | . True | True | True | . . XOR TABLE: Exactly one input must be true to return output of true. . Input 1 Input 2 Input 3 . False | False | False | . False | True | True | . True | False | True | . True | True | False | . . Characters . The units which make up a string. These can be letters, numbers, special symbols (!@#$%^&amp;*), or even spaces. Regardless, if one types, each keystroke outputs one character. . Ex: “keyboard hi!!!” has 14 characters: 10 letters, three exclamation marks, and a space. . Strings . A variable data type which consists of a combination of letters, numbers, and other special characters (ex: @#$%^&amp;*). They are seen inside quotation marks, and operators cannot affect any numbers in the string. . Ex: stringVar = “Hello World!” . “Hello World!” is a string. . Length . The number of elements in a list. Here’s an example in Python: . numList = [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1] . This list has a length of 17 because it has 17 elements. Each element is separated by a comma. . Concatenation: the act of joining two strings into a single string. Often, these strings are printed to an output terminal/console. Here’s an example in pseudocode: . concat(“tri”, “llion”) . This concatenates the strings “tri” and “llion”, making a new string “trillion”. . Upper, Lower, Traversing Strings . The first two (upper and lower) seem to be referring to Python methods. They are quite simple. I think it would be easiest to explain with a demonstration: . String = “WhYaReWeDoInGtHiS” . print(string) . print(string.upper()) . print(string.lower()) . Output: . WhYaReWeDoInGtHiS . WHYAREWEDOINGTHIS . whyarewedoingthis . Relatively intuitive. The upper() method changes all lowercase letters in a string to uppercase, while the lower() method does the opposite. A potential reason for this would be ensuring uniform case (especially of uppercase when making important headings like page/screen titles) Traversing strings behaves highly similar to iterating elements in a list, except that instead of iterating through a list, it’s a string. Elements in a list are now the characters of a string. A potential application of this could be to search all strings for a specific substring. Here’s some example python code: . #Very informative example here: #https://www.geeksforgeeks.org/iterate-over-characters-of-a-string-in-python/ . String = “Thirty Trillion Dollars” . for i in String: . if i == “T” print(“T detected!”) . Output: . T detected! . T detected! . Python If, Elif, Else conditionals; . Python if statements execute associated lines of code if the if condition is satisfied. . If the if condition is not satisfied, an Elif statement is executed as fallback… with another condition and associated commands . If all associated Elif conditions are not satisfied, there can be an else statement which unconditionally executes associated commands. . Ex: input = input(“enter a string”) . if input == “Hi”: . print(“Hello World!”) . print(“How are you doing today?”) . elif input == “Why”: . print(“That’s a good question to ask about everything that happens.”) . elif input == “Who are you”: . print(“I’m an anonymous guest. Pleased to meet you.”) . else: . print(“Have a great day!”) . This code uses if statements and elif statements to return strings for three special inputs (“Hi,” “Why,” “Who are you”). If the input were any of those strings, the associated command would be executed. Otherwise, the command associated with the else statement (which prints “Have a great day!”) would be executed. . Nested Selection Statements: When a program can choose from many paths to lead to a result, think of flowcharts where one condition must be satisfied before another can be picked Python For/While loops with Range with List: There are two ways loops can be used one is with a range and the other is with a list. When using the range method a variable is iterated a set number of times based on the range (typically an integer value), while with the list method the loop is iterated based on the length of a list. . Range: . i = 0 . while i &lt; 5: . print(i + 1) i += 1 . Output: 1, 2, 3, 4, 5 . List: . list = [“a”, “b”, “c”] . i = 0 . while i&lt;len(list): . print(list[i]) i = i + 1 . Output: a, b, c . Combining loops with conditionals to Break: Makes it so that the loop will stop as soon as a condition is met . Continue: A statement used in while and for loops which starts the code from the beginning, in the image below you can see how the “h” in “Python” was not printed since the continue statement skipped the print(letter) and made the code start from the beginning . for letter in “python”: . if letter == “n”: continue print(letter) . Output: pytho . Procedural Abstraction: A model of what the code should do but it doen’t tell how to do it. It’s basically using a procedure to name the idea. . Python Def: It defines a function and makes code simpler by allowing for the code in the function to be called . Procedures: Code that doesn’t return a value but allows for a specific task to be completed . Parameters: Values that are passed into functions when they are defined in addition(a + b), a and b will be given a value and that value is a parameter . Return Values: Values that are outputed when a function is completed. An example of this was when we were using console.log(“message”) when testing in AppLab .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/12/06/vocabblog.html",
            "relUrl": "/markdown/2022/12/06/vocabblog.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 3 Section 3-4 Notes",
            "content": "Hacks . title: Homework Assignment for 3.3-4 | tags: [hw] | toc: true | comments: true | . 3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] . for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) . print(evens) . Answers 1 . All the steps combined are sequencing . The step “for i in numbers:” is iteration because they go through all the numbers. . “if (numbers[i] % 2 == 0)” is selection because they sort each number to find the even ones. i = 1 starString = “” while i &lt;= 5: j = 1 while j &lt;= i: print (“”, end= “”) j += 1 print () i += 1 Hack: code walkthrough . i = 1 . 1 &lt; 5 . j = 1 . 1 &lt;= 1 . print –&gt; * . #iterate to next i . i = 2 . 2 &lt; 5 . j = 1 . 1 &lt;= 2 . print –&gt; * . 2 &lt;=2 . print –&gt; * . #iterate to next i, keeps going like this until i = 6 and stops printing * . Answers 2 . All the steps are a sequence . “While i &lt;= 5:” is iteration because they repeat until i reaches 5 . “While j &lt;= i:” is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . Click for the answer! a = 1, b = 7, c = 3, d = 7 consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | the value of hot is true, the value of cold is false | the value of hot is false, the value of cold is false | Click for the answer! 1. the value of hot is true, the value of cold is true Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. | Sequencing num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 # num2 is now the new num1 + num3 Hack: Problem 1-4 explanation | #1 . a = 7 . b = 1 . c = 3 . d = 4 . a = 1 . b = 3 + 4 = 7 . d = 7 . Answer: a = 1, b = 7, c = 3, d = 7 . #2 . hot = true . cold = false . cold = hot = true . hot = cold= true . Answer: cold = true, hot = true . #3 Own code segment with 5 variables a = 3 . b = 7 . c = 10 . d = b + a . e = c / d . what is d * e ? . Explanation: . d = 7 + 3 = 10 . e = 10 / 10 = 1 . d * e = 10 * 1 = 10 . #4 . num1 = 3 . num2 = 1 . num3 = 5 . num1 = num2 + num3 = 1 + 5 = 6 . num2 = num1 + num3 = 3 + 6 = 9 . What is the value of num1 and num2? . Click for the answer! num1 = 6, num2 = 11 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . . Test 1 . firstName &lt;- “Bob” lastName &lt;- “Smith” var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, “@gmail.com”) DISPLAY(email) . | What would the result be? . | . Hint: var = “B” name = “SmithB” . . Test 2 . word1 &lt;- “computer” word2 &lt;- “textbooks” length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) ————————————————————— . | . Answers . Test 1 . Result: “SmithB@gmail.com” | . Test 2 . Result: “ompuook” | . String homework explanation . #1 . firstName = “Bob” . lastName = “Smith” . var = substring(firstName, 1, 1) = “B” . name = concat(lastName, var) = “SmithB” . email = concat(name, “gmail.com”) = SmithB@gmail.com . #2 . word1 = “computer” . word2 = “textbooks” . length1 = len(word1)/2 = 8 / 2 = 4 . length2 = len(word2)/3 = 9 / 3 = 3 . first = substring(word1, 2, len1) = ompu (starting at 2nd letter, 4 letters) . second = substring(word2, len2 + 3, len2) = ook (starting 6th letter, 3 letters) . newWord = concat(first, second) .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/12/02/u3s3-4.html",
            "relUrl": "/markdown/2022/12/02/u3s3-4.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 3 Section 1-2 Hacks",
            "content": "Wrong Answer Explanations . Binary Hacks . Q3 254 –&gt; binary . My Answer: 11111111 . Correct Answer: 11111110 . Answer explanation: I forgot that the decimal place on the very right indicates if the number is odd or not. Since 254 is even, I know that the digit on very right should be 0, not 1. . Homework/Hacks Q9 . My Answer: 7. 1, 3, 4 . Correct Answer: 6. 1, 4 . Answer explanation: I momentarily forgot that index starts at 0, therefore Avocado in the list would be index 4 . Reflection Today I learned about variables, how to name them, types of variables, lists, and binary numbers. String –&gt; a word or group of characters not be changed numerically, just a phrase (ex. “hello”, “858-705-5930”) . Boolean –&gt; True of False . Integer –&gt; whole number . Float –&gt; number with decimal point . Name a variable thoughtfully, not just randomly. (ex. If you were naming a boolean variable to determine if an object is the color pink, name the variable isPink.) . Lists - you can combine lists together, and have multiple types of variables in a list . Converting binary to decimal numbers is just a matter of knowing what each decimal point represents. .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/12/01/u3s1-2.html",
            "relUrl": "/markdown/2022/12/01/u3s1-2.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Planning for group project",
            "content": "3.15 Random Value . Function: random (a, b) → generates a random integer from a to b inclusive. Provides 1 number at a time. Each execution of a random number generator may produce a different result each time. . Ex. random(1, 5) could return 1, 2, 3, 4, 5 . Understanding check –&gt; Lower range of 2 ranges will be added, higher range of 2 ranges will be added . Real-world example . . Block-code example . . Possible Hacks . Create a probability math problem and solve the problem using the random function Ex. A die contains 8 sides with dots 1 through 8 on individual sides. Write a code segment that can be used to simulate the results of rolling the die 3 times and assigns the sum of the values obtained by the rolls to the variable “sum” | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/2022/11/27/projectresearch.html",
            "relUrl": "/markdown/2022/11/27/projectresearch.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://e-shen2022.github.io/emma_blog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;10&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d2f7c75442mshde016465b174ed9p10a7b5jsn1acedf7fc107&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Cars&quot;) cars = response.json() for x in cars: for key, value in x.items(): if (key == &quot;id&quot;): print(&quot;id:&quot;, value) if (key == &quot;year&quot;): print(&quot; year:&quot;, value) if (key == &quot;make&quot;): print(&quot; make:&quot;, value) if (key == &quot;model&quot;): print(&quot; model:&quot;, value) if (key == &quot;type&quot;): print(&quot; type:&quot;, value) . Cars id: 9582 year: 2008 make: Buick model: Enclave type: SUV id: 9583 year: 2006 make: MINI model: Convertible type: Convertible id: 9584 year: 2019 make: Volvo model: XC90 type: SUV id: 9585 year: 1999 make: Ford model: Taurus type: Sedan, Wagon id: 9586 year: 2020 make: Volvo model: XC60 type: SUV id: 9587 year: 2006 make: HUMMER model: H2 type: SUV, Pickup id: 9588 year: 2016 make: GMC model: Sierra 1500 Crew Cab type: Pickup id: 9589 year: 2008 make: GMC model: Canyon Crew Cab type: Pickup id: 9590 year: 2016 make: Subaru model: Outback type: SUV id: 9591 year: 2010 make: Mitsubishi model: Outlander type: SUV .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Error Testing",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the menu to the user print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? --&gt; type of variable #prompt the user multiple times, total price question = &quot;yes&quot; while question == &quot;yes&quot;: question = input(&quot;If would like to order an item type &#39;yes&#39;, if not type &#39;no&quot;).lower() if question == &quot;no&quot;: break else: item = input(&quot;Please select an item from the menu&quot;).lower() if item == &quot;burger&quot;: total +=3.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;fries&quot;: total +=1.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) elif item == &quot;drink&quot;: total +=0.99 total_rounded = round(total, 2) print(f&quot;You ordered a {item}, your total is now $ {total_rounded}&quot;) else: print(f&quot;You inputted {item}, this is not an item on our menu. Please select again!&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 You ordered a burger, your total is now $ 3.99 You ordered a drink, your total is now $ 4.98 You ordered a fries, your total is now $ 6.97 You inputted apple, this is not an item on our menu. Please select again .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week7/2022/10/10/.burger.html",
            "relUrl": "/jupyter/week7/2022/10/10/.burger.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "JavaScript and HTML",
            "content": "| JS Table | Scrum Process | Rapid API | .",
            "url": "https://e-shen2022.github.io/emma_blog/frontend/jsTable",
            "relUrl": "/frontend/jsTable",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Group Project",
            "content": "| JS Table | Scrum Process | Rapid API | . Our Scrum Process . Our College Board Task Plan Link .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week7/2022/09/25/scrumprocess.html",
            "relUrl": "/markdown/week7/2022/09/25/scrumprocess.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, Emma!&quot;) . Hello, Emma! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, Emma!&quot;; console.log(msg); . Hello, Emma! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, Emma! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Types of variables in JavaScript&quot;) logItType(&quot;AP Computer Science Principles&quot;); // String logItType(32 / 2); // Number logItType([&quot;Emma&quot;, &quot;Vivian&quot;, &quot;Sarah&quot;, &quot;Amay&quot;]); // Object is generic for this Array, which similar to Python List . Types of variables in JavaScript string ; AP Computer Science Principles number ; 16 object ; [ &#39;Emma&#39;, &#39;Vivian&#39;, &#39;Sarah&#39;, &#39;Amay&#39; ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Emma&quot;, &quot;e-shen2022&quot;, 2024), new Person(&quot;Vivian&quot;, &quot;vivianknee&quot;, 2024), new Person(&quot;Amay&quot;, &quot;amayadvani&quot;, 2024), new Person(&quot;Sarah&quot;, &quot;sarahliu2006&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Emma&#39;, ghID: &#39;e-shen2022&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Vivian&#39;, ghID: &#39;vivianknee&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Amay&#39;, ghID: &#39;amayadvani&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Sarah&#39;, ghID: &#39;sarahliu2006&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Emma | e-shen2022 | 2024 | Student | Vivian | vivianknee | 2024 | Student | Amay | amayadvani | 2024 | Student | Sarah | sarahliu2006 | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://e-shen2022.github.io/emma_blog/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Focus and Habits",
            "content": "Emma&#39;s takeaways . My biggest takeaway is to focus on what I can control. If I were to not win a lottery, I should realize that it was up to chance and there was nothing I could do to make me win, I shouldn&#39;t spend any negative emotions on a situation I have no control over. However, when it comes to pursuing happiness, I do need to take effort to do things that bring me joy and surround myself with people I love. In this way, we won&#39;t tie our self worth to our salary, where we live, etc. because we can be content with our life in any circumstance. Vivian&#39;s takeaways . I learned that things like your salary or your job aren&#39;t what necessarily make you happy, rather data shows that people who spend more time engaging in social activities feel more happy overall. This goes along with being time affluent and avoiding burnout. Amay&#39;s takeaways . A student&#39;s life is mostly centered around learning. A student will need to show evidence of their learning in almost every lesson they attend. Concentrating on their work and employing effective study techniques are two approaches to assist students in learning. We must value our time, as Laurie Santos discussed in her address. If we value our time, we have more of it and may use it to enhance our mental health. There are various ways we may make the most of our time. For instance, we may efficiently spend our time by concentrating on our task, doing it quickly, and avoiding rushing it at the last minute. In accordance with Laurie Santos&#39;s discourse, we should also exercise self-control and develop healthy routines.When you have the opportunity to work hard and have a break from your responsibilities, you should do so. These actions would improve your academic performance as well as your general wellbeing since they would reduce the amount of homework you have to complete at home. Sarah&#39;s takeaways . From the video, I learned that small things like money and grades won&#39;t necessarily happier. An experiment showed that participating in activities like giftgiving can help make a person much happier. .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week4/2022/09/15/focusandhabits.html",
            "relUrl": "/markdown/week4/2022/09/15/focusandhabits.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Docker Server",
            "content": "These are my 2 local servers! . Python Web Server . FastPages Web Server . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week4/2022/09/14/docker-server.html",
            "relUrl": "/markdown/week4/2022/09/14/docker-server.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "The Big Idea",
            "content": "Program Purpose: . AI algorithm that based on inputs of the user&#39;s symptoms, outputs the user&#39;s most probably sicknesses! (specifically towards helping user discern between COVID-symptoms and common cold/fever/cough symptoms) . Roles . Scrum Master: Emma Shen | DevOP: Amay Advani | Frontend Developer: Vivian Ni | Backend Developer: Sarah Liu | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week5/2022/09/12/performancetask.html",
            "relUrl": "/markdown/week5/2022/09/12/performancetask.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Bash Tool Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/emma/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/emma/.local/share/jupyter/kernels/bash javascript /home/emma/.local/share/jupyter/kernels/javascript python3 /home/emma/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/emma/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week1/2022/09/11/bash-notebook.html",
            "relUrl": "/jupyter/week1/2022/09/11/bash-notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "App Lab Quiz",
            "content": "Creation 1: A Derivative Quiz . Press on me! . 1 Program Purpose and Function . Program Purpose: Memory of the many derivatives is essential in succeeding in Calculus. I am currently struggling to remember the derivatives after a summer of no-calculus practice, so I hope this quiz can jog my own memory and help others as well! This program is meant to be a quick and easy study tool for students aking Calculus . Functionality: This program is a three-question quiz that tests a student&#39;s capability to remember the derivatives of sin(x), cos(x), and tan(x). The app starts on the home page where a text welcomes the user to the quiz, the user presses Start Quiz to begin. Now the user must answer 3 questions. If they answer correctly, &quot;Correct Answer!&quot; text appears. If they answer correctly, &quot;Incorrect Answer&quot; text appears. Regardless if the user gets the problem correct, the screen will change to the next screen within 2 seconds. The last screen is where it gives your resuls: score out of 3. . 2 Data Abstraction . (simplifies a set of data by representing it in some general way) I used data abstraction by creating a variable called “score”. I initialized this variable to 0, and everytime the user answers a question correctly, 1 is added to the current score. In this way, I can record each user’s personal correct answer count in one variable and use it to print out their final score. . 3 Managing Complexity . ?? . 4 Procedural Abstraction . (when we write code sections which are generalised by having variable parameters. The idea is that we have code which can cope with a variety of different situations, depending on how its parameters are set when it is called.) . 5 Algorithmn Implementation . ?? . 6 Testing/Debugging . Successes . I made the app fairly user-friendly. I added sounds to make it more entertaining and allowed 2 seconds of rest between each question | I think I designed the background and layout pretty well. The colors are soothing and images are interesting to look at | I found a way to calculate the user&#39;s score using a variable | . Challenges &amp; Discoveries . Sometimes I would forget to name each button, element, and image and I would command the wrong one which would make my app just appear to not be doing anything --&gt; For my second creation I made sure to name each element so I don&#39;t confuse myself again | I couldn&#39;t find a way to combine the similar code among different buttons into one chunk. I had to code almost the same exact thing for each wrong answer and each correct answer. Next time I need to utilize for loops and if statements | . How it works: . First, I defined and set a variable, score to 0. This will be used to calculate the user&#39;s end score out of 3 | I set the screen to &quot;homescreen&quot;, which is where the user should start | When the user clicks the &quot;start quiz&quot; button, the app takes them to the first question screen and plays a soothing &quot;start sound&quot;. However because when I designed the screen for the first question there is the &quot;correct answer!&quot; text, I must first hide this element so it doesn&#39;t appear until later | For the first question the correct answer is cos(x). Thus, if the user clicks cos(x) 1 is added to the score variable. The text &quot;correct answer!&quot; appears and a positive sound is played. The screen then changes to the next question in 2 seconds. This time is meant to make it less abrupt and friendly to user | If the user presses any other answer for example -cos(x), the score stays the same. I show the element &quot;correct answer!&quot; but change the text color to red and replace the text with &quot;wrong answer&quot;. A negative sound plays and it waits 2 seconds until the next question | Same process for the second question | Once the user answers the third question, the screen is taken to the results screen. However, because the score for each user is different, I set the &quot;score_result&quot; text to the variable score that has been accumulating the user&#39;s amount of correct answers. | Future learning . I need to learn how to make a function and pass multiple parameters so that the code can cope with multiple situations. (Procedural Abstraction) | I need to use a list/dictionary to simplify code into one flexible section. For example, all questions and answer choices are in a dictionary, create function that calls each set on one screen. (Managing Complexity) | Includes sequencing, selection, or iteration. For example, how list is used or a for loop. (Algorithm Implementation) | . Creation 2: &quot;Are you a Summer or Winter person?&quot; . Press on me! . Here is a second app I made for fun. I always loved taking buzzfeed quizzes as a kid for fun, they told me a little more about myself even if it was an innaccurate judgement! . Something different: A difference between this buzzfeed quiz and my derivative quiz, is that I made 2 variables, a function, and used an if statement . I made a variable summer and a variable winter, I initialized both to 0 | I defined a function called &quot;setResult&quot; that set a variable max equal to summer, so assuming that the user has more summer answers than winter answers. I would then set the variable result to the text &quot;summer&quot;. If the number of winter answers was greater than max (summer answers), the max would now be set to winter, and result would be text &quot;winter&quot;. To make the sentence on the result screen the same words, I made a label that would only replace the word &quot;summer&quot; or &quot;winter&quot; in the sentence &quot;you are a __ person!&quot; | .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week3/2022/09/07/quiz.html",
            "relUrl": "/markdown/week3/2022/09/07/quiz.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "My Weekly Progress",
            "content": "Week 0 Week 1 Week 2 Week 3 Week 4 Week 5 Week 6 Week 7 . Emma&#39;s Markdown Post | Bash Tool Checks | Lists, Dictionaries, Loops | App Lab Quiz | Focus and Habits | JavaScript and HTML | College Board Learning | Error Testing | . First Jupyter Notebook | AP Physics, APEL, APCSP, and AP Calc BC Study Guide | DNHS Bell Schedule | | Docker Server | Javascript Tutorial | College Board Learning Notes | Python Rapid API | . Fastpages Notebook Blog Post | Python Quiz | My Weekly Progress | | | The Big Idea | | Group Project | . | AP Computer Science Principles Blogging | | | | | | | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week2/2022/09/04/classweeks.html",
            "relUrl": "/markdown/week2/2022/09/04/classweeks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Lists, Dictionaries, Loops",
            "content": "A Caesar cipher is a simple method of encoding messages. Caesar ciphers use a substitution method where letters in the alphabet are shifted by some fixed number of spaces to yield an encoding alphabet. A Caesar cipher with a shift of 1 would encode an A as a B, an M as an N, and a Z as an A, and so on. The method is named after Roman leader Julius Caesar, who used it in his private correspondence! . alphabet = [&#39;a&#39;,&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;,&#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] text = input(&quot;Type your message: n&quot;).lower() #asks for user&#39;s message print(&quot;Your message is: &quot; + text) shift = int(input(&quot;Type the shift number: n&quot;)) #asks for shift number print(f&quot;Your shift number is: {shift}&quot;) def encrypt(text, shift): #define function cipher_text = &quot;&quot; #set cipher_text to empty for letter in text: #looping through each letter in the user&#39;s message position = alphabet.index(letter) #set letter&#39;s alphabet index to variable position new_position = position + shift #set the letter&#39;s new position with shift number new_letter = alphabet[new_position] #new letter with new position cipher_text += new_letter #add letters one by one to empty cipher_text print(f&quot;Your encoded text is: {cipher_text}&quot;) #print the encoded text encrypt(text, shift) . Your message is: hello Your shift number is: 3 Your encoded text is: khoor . Types of Variables: String, Integer, Float, List, and Dictionary In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. . # variable of type string name = &quot;Emma Shen&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;Html&quot;, &quot;CSS&quot;, &quot;C&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) ###REVERSED ORDER##### fruits = [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;, &quot;Pear&quot;, &quot;Blueberry&quot;, &quot;Grape&quot;] fruits.reverse() print(&#39; nReversed List:&#39;, fruits) ###PRINT IN RANDOM ORDER#### import random print(&quot; nAre you bored? Would you like us to give you a random, fun activity to do right now?&quot;) activities = [&quot;biking&quot;, &quot;baking&quot;, &quot;playing basketball&quot;, &quot;going to the beach&quot;, &quot;sleeping&quot;] randomWord = random.choice(activities) print(&quot;An activity you could do is&quot;, randomWord + &quot;!&quot;) . name Emma Shen &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[3] C &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Emma Shen&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Emma Shen &lt;class &#39;str&#39;&gt; Reversed List: [&#39;Grape&#39;, &#39;Blueberry&#39;, &#39;Pear&#39;, &#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;] Are you bored? Would you like us to give you a random, fun activity to do right now? An activity you could do is sleeping! . Lists and Dictionaries Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many Dictionary is used to define data patterns. Iteration is often used to process through lists. To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). . InfoDb = [] # Append to List a 2nd Dictionary of key/values #added records for my gender, phone number, and age InfoDb.append({ &quot;FirstName&quot;: &quot;Emma&quot;, &quot;LastName&quot;: &quot;Shen&quot;, &quot;Gender&quot;: &quot;Female&quot;, &quot;DOB&quot;: &quot;July 29&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aimashen.2017@gmail.com&quot;, &quot;PhoneNumber&quot;: &quot;858-705-5930&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Tennis&quot;, &quot;Listening to music&quot;, &quot;Baking&quot;,] }) #my partner info in dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Vivian&quot;, &quot;LastName&quot;: &quot;Ni&quot;, &quot;Gender&quot;: &quot;Female&quot;, &quot;DOB&quot;: &quot;May 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;vivianni452@gmail.com&quot;, &quot;PhoneNumber&quot;: &quot;410-227-5596&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Art&quot;, &quot;Cybersecurity&quot;, &quot;Graphic design&quot;,] }) import getpass, sys ####User&#39;s input added to list### FirstName = input(&quot;Enter your first name: &quot;) LastName = input(&quot;Enter your last name: &quot;) Gender = input(&quot;Enter your gender: &quot;) DOB = input(&quot;Enter your birthday: &quot;) Residence = input(&quot;Enter your city: &quot;) Email = input(&quot;Enter your email: &quot;) PhoneNumber = input(&quot;Enter your phone number (with dashes in between): &quot; ) Age = input(&quot;Enter your age: &quot;) #for loop for hobbies, since want multiple outputs Hobbies=[] max_length = 3 while len(Hobbies) &lt; max_length: userHobby = input(&quot;Enter a hobby you enjoy: &quot;) Hobbies.append(userHobby) print(Hobbies) InfoDb.append({ &quot;FirstName&quot;: FirstName, &quot;LastName&quot;: LastName, &quot;Gender&quot;: Gender, &quot;DOB&quot;: DOB, &quot;Residence&quot;: Residence, &quot;Email&quot;: Email, &quot;PhoneNumber&quot;: PhoneNumber, &quot;Age&quot;: Age, &quot;Hobbies&quot;: Hobbies, }) # Print the data structure print(InfoDb) . [&#39;eating&#39;, &#39;&#39;, &#39;&#39;] [{&#39;FirstName&#39;: &#39;Emma&#39;, &#39;LastName&#39;: &#39;Shen&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aimashen.2017@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-705-5930&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Tennis&#39;, &#39;Listening to music&#39;, &#39;Baking&#39;]}, {&#39;FirstName&#39;: &#39;Vivian&#39;, &#39;LastName&#39;: &#39;Ni&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;May 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;vivianni452@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;410-227-5596&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Art&#39;, &#39;Cybersecurity&#39;, &#39;Graphic design&#39;]}, {&#39;FirstName&#39;: &#39;alexa&#39;, &#39;LastName&#39;: &#39;murphy&#39;, &#39;Gender&#39;: &#39;female&#39;, &#39;DOB&#39;: &#39;july 28&#39;, &#39;Residence&#39;: &#39;la&#39;, &#39;Email&#39;: &#39;alfjweoef@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;868-494-2938&#39;, &#39;Age&#39;: &#39;19&#39;, &#39;Hobbies&#39;: [&#39;eating&#39;, &#39;&#39;, &#39;&#39;]}] . Formatted output of Dictionary Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Gender:&quot;, d_rec[&quot;Gender&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Phone Number:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Age:&quot;, d_rec[&quot;Age&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;Formatted for loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Formatted for loop output Emma Shen Gender: Female Birth Day: July 29 Residence: San Diego Email: aimashen.2017@gmail.com Phone Number: 858-705-5930 Age: 16 Hobbies: tennis, listening to music, baking Vivian Ni Gender: Female Birth Day: May 13 Residence: San Diego Email: vivianni452@gmail.com Phone Number: 410-227-5596 Age: 16 Hobbies: art, cybersecurity, graphic design Alan Shen Gender: Male Birth Day: November 14 Residence: Arizona Email: alanshen@gmail.com Phone Number: 858-860-4999 Age: 21 Hobbies: Gaming, Swimming, Cooking . While loop In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print(record) i += 1 return while_loop() . While loop output {&#39;FirstName&#39;: &#39;Emma&#39;, &#39;LastName&#39;: &#39;Shen&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aimashen.2017@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-705-5930&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Tennis&#39;, &#39;Listening to music&#39;, &#39;Baking&#39;]} {&#39;FirstName&#39;: &#39;Vivian&#39;, &#39;LastName&#39;: &#39;Ni&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;May 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;vivianni452@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;410-227-5596&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Art&#39;, &#39;Cybersecurity&#39;, &#39;Graphic design&#39;]} {&#39;FirstName&#39;: &#39;alexa&#39;, &#39;LastName&#39;: &#39;murphy&#39;, &#39;Gender&#39;: &#39;female&#39;, &#39;DOB&#39;: &#39;july 28&#39;, &#39;Residence&#39;: &#39;la&#39;, &#39;Email&#39;: &#39;alfjweoef@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;868-494-2938&#39;, &#39;Age&#39;: &#39;19&#39;, &#39;Hobbies&#39;: [&#39;eating&#39;, &#39;&#39;, &#39;&#39;]} . Recursion (calling a loop repeatedly) This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Emma Shen Gender: Female Birth Day: July 29 Residence: San Diego Email: aimashen.2017@gmail.com Phone Number: 858-705-5930 Age: 16 Hobbies: tennis, listening to music, baking Vivian Ni Gender: Female Birth Day: May 13 Residence: San Diego Email: vivianni452@gmail.com Phone Number: 410-227-5596 Age: 16 Hobbies: art, cybersecurity, graphic design Alan Shen Gender: Male Birth Day: November 14 Residence: Arizona Email: alanshen@gmail.com Phone Number: 858-860-4999 Age: 21 Hobbies: Gaming, Swimming, Cooking . Quiz that stores in a List of Dictionaries . questions = 5 #number of quiz questions correct = 0 #initialize number of correct answers as 0 print(&quot;This is a 5 question trivia quiz, good luck!&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) #asks user a question user_input = input() #takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) #print user&#39;s input as Answer if answer == user_input.lower(): #convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct #allows to modify variable outside of current scope correct += 1 #add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;Which is the largest planet in the solar system?&quot;, &quot;jupiter&quot;) question_2 = question_and_answer(&quot;Are worker bees male or female?&quot;, &quot;female&quot;) question_3 = question_and_answer(&quot;What type of fish is Nemo?&quot;, &quot;clownfish&quot;) question_4 = question_and_answer(&quot;How much is the diameter of a basketball hoop? (answer in inches and written out as a word)&quot;, &quot;eighteen&quot;) question_5 = question_and_answer(&quot;Name the largest state in America&quot;, &quot;alaska&quot;) if correct &lt; 3: print(f&#39;You scored {correct} correct answers out of 5, better luck next time!&#39;) elif correct &lt; 5: print(f&#39;You scored {correct} correct answers out of 5, nice try!&#39;) else: print(f&#39;You scored {correct} correct answers out of 5, nice going you trivia star!&#39;) Quiz = { &quot;Q_1&quot;: question_1, &quot;Q_2&quot;: question_2, &quot;Q_3&quot;: question_3, &quot;Q_4&quot;: question_4, &quot;Q_5&quot;: question_5 } print(&quot;A record of your quiz:&quot;, Quiz) . This is a 5 question trivia quiz, good luck! Question: Which is the largest planet in the solar system? Answer: Jupiter Correct Answer Question: Are worker bees male or female? Answer: Female Correct Answer Question: What type of fish is Nemo? Answer: Clownfish Correct Answer Question: How much is the diameter of a basketball hoop? (answer in inches and written out as a word) Answer: eighteen Correct Answer Question: Name the largest state in America Answer: alaska Correct Answer You scored 5 correct answers out of 5, nice going you trivia star! A record of your quiz: {&#39;Q_1&#39;: &#39;Jupiter&#39;, &#39;Q_2&#39;: &#39;Female&#39;, &#39;Q_3&#39;: &#39;Clownfish&#39;, &#39;Q_4&#39;: &#39;eighteen&#39;, &#39;Q_5&#39;: &#39;alaska&#39;} .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week2/2022/08/31/2022-loops.html",
            "relUrl": "/jupyter/week2/2022/08/31/2022-loops.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Resume",
            "content": "Emma Shen . (858)-705-5930 | aimashen.2017@gmail.com | . San Diego, CA . Career Interest: Computer Science . Education . - Del Norte High School (Class of 2024) . - Unweighted GPA: 3.95, Weighted GPA: 4.41 . - Completed AP classwork: AP Biology, AP Calculus AB, AP Chemistry, AP Chinese, AP European History . Outside Courses . - 100 Days of Code - The Complete Python Pro Bootcamp (November 2021 - January 2022), Grade A | Udemy | . - CS50: Introduction to Computer Science (April 2022 - June 2022), Grade A | Harvard University | . Awards &amp; Achievements . - Winning Project in UCLA Computer Science Summer Institute Intermediate Track (2021) | International | . - Gold President’s Volunteer Service Award (2022) | National | . - AP Scholar Award with Distinction (2022) | National | . - Scholar Athlete Award (2021) | School | . Extracurricular Activities . - Founder and President, Academics and Athletics for All (March 2022-Present) Student-run nonprofit organization to collect and distribute sports equipment, athletic clothing, and educational materials to underprivileged kids. . - Outreach leader and coder, First Tech Challenge Team (May 2022 - Present) . Build and program a robot to compete in tournaments. Organize volunteering events to introduce robotics to children interested in STEM. . - Mentor for FLL Robotics Team (July 2022 - Present) . - Leader, First Lego League Team (2017-2019) . Competed in 3 tournament divisions at the middle-school level. Solved missions with a LEGOMINDSTORM robot on a special obstacles course. Presented an innovative solution to a real world problem to a panel of judges. Learned how to efficiently lead a team under points of pressure. . - Member (2014-2021), Leader in Training (2020-Present), AWANA . Take care and teach a group of kids about Jesus and the bible through games and small group activities. . - Vice-President, International Association of Youth (July 2022 - Present) . Collect and distribute sleeping bags to the homeless . - Competitive Tennis (2016-Present) . Competed in USTA tournaments around Southern California. Del Norte High School Varsity tennis team. Freshmen year - Third Place in Palomar League Singles Division .",
            "url": "https://e-shen2022.github.io/emma_blog/2022/08/30/resume.html",
            "relUrl": "/2022/08/30/resume.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "AP Physics, APEL, APCSP, and AP Calc BC Study Guide",
            "content": "Trimester 1 . . AP Physics Unit 1: Introduction &amp; Measurements . 3 Basic Quantities: Length, Mass, Time | SI units: Meter(m), Kilogram(kg), Seconds(s) | Dimensions to know 10^-9 nano | 10^-6 mico | 10^-3 milli | 10^-2 centi | 10^-1 deci | 10^1 deca | 10^3 kilo | 10^6 mega | 10^9 giga | . | Dimensional Analysis | Sig Figs Measurement: 1 more digit than certain | All non-zeros digits significant (37.12 --&gt; 4 SF) | All #s between SF are significant(12007 --&gt; 5 SF | All trailing zeroes w/decimal point are significant(107.300--&gt;6 SF) | Leading zeroes never significant(0.00003 --&gt;1 SF) | Multiplication/division: same # of SF as term with least amount of SF Addition/Subtraction: same # of digits to right of DECIMAL as measurement with smallest # of digits to the right of the decimal | &lt;/ul&gt; | Lab 1 | . AP English Language . The Rhetorical Situation: Individuals write within a particular situation and make strategic writing choices based on that situation . Genre: speech, essay, personal letter, etc | Context: Historical, cultural, and/or political issues occuring when piece written | Exigence: The event that inspires, provokes, or prompts the writer to pick up their pen | Speaker/Writer: credentials/adjectives, their values | Audience: intended receivers/listeners | Purpose: goal of text(call to action, argument, to __) | Message: ideas contained in the text, a full phrase | . Attacking the FRQ . Read the prompt. Annotate the Rhetorical Situation | Read passage(write main idea in margins, underline key lines, identify rhetorical devices, identify shifts, develop understanding of rhetorical situation) | Write essay (introduction + thesis, 2 or 3 body paragraphs) | . AP Computer Science Principles . Learning how to code in Python, use vscode and Github, and make markdown posts/jupyter notebooks. . Terms to Know . input = instructions you give to a computer | output = the information the computer gives to you | sequence = several lines of code together | key (name) --&gt; value (Emma) | . Python Linux Commmands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory &lt;/ul&gt; . AP Calculus BC . Unit 1 . Rewriting Absolute Value into piecewise | &quot;Gotta know&quot; trig limits | Computing limits-end behavior | Absolute Value &amp; End Behavior Limit | Definition of Continuity (The 2 types) | If f&amp; g continuous, then... | Composite Function | Intermediate Value Theorem | . | | . | . | .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week1/2022/08/28/classes.html",
            "relUrl": "/markdown/week1/2022/08/28/classes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): #defines question_and_answer print(&quot;Question: &quot; + prompt) #asks user a question msg = input() #takes user&#39;s input print(&quot;Answer: &quot; + msg) # prints user&#39;s input as answer def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg #returns as string value questions = 6 #number of quiz questions correct = 0 #initialize number of correct answers to 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: #compares user&#39;s response to answer, if &quot;import&quot; than correct, if other than not correct print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the word for several lines of code together?&quot;) if rsp == &quot;sequence&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What does ls stand for?&quot;) if rsp == &quot;list&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What button do you have to click to sync changes with vscode and your fastpages?&quot;) if rsp == &quot;commit&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, aimas running c: Users aimas AppData Local Programs Python Python310 python.exe You will be asked 6 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What is the word for several lines of code together? sequence is correct! Question: What does ls stand for? list is correct! Question: What button do you have to click to sync changes with vscode and your fastpages? commit is correct! aimas you scored 6/6 .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week1/2022/08/26/quiz.html",
            "relUrl": "/jupyter/week1/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Emma's Markdown Post",
            "content": "Welcome to My Blog! . Hello! . . Hi! My name is Emma Shen and I&#39;m a junior at Del Norte High School. I&#39;m an aspiring software developer and interested in AI robotics. I ❤️ boba milk tea and listening to indie pop music.🎵 I have some Python, C, Java, Html, and CSS experience. I would love to code with anyone for fun! .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week0/2022/08/22/test-markdown-post.html",
            "relUrl": "/markdown/week0/2022/08/22/test-markdown-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;Hi!! I hope you are having a wonderful day. What&#39;s one thing you are excited about today?&quot;) . Hi!! I hope you are having a wonderful day. What&#39;s one thing you are excited about today? .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week0/2022/08/22/notebook.html",
            "relUrl": "/jupyter/week0/2022/08/22/notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "DNHS Bell Schedule",
            "content": "Monday, Tuesday, Thursday . Period Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 PM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Wednesday (Late Start) . Period Start Time End Time . Period 1 | 9:55 AM | 10:53 AM | . Period 2 | 10:58 AM | 11:56 AM | . Break | 11:56 AM | 12:06 pM | . Period 3 | 12:11 PM | 1:09 PM | . Lunch | 1:09 PM | 1:39 PM | . Period 4 | 1:44 PM | 2:42 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:47 PM | 3:45 PM | . Friday . Period Start Time End Time . Period 1 | 8:35 AM | 9:49 AM | . Period 2 | 9:54 AM | 11:08 AM | . Break | 11:08 AM | 11:18 AM | . Period 3 | 11:23 AM | 12:37 PM | . Lunch | 12:37 PM | 1:07 PM | . Period 4 | 1:12 PM | 2:26 PM | . Period 5 | 2:31 PM | 3:45 PM | . .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week2/2022/08/22/bellschedule.html",
            "relUrl": "/markdown/week2/2022/08/22/bellschedule.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "AP Computer Science Principles Blogging",
            "content": "Welcome to my APCSP Blog! . Here is where I will document my learning in AP Computer Science Principles every week! . Week 1 . I downloaded all the tools and equipment needed for this class | I learned basic cs vocabulary such as input, output, sequence, and key/value | I learned Python Linux commands (pwd, cd, mkdirr, ls) | I learned how to make markdown posts and jupyter notebooks | I used Python to create a 6-question quiz | I used a jupyter notebook to write code that checks to see if I have the right packages installed (Bash) | I searched up by myself how to make my website have a background color and text-align the title in the middle | I made a study guide I can update throughout the year for all of my classes | . # Week 2 . I learned how to use lists and dictionaries | I learned how to add user input to a dictionary | I made a cool ceasar cipher that uses a for loop and shift numbers to make an ecoded message | I learned how to make a table in html | I used css to turn website into dark mode | I organized my tags into the different weeks, this way I can easily refer to them later | .",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week1/2022/08/22/apcspblbog.html",
            "relUrl": "/markdown/week1/2022/08/22/apcspblbog.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False | . Answer: 1000(B) = 8(D) =! 90(D) --&gt; B. False . 2. 10(D) ≠ 0110(B) . A. True | B. False | . Answer: 0110(B) = 6(D) != 10(D)--&gt; A. True . 3. 56(D) ≥ 111000(B) . A. True | B. False | . Answer: 111000(B) = 56(D) --&gt; 56(D) &gt;= 56(D) --&gt; A. True . 4. 99(D) &lt; 1110011(B) . A. True | B. False | . Answer: 1110011(B) = 115(D) --&gt; 99(D) &lt; 115(D) --&gt; A. True . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 != 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &lt;= y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z + y) . False True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer: &quot;Please schedule a retake&quot; . result = 75 . 75 &lt; 80 --&gt; &quot;Please schedule a retake&quot; . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | Answer: 2 . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | Answer: 2. If-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Answer: 1. If statement . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? --&gt; True print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) elif i == &quot;wildebeest&quot;: print(&quot;Fun Fact: Wildebeests live in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion tiger Fun Fact: Wildebeests live in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . import selenium from selenium import webdriver from selenium.webdriver.common.keys import Keys dict = { &quot;Chicken Alfredo&quot;: [&#39;Chicken&#39;, 60], &quot;Cheese Quesadilla&quot;: [&#39;None&#39;, 10], &quot;Beef Wellington&quot;: [&#39;Beef&#39;, 150] } #for each key, value pair in the dictionary for key, values in dict.items(): count = 0 for value in values: #isinstance checks if value is a string if isinstance(value, (str)) == True: if value == &quot;None&quot;: count += 1 #isinstance checks if value is an integer elif isinstance(value, (int)) == True: if value &lt;= 30: count += 1 if count == 2: print(key) break . Cheese Quesadilla . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . Link to flow chart: https://lucid.app/lucidchart/bb804938-7853-4750-aff8-7b0b68bdf326/edit?viewport_loc=38%2C23%2C1365%2C681%2C0_0&amp;invitationId=inv_b9638135-7445-46e4-8848-8f0da2bb8562 . Lesson Takeaways: . For Binary to Decimal conversions and vice versa, I need to remember that each decimal place is to the power of 2 | if statement and if-else statements are different: if statements only preform if statement is met, if-else goes through code no matter is statement is met | I can use dictionaries and nested if statements to create a program that solves real-world problems | Sketching out a flow chart in psuedo code allows me to clear my algorithm logic. | .",
            "url": "https://e-shen2022.github.io/emma_blog/jupyter/week0/2020/02/20/test.html",
            "relUrl": "/jupyter/week0/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post40": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://e-shen2022.github.io/emma_blog/markdown/week0/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/week0/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This website is powered by [emmashen] 1. . A little about me :) . . . I founded a student-run nonprofit organization called Academics and Athletics for All. Our mission is provide resources for underpriviledged kids to pursue their sports and subject passion. We collect and distribute sports equipment, athletic clothing, and educational materials to kids who need it and hold sports clinics/tutoring events. To learn more, click here! . . I&#39;m in First Tech Challenge Team Scorpio. We build and program our own robot to compete in tournaments and volunteer to teach robotics to kids in our community!🤖 . . I&#39;m a FLL LEGO Robotics Teacher at Grace All-Star Academy . I&#39;ve been an AWANA clubber for 6 years, and became a Leader in Training 2 years ago. Now, I mentor a group of 3-4 kids in their spiritual journey, fun games, and bible memory verses.✝️ . I&#39;m on Del Norte&#39;s Varsity Tennis team!🎾 . Some fun facts . . I have a twin sister, bet you didn&#39;t know that | I had a pet chicken but it got mysteriously murdered at 4am in the morning | My favorite fruit has and always will be watermelon | . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://e-shen2022.github.io/emma_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocab",
          "content": "AP CSP Vocab Notes . Terms to Know . input = instructions you give to a computer | output = the information the computer gives to you | sequence = several lines of code together | key (name) --&gt; value (Emma) | Types of variables: Strings, Integers, Float, List, Dictionary | . Python Linux Commmands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory &lt;/ul&gt; **Lists, Dictionaries, Iterations** index --&gt; position of string in a list | Lists &amp; Dictionaries used to collect and store information | .append(expression) --&gt; adds to list | &lt;/li&gt;Recursive loops&lt;/li&gt; . | | .",
          "url": "https://e-shen2022.github.io/emma_blog/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "JavaScript",
          "content": "My Java Script Design Elements . link to my jupyter notebook using javascript and HTML fragment/Javascript data table | . .",
          "url": "https://e-shen2022.github.io/emma_blog/JavaScript/",
          "relUrl": "/JavaScript/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Frontend",
          "content": "| JS Table | Scrum Process | Rapid API | .",
          "url": "https://e-shen2022.github.io/emma_blog/Frontend/",
          "relUrl": "/Frontend/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://e-shen2022.github.io/emma_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}